coachdf <- coach[ ,names(coach) %in% na.omit(itemmaps$coach$`Variable Name`)]
## custom factor structure (just an example, not based on theory)
custom2 <- paste0("f1 =~ ", paste(names(studentdf)[1:10], collapse = " + "),
"\nf2 =~ ",paste(names(studentdf)[11:21], collapse = " + "))
custom3 <- paste0("f1 =~ ", paste(names(studentdf)[1:2], collapse = " + "),
"\nf2 =~ ",paste(names(studentdf)[3:4], collapse = " + "),
"\nf3 =~ ",paste(names(studentdf)[5:6], collapse = " + "),
"\nf4 =~ ",paste(names(studentdf)[7:8], collapse = " + "),
"\nf5 =~ ",paste(names(studentdf)[9:10], collapse = " + "),
"\nf6 =~ ",paste(names(studentdf)[11:12], collapse = " + "),
"\nf7 =~ ",paste(names(studentdf)[13:21], collapse = " + "),
"\na1101x ~~ ", paste(names(studentdf)[2:21], collapse = " + "),
"\na1102x ~~ ", paste(names(studentdf)[3:21], collapse = " + "))
library(kfa)
## set seed to get the same folds
set.seed(936639)
tictoc::tic()
kstudent <- kfa(variables = studentdf,
k = NULL,
m = 5,
custom.cfas = list(`Custom 2f` = custom2, Break = custom3),
rotation = "oblimin",
ordered = TRUE,
estimator = "DWLS",
missing = "pairwise")
tictoc::toc() # ~ 60 seconds
# Run report
kfa_report(kstudent, file.name = "kfa_students_custom",
report.format = "html_document",
report.title = "K-fold Factor Analysis - Lebenon Students")
warnings()
library(kfa)
###################################
#                                 #
#        kfa package tests        #
#                                 #
###################################
#### Import data ####
shortfile <- c("C:/Users/kylenick/University of North Carolina at Chapel Hill/Halpin, Peter Francis - UNC_stat_projets/EFA&CFA/")
student <- read.csv(paste0(shortfile, "scaledim/student_survey-latest.csv"))
teacher <- read.csv(paste0(shortfile, "scaledim/teacher_survey-latest.csv"))
principal <- read.csv(paste0(shortfile, "scaledim/principal_survey-latest.csv"))
coach <- read.csv(paste0(shortfile, "scaledim/coach_survey-latest.csv"))
## item map
itemmaps <- lapply(c("Coach_survey", "Teacher Survey",
"Principal Survey", "Student Survey"), function(x){
readxl::read_excel(paste0(shortfile, "Item construct map_2020_10_25.xlsx"),
sheet = x)})
names(itemmaps) <- c("coach", "teacher", "principal", "student")
## items for analysis
studentdf <- student[ ,names(student) %in% na.omit(itemmaps$student$`Variable Name`)]
teacherdf <- teacher[ ,names(teacher) %in% na.omit(itemmaps$teacher$`Variable Name`)]
principaldf <- principal[ ,names(principal) %in% na.omit(itemmaps$principal$`Variable Name`)]
coachdf <- coach[ ,names(coach) %in% na.omit(itemmaps$coach$`Variable Name`)]
## custom factor structure (just an example, not based on theory)
custom2 <- paste0("f1 =~ ", paste(names(studentdf)[1:10], collapse = " + "),
"\nf2 =~ ",paste(names(studentdf)[11:21], collapse = " + "))
custom3 <- paste0("f1 =~ ", paste(names(studentdf)[1:2], collapse = " + "),
"\nf2 =~ ",paste(names(studentdf)[3:4], collapse = " + "),
"\nf3 =~ ",paste(names(studentdf)[5:6], collapse = " + "),
"\nf4 =~ ",paste(names(studentdf)[7:8], collapse = " + "),
"\nf5 =~ ",paste(names(studentdf)[9:10], collapse = " + "),
"\nf6 =~ ",paste(names(studentdf)[11:12], collapse = " + "),
"\nf7 =~ ",paste(names(studentdf)[13:21], collapse = " + "),
"\na1101x ~~ ", paste(names(studentdf)[2:21], collapse = " + "),
"\na1102x ~~ ", paste(names(studentdf)[3:21], collapse = " + "))
## set seed to get the same folds
set.seed(936639)
tictoc::tic()
kstudent <- kfa(variables = studentdf,
k = NULL,
m = 5,
custom.cfas = list(`Custom 2f` = custom2, Break = custom3),
rotation = "oblimin",
ordered = TRUE,
estimator = "DWLS",
missing = "pairwise")
tictoc::toc() # ~ 60 seconds
kfa <- kstudent$cfas
k <- length(kfa)
m <- max(unlist(lapply(kfa, length)))
vnames <- dimnames(lavaan::lavInspect(kfa[[1]][[1]], "sampstat")$cov)[[1]]
klambdas <- vector("list", m)
kflag <- vector("integer", m)
n <- 2
m
n <- 6
lambdas <- data.frame()
thetas <- data.frame()
load.flag <- vector("integer", k)
for(f in 1:k){
## gather standardized loadings
loads <- subset(lavaan::standardizedSolution(kfa[[f]][[n]], "std.lv", se = FALSE),
op == "=~")
lambdas <- rbind(lambdas, loads)
# flag for model summary table
load.flag[[f]] <- sum(loads$est.std < flag)
## gather residual variances
resids <- subset(lavaan::parameterestimates(kfa[[f]][[n]], se = FALSE), op == "~~" & lhs %in% vnames)
thetas <- rbind(thetas, resids)
}
flag <- .3
for(f in 1:k){
## gather standardized loadings
loads <- subset(lavaan::standardizedSolution(kfa[[f]][[n]], "std.lv", se = FALSE),
op == "=~")
lambdas <- rbind(lambdas, loads)
# flag for model summary table
load.flag[[f]] <- sum(loads$est.std < flag)
## gather residual variances
resids <- subset(lavaan::parameterestimates(kfa[[f]][[n]], se = FALSE), op == "~~" & lhs %in% vnames)
thetas <- rbind(thetas, resids)
}
resids
lambdas <- data.frame()
thetas <- data.frame()
load.flag <- vector("integer", k)
for(f in 1:k){
## gather standardized loadings
loads <- subset(lavaan::standardizedSolution(kfa[[f]][[n]], "std.lv", se = FALSE),
op == "=~")
lambdas <- rbind(lambdas, loads)
# flag for model summary table
load.flag[[f]] <- sum(loads$est.std < flag)
## gather residual variances
resids <- subset(lavaan::parameterestimates(kfa[[f]][[n]], se = FALSE), op == "~~" & lhs %in% vnames & lhs == rhs)
thetas <- rbind(thetas, resids)
}
load.flag
## gather residual variances
resids <- subset(lavaan::parameterestimates(kfa[[f]][[n]], se = FALSE), op == "~~" & lhs %in% vnames & lhs == rhs)
lambdas <- data.frame()
thetas <- data.frame()
load.flag <- vector("integer", k)
for(f in 1:k){
## gather standardized loadings
loads <- subset(lavaan::standardizedSolution(kfa[[f]][[n]], "std.lv", se = FALSE),
op == "=~")
lambdas <- rbind(lambdas, loads)
# flag for model summary table
load.flag[[f]] <- sum(loads$est.std < flag)
## gather residual variances
resids <- subset(lavaan::parameterestimates(kfa[[f]][[n]], se = FALSE), op == "~~" & lhs %in% vnames & lhs == rhs)
thetas <- rbind(thetas, resids)
}
thetas
klambdas[[n]] <- data.frame(variable = vnames,
mean = tapply(lambdas$est.std, lambdas$rhs, mean),
min = tapply(lambdas$est.std, lambdas$rhs, min),
max = tapply(lambdas$est.std, lambdas$rhs, max),
`loading flag` = tapply(lambdas$est.std, lambdas$rhs, function(x) sum(x < flag)),
`heywood flag` = tapply(thetas$est, thetas$rhs, function(x) sum(x < 0)),
check.names = FALSE)
klambdas
summary(kstudent$cfas[[1]]$Break)
lavaan::summary(kstudent$cfas[[1]]$Break)
lavaan::lavInspect(kstudent$cfas[[1]]$Break, "post.check")
lavaan::lavInspect(kstudent$cfas[[1]]$Break, "cov.lv")
lapply(kstudent$cfas, function(x) lavaan::lavInspect(x$Break, "post.check")
)
lapply(kstudent$cfas, function(x) lavaan::lavInspect(x$Break, "convergence"))
lapply(kstudent$cfas, function(x) lavaan::lavInspect(x$Break, "converged"))
resids
cv <- lapply(kstudent$cfas, function(x) lavaan::lavInspect(x$Break, "converged"))
is <- lapply(kstudent$cfas, function(x) lavaan::lavInspect(x$Break, "post.check"))
cv | is
unlist(cv)
unlist(is)
(unlist(cv)| unlist(is)) == FALSE
(unlist(cv)& unlist(is)) == FALSE
(unlist(cv)& unlist(is))
(unlist(cv) | unlist(is))
ifelse(unlist(cv) == FALSE | unlist(is) == FALSE, FALSE, TRUE)
(unlist(cv) == FALSE | unlist(is) == FALSE)
(unlist(cv) == FALSE & unlist(is) == FALSE)
sum((unlist(cv) == FALSE | unlist(is) == FALSE))
# flags from CFA models
cfas <- kstudent$cfas
k <- length(cfas)
m <- max(unlist(lapply(cfas, length)))
## Flagging non-convergence and non-positive definite matrix warnings
cnvgd <- vector("list", k)
hey <- vector("list", k)
for(f in 1:k){
## convergence status of each model
cnvgd[[f]] <- lapply(cfas[[f]], lavaan::lavInspect, "converged")
## count of heywood cases in each model - use lavInspect(kstudent$cfas[[1]]$Break, "post.check") instead
hey[[f]] <- lapply(cfas[[f]], lavaan::lavInspect, "post.check")
}
cnvgd
n <- 6
unlist(lapply(cnvgd, '[[', n))
unlist(lapply(hey, '[[', n))
unlist(lapply(hey, '[[', n)) == FALSE
unlist(lapply(cnvgd, '[[', n)) == FALSE
library(kfa)
temp <- caret::createFolds(1:nrow(studentdf), k = 10, list = TRUE, returnTrain = FALSE)
str(temp)
temp2 <- caret::createFolds(1:nrow(studentdf), k = 10, list = TRUE, returnTrain = TRUE)
str(temp2)
nrow(temp[[1]])
length(temp[[1]])
?warning
library(kfa)
set.seed(936639)
tictoc::tic()
kstudent <- kfa(variables = studentdf,
k = NULL,
m = 5,
custom.cfas = list(`Custom 2f` = custom2, Break = custom3),
rotation = "oblimin",
ordered = TRUE,
estimator = "DWLS",
missing = "pairwise")
tictoc::toc() # ~ 60 seconds
# Run report
kfa_report(kstudent, file.name = "kfa_students_custom",
report.format = "html_document",
report.title = "K-fold Factor Analysis - Lebenon Students")
library(kfa)
###################################
#                                 #
#        kfa package tests        #
#                                 #
###################################
#### Import data ####
shortfile <- c("C:/Users/kylenick/University of North Carolina at Chapel Hill/Halpin, Peter Francis - UNC_stat_projets/EFA&CFA/")
student <- read.csv(paste0(shortfile, "scaledim/student_survey-latest.csv"))
teacher <- read.csv(paste0(shortfile, "scaledim/teacher_survey-latest.csv"))
principal <- read.csv(paste0(shortfile, "scaledim/principal_survey-latest.csv"))
coach <- read.csv(paste0(shortfile, "scaledim/coach_survey-latest.csv"))
## item map
itemmaps <- lapply(c("Coach_survey", "Teacher Survey",
"Principal Survey", "Student Survey"), function(x){
readxl::read_excel(paste0(shortfile, "Item construct map_2020_10_25.xlsx"),
sheet = x)})
names(itemmaps) <- c("coach", "teacher", "principal", "student")
## items for analysis
studentdf <- student[ ,names(student) %in% na.omit(itemmaps$student$`Variable Name`)]
teacherdf <- teacher[ ,names(teacher) %in% na.omit(itemmaps$teacher$`Variable Name`)]
principaldf <- principal[ ,names(principal) %in% na.omit(itemmaps$principal$`Variable Name`)]
coachdf <- coach[ ,names(coach) %in% na.omit(itemmaps$coach$`Variable Name`)]
# ---- test full kfold_fa function ----------------
## custom factor structure (just an example, not based on theory)
custom2 <- paste0("f1 =~ ", paste(names(studentdf)[1:10], collapse = " + "),
"\nf2 =~ ",paste(names(studentdf)[11:21], collapse = " + "))
custom3 <- paste0("f1 =~ ", paste(names(studentdf)[1:2], collapse = " + "),
"\nf2 =~ ",paste(names(studentdf)[3:4], collapse = " + "),
"\nf3 =~ ",paste(names(studentdf)[5:6], collapse = " + "),
"\nf4 =~ ",paste(names(studentdf)[7:8], collapse = " + "),
"\nf5 =~ ",paste(names(studentdf)[9:10], collapse = " + "),
"\nf6 =~ ",paste(names(studentdf)[11:12], collapse = " + "),
"\nf7 =~ ",paste(names(studentdf)[13:21], collapse = " + "),
"\na1101x ~~ ", paste(names(studentdf)[2:21], collapse = " + "),
"\na1102x ~~ ", paste(names(studentdf)[3:21], collapse = " + "))
# When custom model does not contain all items, the following error is currently produced:
# Error in { : task 1 failed - "invalid 'times' argument"
## set seed to get the same folds
set.seed(936639)
tictoc::tic()
kstudent <- kfa(variables = studentdf,
k = NULL,
m = 5,
custom.cfas = list(`Custom 2f` = custom2, Break = custom3),
rotation = "oblimin",
ordered = TRUE,
estimator = "DWLS",
missing = "pairwise")
tictoc::toc() # ~ 60 seconds
kfa <- kstudent$cfas
k <- length(kfa)
m <- max(unlist(lapply(kfa, length)))
krels <- vector("list", m)
kflag <- vector("integer", m)
n <- 5
rels <- vector("list", k)
rel.flag <- vector("integer", k)
for(f in 1:k){
rels[[f]] <- suppressMessages(semTools::reliability(kfa[[f]][[n]])[c(1,4),])
if(n == 1){
rel.flag[[f]] <- sum(rels[[f]][[2]] < flag) # flag based on omega, not alpha
} else{
rel.flag[[f]] <- sum(rels[[f]][2,] < flag) # flag based on omega, not alpha
}
}
flag <- .6
rels <- vector("list", k)
rel.flag <- vector("integer", k)
for(f in 1:k){
rels[[f]] <- suppressMessages(semTools::reliability(kfa[[f]][[n]])[c(1,4),])
if(n == 1){
rel.flag[[f]] <- sum(rels[[f]][[2]] < flag) # flag based on omega, not alpha
} else{
rel.flag[[f]] <- sum(rels[[f]][2,] < flag) # flag based on omega, not alpha
}
}
rels
# Run report
kfa_report(kstudent, file.name = "kfa_students_custom",
report.format = "html_document",
report.title = "K-fold Factor Analysis - Lebenon Students")
library(kfa)
# Run report
kfa_report(kstudent, file.name = "kfa_students_custom",
report.format = "html_document",
report.title = "K-fold Factor Analysis - Lebenon Students")
# Run report
kfa_report(kstudent, file.name = "kfa_students_custom",
report.format = "word_document",
report.title = "K-fold Factor Analysis - Lebenon Students")
#### Import data ####
shortfile <- c("C:/Users/kylenick/University of North Carolina at Chapel Hill/Halpin, Peter Francis - UNC_stat_projets/EFA&CFA/")
student <- read.csv(paste0(shortfile, "scaledim/student_survey-latest.csv"))
teacher <- read.csv(paste0(shortfile, "scaledim/teacher_survey-latest.csv"))
principal <- read.csv(paste0(shortfile, "scaledim/principal_survey-latest.csv"))
coach <- read.csv(paste0(shortfile, "scaledim/coach_survey-latest.csv"))
## item map
itemmaps <- lapply(c("Coach_survey", "Teacher Survey",
"Principal Survey", "Student Survey"), function(x){
readxl::read_excel(paste0(shortfile, "Item construct map_2020_10_25.xlsx"),
sheet = x)})
names(itemmaps) <- c("coach", "teacher", "principal", "student")
## items for analysis
studentdf <- student[ ,names(student) %in% na.omit(itemmaps$student$`Variable Name`)]
teacherdf <- teacher[ ,names(teacher) %in% na.omit(itemmaps$teacher$`Variable Name`)]
principaldf <- principal[ ,names(principal) %in% na.omit(itemmaps$principal$`Variable Name`)]
coachdf <- coach[ ,names(coach) %in% na.omit(itemmaps$coach$`Variable Name`)]
## custom factor structure (just an example, not based on theory)
custom2 <- paste0("f1 =~ ", paste(names(studentdf)[1:10], collapse = " + "),
"\nf2 =~ ",paste(names(studentdf)[11:21], collapse = " + "))
custom3 <- paste0("f1 =~ ", paste(names(studentdf)[1:2], collapse = " + "),
"\nf2 =~ ",paste(names(studentdf)[3:4], collapse = " + "),
"\nf3 =~ ",paste(names(studentdf)[5:6], collapse = " + "),
"\nf4 =~ ",paste(names(studentdf)[7:8], collapse = " + "),
"\nf5 =~ ",paste(names(studentdf)[9:10], collapse = " + "),
"\nf6 =~ ",paste(names(studentdf)[11:12], collapse = " + "),
"\nf7 =~ ",paste(names(studentdf)[13:21], collapse = " + "),
"\na1101x ~~ ", paste(names(studentdf)[2:21], collapse = " + "),
"\na1102x ~~ ", paste(names(studentdf)[3:21], collapse = " + "))
library(kfa)
set.seed(936639)
tictoc::tic()
kstudent <- kfa(variables = studentdf,
k = NULL,
m = 5,
custom.cfas = list(`Custom 2f` = custom2, Break = custom3),
rotation = "oblimin",
ordered = TRUE,
estimator = "DWLS",
missing = "pairwise")
tictoc::toc() # ~ 60 seconds
kfa <- kstudent$cfas
k <- length(kfa)
m <- max(unlist(lapply(kfa, length)))
krels <- vector("list", m)
kflag <- vector("integer", m)
flag <- .60
n <- 6
rels <- vector("list", k)
rel.flag <- vector("integer", k)
for(f in 1:k){
rels[[f]] <- suppressMessages(semTools::reliability(kfa[[f]][[n]])[c(1,4),])
if(n == 1){
rel.flag[[f]] <- sum(rels[[f]][[2]] < flag) # flag based on omega, not alpha
} else{
rel.flag[[f]] <- sum(rels[[f]][2,] < flag) # flag based on omega, not alpha
}
}
rel.flag
rels
## mean reliability across folds
krels[[n]] <- Reduce(`+`, rels) / length(rels)
krels
## mean reliability across folds
fnames <- names(rels[[f]])
fnames
rels[[f]]
## mean reliability across folds
frnames <- dimnames(rels[[f]])
frnames
t(rels[[f]])
kfa <- kstudent$cfas
k <- length(kfa)
m <- max(unlist(lapply(kfa, length)))
krels <- vector("list", m)
oflag <- vector("integer", m)
aflag <- vector("integer", m)
rels <- vector("list", k)
for(f in 1:k){
rels[[f]] <- t(suppressMessages(semTools::reliability(kfa[[f]][[n]])[c(1,4),]))
}
rels
rels <- vector("list", k)
for(f in 1:k){
rels[[f]] <- as.data.frame(t(suppressMessages(semTools::reliability(kfa[[f]][[n]])[c(1,4),])))
}
rels
str(rels[[1]])
?tapply
Reduce(rbind, rels)
rels <- vector("list", k)
for(f in 1:k){
rels[[f]] <- t(suppressMessages(semTools::reliability(kfa[[f]][[n]])[c(1,4),]))
}
Reduce(rbind, rels)
krels[[n]] <- Reduce(rbind, rels)
krels[[6]]
str(krels[[6]])
frnames
rels <- vector("list", k)
frnames <- vector("list", k)
for(f in 1:k){
rels[[f]] <- t(suppressMessages(semTools::reliability(kfa[[f]][[n]])[c(1,4),]))
frnames <- dimnames(rels[[f]])
}
frnames
aos <- do.call("rbind", rels)
aos
frnames[[1]]
aos[[2]]
aos[, 2]
dimaos <- dimnames(aos)
dimaos
n <- 1
krels <- vector("list", m)
rels <- vector("list", k)
for(f in 1:k){
rels[[f]] <- t(suppressMessages(semTools::reliability(kfa[[f]][[n]])[c(1,4),]))
}
rels
## mean reliability across folds
aos <- do.call("rbind", rels)
aos
nrows(aos)
nrow(aos)
rm(n, f)
rm(aos)
rm(rels)
rm(dimaos, frnames, krels)
kfa <- kstudent$cfas
k <- length(kfa)
m <- max(unlist(lapply(kfa, length)))
krels <- vector("list", m)
kflag <- vector("integer", m)
for(n in 1:m){
rels <- vector("list", k)
for(f in 1:k){
rels[[f]] <- t(suppressMessages(semTools::reliability(kfa[[f]][[n]])[c(1,4),]))
}
## mean reliability across folds
aos <- do.call("rbind", rels)
if(n == 1){
fnames <- rep("f1", nrow(aos))
} else{
fnames <- dimnames(aos)[[1]]
}
krels[[n]] <- data.frame(factor = ifelse(n == 1, "f1", dimnames(rels[[1]])[[1]]), # grabs names from first fold; should be the same in all folds,
o.mean = tapply(aos[, 2], fnames, mean),
o.min = tapply(aos[, 2], fnames, min),
o.max = tapply(aos[, 2], fnames, max),
o.flag = tapply(aos[, 2], fnames, function(x) sum(x < flag)),
a.mean = tapply(aos[, 1], fnames, mean),
a.min = tapply(aos[, 1], fnames, min),
a.max = tapply(aos[, 1], fnames, max),
a.flag = tapply(aos[, 1], fnames, function(x) sum(x < flag)),
check.names = FALSE)
## count of folds with a reliabilities below flag threshold
kflag[[n]] <- sum(krels[[n]]$o.flag > 0)
}
krels
resl
rels
kflag
aos
krels <- vector("list", m)
kflag <- vector("integer", m)
for(n in 1:m){
rels <- vector("list", k)
rel.flag <- vector("integer", k)
for(f in 1:k){
rels[[f]] <- t(suppressMessages(semTools::reliability(kfa[[f]][[n]])[c(1,4),]))
if(n == 1){
rel.flag[[f]] <- sum(rels[[f]][[2]] < flag) # flag based on omega, not alpha
} else{
rel.flag[[f]] <- sum(rels[[f]][2,] < flag) # flag based on omega, not alpha
}
}
## mean reliability across folds
aos <- do.call("rbind", rels)
if(n == 1){
fn <- "f1"
fnames <- rep(fn, nrow(aos))
} else{
fn <- dimnames(rels[[1]])[[1]]  # grabs names from first fold; should be the same in all folds
fnames <- dimnames(aos)[[1]] # should be the equivalent of rep(fn, nrow(aos))
}
krels[[n]] <- data.frame(factor = fn,
o.mean = tapply(aos[, 2], fnames, mean),
o.min = tapply(aos[, 2], fnames, min),
o.max = tapply(aos[, 2], fnames, max),
o.flag = tapply(aos[, 2], fnames, function(x) sum(x < flag)),
a.mean = tapply(aos[, 1], fnames, mean),
a.min = tapply(aos[, 1], fnames, min),
a.max = tapply(aos[, 1], fnames, max),
a.flag = tapply(aos[, 1], fnames, function(x) sum(x < flag)),
check.names = FALSE)
## count of folds with a reliabilities below flag threshold
kflag[[n]] <- sum(rel.flag > 0)
}
names(krels) <- names(kfa[[1]])
kflag
krels
