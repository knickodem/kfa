for(n in 2:m){
structures <- vector("list", length = k)
for(f in 1:k){
structures[[f]] <- testefa[[f]][[n]] # organize structures by factor model (rather than by fold)
}
us <- unique(unlist(structures, use.names = FALSE))
slist <- vector("list", length = length(us))
for(u in seq_along(us)){
folds <- which(unlist(lapply(structures, function(x) x == us[[u]])))
slist[[u]] <- list(structure = us[[u]],
folds = which(unlist(lapply(structures, function(x) x == us[[u]]))))
}
kstructures[[n]] <- slist
}
kstructures
k <- length(testefa)
m <- max(unlist(lapply(testefa, length)))
kstructures <- vector("list", length = m)
kstructures[[1]][[1]] <- testefa[[1]][[1]] # currently assumes 1-factor structure exists and is the same over folds
for(n in 2:m){
structures <- vector("list", length = k)
for(f in 1:k){
structures[[f]] <- testefa[[f]][[n]] # organize structures by factor model (rather than by fold)
}
us <- unique(unlist(structures, use.names = FALSE))
slist <- vector("list", length = length(us))
for(u in seq_along(us)){
folds <- which(unlist(lapply(structures, function(x) x == us[[u]])))
slist[[u]] <- list(structure = us[[u]],
folds = which(unlist(lapply(structures, function(x) x == us[[u]]))))
}
kstructures[[n]] <- slist
}
kstructures
class(testefa[[1]][[1]])
match_structure <- function(structures){
us <- unique(unlist(structures, use.names = FALSE))
slist <- vector("list", length = length(us))
for(u in seq_along(us)){
folds <- which(unlist(lapply(structures, function(x) x == us[[u]])))
slist[[u]] <- list(structure = us[[u]],
folds = which(unlist(lapply(structures, function(x) x == us[[u]]))))
}
return(slist)
}
kstructures <- vector("list", length = m)
kstructures[[1]][[1]] <- testefa[[1]][[1]] # currently assumes 1-factor structure exists and is the same over folds
for(n in 2:m){
structures <- vector("list", length = k)
for(f in 1:k){
structures[[f]] <- testefa[[f]][[n]] # organize structures by factor model (rather than by fold)
}
slist <- match_structure(structures)
kstructures[[n]] <- slist
}
kstructures
class(kstudent[1]][[1]])
class(kstudent[[1]][[1]])
roxygen2::roxygenize()
roxygen2::roxygenize()
library(kfa)
###################################
#                                 #
#        kfa package tests        #
#                                 #
###################################
#### Import data ####
shortfile <- c("C:/Users/kylenick/University of North Carolina at Chapel Hill/Halpin, Peter Francis - UNC_stat_projets/EFA&CFA/")
student <- read.csv(paste0(shortfile, "scaledim/student_survey-latest.csv"))
teacher <- read.csv(paste0(shortfile, "scaledim/teacher_survey-latest.csv"))
principal <- read.csv(paste0(shortfile, "scaledim/principal_survey-latest.csv"))
coach <- read.csv(paste0(shortfile, "scaledim/coach_survey-latest.csv"))
## item map
itemmaps <- lapply(c("Coach_survey", "Teacher Survey",
"Principal Survey", "Student Survey"), function(x){
readxl::read_excel(paste0(shortfile, "Item construct map_2020_10_25.xlsx"),
sheet = x)})
names(itemmaps) <- c("coach", "teacher", "principal", "student")
## items for analysis
studentdf <- student[ ,names(student) %in% na.omit(itemmaps$student$`Variable Name`)]
teacherdf <- teacher[ ,names(teacher) %in% na.omit(itemmaps$teacher$`Variable Name`)]
principaldf <- principal[ ,names(principal) %in% na.omit(itemmaps$principal$`Variable Name`)]
coachdf <- coach[ ,names(coach) %in% na.omit(itemmaps$coach$`Variable Name`)]
studentdf2 <- studentdf[!(names(studentdf) %in% c("a1118x", "a1120x", "a1121x"))]
set.seed(936639)
testefa <- kfa(variables = studentdf,
k = NULL,
m = 5,
efa.only = TRUE,
rotation = "oblimin",
ordered = TRUE,
estimator = "DWLS",
missing = "pairwise")
model_structure(testefa)
strux <- model_structure(testefa)
lapply(strux, function(x) ifelse(x$structure == "", length(x$folds), 0))
strux[[1]]
strux[[4]][[1]]
strux[[4]][[2]]
strux[[3]][[2]]
test <- vector("list", length = 5)
for(n in 1:5){
test[[n]] <- lapply(strux, function(x) ifelse(x$structure == "", length(x$folds), 0))
}
test
test <- vector("list", length = 5)
for(n in 1:5){
test[[n]] <- lapply(strux[[n]], function(x) ifelse(x$structure == "", length(x$folds), 0))
}
test
str(test)
length(strux[[1]])
length(strux[[4]])
lapply(strux[[3]], function(x) length(x$folds))
lapply(strux[[4]], function(x) length(x$folds))
max(unlist(lapply(strux[[4]], function(x) length(x$folds))))
temp <- (unlist(lapply(strux[[4]], function(x) length(x$folds))))
temp
which(temp == max(temp))
which(temp == 3
)
temp <-
strux[which(temp == max(temp))]
strux[which(temp == max(temp))]
strux[[which(temp == max(temp))]]
num.folds <- unlist(lapply(strux[[4]], function(x) length(x$folds)))
strux[[which(num.folds == max(num.folds))]]
strux[[which(num.folds == max(num.folds))]]$structure
strux[[4]][[which(num.folds == max(num.folds))]]
test <- vector("list", length = 5)
for(n in 1:5){
if(length(strux[[n]]) == 1){
test[[n]] <- strux[[n]][[1]]$structure
} else {
num.folds <- unlist(lapply(strux[[n]], function(x) length(x$folds)))
test[[n]] <- strux[[n]][[which(num.folds == max(num.folds))]]
}
}
test
test <- vector("list", length = 5)
for(n in 1:5){
if(length(strux[[n]]) == 1){
test[[n]] <- strux[[n]][[1]]$structure
} else {
num.folds <- unlist(lapply(strux[[n]], function(x) length(x$folds)))
test[[n]] <- strux[[n]][[which(num.folds == max(num.folds))]]$structure
}
}
test
strux
testefa[[1]]
all.structures <- model_structure(testefa) # present in appendix
# collect most common structure for each factor model to use in CFAs
cfa.structures <- vector("list", length = 5)
for(n in 1:m){
if(length(all.structures[[n]]) == 1){
cfa.structures[[n]] <- all.structures[[n]][[1]]$structure
} else {
# number of folds each structure was found; keep most common structure
num.folds <- unlist(lapply(all.structures[[n]], function(x) length(x$folds)))
cfa.structures[[n]] <- all.structures[[n]][[which(num.folds == max(num.folds))]]$structure
}
}
m <- max(unlist(lapply(testefa, length)))
# collect most common structure for each factor model to use in CFAs
cfa.structures <- vector("list", length = 5)
for(n in 1:m){
if(length(all.structures[[n]]) == 1){
cfa.structures[[n]] <- all.structures[[n]][[1]]$structure
} else {
# number of folds each structure was found; keep most common structure
num.folds <- unlist(lapply(all.structures[[n]], function(x) length(x$folds)))
cfa.structures[[n]] <- all.structures[[n]][[which(num.folds == max(num.folds))]]$structure
}
}
names(cfa.structures) <- as.character(1:m)
cfa.structures
temp <- deparse(substitute(testefa))
temp
sym(temp)
as.name(temp)
class(testefa)
names(testefa)
roxygen2::roxygenise()
roxygen2::roxygenise()
library(kfa)
names(studentdf)
custom <- paste0("f1 =~ a1118x + a1120x + a1121x\nf2 =~ ",
paste(!(names(studentdf) %in% c("a1118x", "a1120x", "a1121x")), collapse = " + "))
custom
names(studentdf)[-c("a1118x", "a1120x", "a1121x")]
custom <- paste0("f1 =~ a1118x + a1120x + a1121x\nf2 =~ ",
paste(names(studentdf)[-c("a1118x", "a1120x", "a1121x")], collapse = " + "))
custom <- paste0("f1 =~ a1118x + a1120x + a1121x\nf2 =~ ",
paste(names(studentdf)[!names(studentdf) %in% c("a1118x", "a1120x", "a1121x")], collapse = " + "))
custom
## set seed to get the same folds
set.seed(936639)
tictoc::tic()
kstudent <- kfa(variables = studentdf,
k = NULL,
m = 5,
custom.cfas = custom,
rotation = "oblimin",
ordered = TRUE,
estimator = "DWLS",
missing = "pairwise")
tictoc::toc() # ~ 60 seconds
kstructures <- model_structure(kstudent)
class(kstudents[[1]][[1]])
class(kstudent[[1]][[1]])
class(kstudent[[1]][[1]]) == "lavaan"
library(kfa)
kstructures <- model_structure(kstudent)
lavaan::lavInspect(kstudent[[1]][[1]], "est")$lambda
lavaan::lavInspect(kstudent[[1]][[1]], "std")$lambda
lavaan::lavInspect(kstudent[[1]][[2]], "std")$lambda
kstructures <- model_structure(kstudent)
lapply(kfa[[1]], class)
lapply(kstudent[[1]], class)
roxygen2::roxygenise()
library(kfa)
set.seed(936639)
tictoc::tic()
kstudent <- kfa(variables = studentdf,
k = NULL,
m = 5,
custom.cfas = custom,
rotation = "oblimin",
ordered = TRUE,
estimator = "DWLS",
missing = "pairwise")
tictoc::toc() # ~ 60 seconds
set.seed(936639)
tictoc::tic()
kstudent <- kfa(variables = studentdf,
k = NULL,
m = 5,
custom.cfas = custom,
rotation = "oblimin",
ordered = TRUE,
estimator = "DWLS",
missing = "pairwise")
tictoc::toc() # ~ 60 seconds
library(kfa)
kstructures <- model_structure(kstudent)
kstructures
names(kstudent)
names(kstudent[[1]])
?as.name
library(kfa)
?
dslkfa
set.seed(936639)
tictoc::tic()
kstudent <- kfa(variables = studentdf,
k = NULL,
m = 5,
custom.cfas = custom,
rotation = "oblimin",
ordered = TRUE,
estimator = "DWLS",
missing = "pairwise")
tictoc::toc() # ~ 60 seconds
names(kstudent[[1]])
set.seed(936639)
tictoc::tic()
kstudent <- kfa(variables = studentdf,
k = NULL,
m = 5,
custom.cfas = custom,
rotation = "oblimin",
ordered = TRUE,
estimator = "DWLS",
missing = "pairwise")
tictoc::toc() # ~ 60 seconds
library(kfa)
names(kstudent[[1]])
LETTERS[1:3]
model.names <- names(kstudent[[1]])
max.fac <- substring(model.names, 1, 1)
max.fac
model.names[which(length(model.names) == 1)]
which(length(model.names) == 1)
which(nchar(model.names) == 1)
model.names[which(nchar(model.names) == 1)]
max.fac[grepl("[0-9]", max.fac)]
max.fac[grepl("[0-3]", max.fac)]
as.numeric(max.fac[grepl("[0-9]", max.fac)])
max.fac <- max(as.numeric(max.fac[grepl("[0-9]", max.fac)]))
max.fac
k_model_fit(kstudent)
k_model_fit(kstudent, by.fold = FALSE)
paste0(1:5, "-factor")
model.names <- paste0(1:5, "-factor")
as.numeric(substring(model.names, 1,1))
fold.fit <- k_model_fit(kstudent)
fold.fit <- k_model_fit(kstudent)
fold.fit
library(kfa)
set.seed(936639)
tictoc::tic()
kstudent <- kfa(variables = studentdf,
k = NULL,
m = 5,
custom.cfas = custom,
rotation = "oblimin",
ordered = TRUE,
estimator = "DWLS",
missing = "pairwise")
tictoc::toc() # ~ 60 seconds
fold.fit <- k_model_fit(kstudent)
fold.fit
kstructures <- model_structure(kstudent)
kstructures
mfit <- k_model_fit(kstudent, by.fold = FALSE)
mfit
get_appendix(mfit)
kfit
kfit <- k_model_fit(kstudent)
kfit
roxygen2::roxygenise()
library(kfa)
## set seed to get the same folds
set.seed(936639)
tictoc::tic()
kstudent <- kfa(variables = studentdf,
k = NULL,
m = 5,
custom.cfas = custom,
rotation = "oblimin",
ordered = TRUE,
estimator = "DWLS",
missing = "pairwise")
tictoc::toc() # ~ 60 seconds
#### Import data ####
shortfile <- c("C:/Users/kylenick/University of North Carolina at Chapel Hill/Halpin, Peter Francis - UNC_stat_projets/EFA&CFA/")
student <- read.csv(paste0(shortfile, "scaledim/student_survey-latest.csv"))
teacher <- read.csv(paste0(shortfile, "scaledim/teacher_survey-latest.csv"))
principal <- read.csv(paste0(shortfile, "scaledim/principal_survey-latest.csv"))
coach <- read.csv(paste0(shortfile, "scaledim/coach_survey-latest.csv"))
## item map
itemmaps <- lapply(c("Coach_survey", "Teacher Survey",
"Principal Survey", "Student Survey"), function(x){
readxl::read_excel(paste0(shortfile, "Item construct map_2020_10_25.xlsx"),
sheet = x)})
names(itemmaps) <- c("coach", "teacher", "principal", "student")
## items for analysis
studentdf <- student[ ,names(student) %in% na.omit(itemmaps$student$`Variable Name`)]
teacherdf <- teacher[ ,names(teacher) %in% na.omit(itemmaps$teacher$`Variable Name`)]
principaldf <- principal[ ,names(principal) %in% na.omit(itemmaps$principal$`Variable Name`)]
coachdf <- coach[ ,names(coach) %in% na.omit(itemmaps$coach$`Variable Name`)]
studentdf2 <- studentdf[!(names(studentdf) %in% c("a1118x", "a1120x", "a1121x"))]
# ---- test full kfold_fa function ----------------
custom <- paste0("f1 =~ a1118x + a1120x + a1121x\nf2 =~ ",
paste(names(studentdf)[!names(studentdf) %in% c("a1118x", "a1120x", "a1121x")], collapse = " + "))
## set seed to get the same folds
set.seed(936639)
tictoc::tic()
kstudent <- kfa(variables = studentdf,
k = NULL,
m = 5,
custom.cfas = custom,
rotation = "oblimin",
ordered = TRUE,
estimator = "DWLS",
missing = "pairwise")
tictoc::toc() # ~ 60 seconds
set.seed(936639)
testefa <- kfa(variables = studentdf,
k = NULL,
m = 5,
efa.only = TRUE,
rotation = "oblimin",
ordered = TRUE,
estimator = "DWLS",
missing = "pairwise")
testefa
efa.structures <- model_structure(testefa, which = "efa") # present in appendix
efa.structures
library(kfa)
## custom factor structure (just an example, not based on theory)
custom <- paste0("f1 =~ a1118x + a1120x + a1121x\nf2 =~ ",
paste(names(studentdf)[!names(studentdf) %in% c("a1118x", "a1120x", "a1121x")], collapse = " + "))
set.seed(936639)
tictoc::tic()
kstudent <- kfa(variables = studentdf,
k = NULL,
m = 5,
custom.cfas = custom,
rotation = "oblimin",
ordered = TRUE,
estimator = "DWLS",
missing = "pairwise")
tictoc::toc() # ~ 60 seconds
kstructures <- model_structure(kstudent)
kstructures <- model_structure(kstudent, which = "cfa")
kstructures
kfit <- k_model_fit(kstudent)
kfit
mfit <- k_model_fit(kstudent, by.fold = FALSE)
mfit
get_appendix(mfit)
agg_loadings(kstudent)
kstudent$efa.structures
names(kfa[[1]])
names(kfa$cfas[[1]])
names(kstudent$cfas[[1]])
agg_fac_cor(kstudent)
agg_reliability(kstudent)
agg_model_fit(kfit)
best_model(kfit)
strux <- model_structure(kstudent, which = "efa")
kstudent$efa.structures
kstructures
kstudent$efa.structures
length(kstudent$efa.structures)
for(n in 1:length(kstudent$efa.structures)){
for(s in seq_along(kstructures[[n]])){
cat("**Factor Structure Option", s, "**")
cat("\n\n")
cat("**In Folds:", paste(kstructures[[n]][[s]]$folds, collapse = ", "), "**")
cat("\n\n")
cat(gsub("\n", "\n\n", kstructures[[n]][[s]]$structure))
cat("\n\n")
}
}
strux <- kstudent$efa.structures
strux <- kstudent$efa.structures
for(n in 1:length(strux)){
for(s in seq_along(strux[[n]])){
cat("**Factor Structure Option", s, "**")
cat("\n\n")
cat("**In Folds:", paste(strux[[n]][[s]]$folds, collapse = ", "), "**")
cat("\n\n")
cat(gsub("\n", "\n\n", strux[[n]][[s]]$structure))
cat("\n\n")
}
}
roxygen2::roxygenise()
library(kfa)
set.seed(936639)
tictoc::tic()
kstudent <- kfa(variables = studentdf,
k = NULL,
m = 5,
custom.cfas = custom,
rotation = "oblimin",
ordered = TRUE,
estimator = "DWLS",
missing = "pairwise")
tictoc::toc() # ~ 60 seconds
# Run report
kfa_report(kstudent, file.name = "kfa_students",
report.format = "word_document",
report.title = "K-fold Factor Analysis - Lebenon Students")
library(kfa)
# Run report
kfa_report(kstudent, file.name = "kfa_students",
report.format = "word_document",
report.title = "K-fold Factor Analysis - Lebenon Students")
# Run report
kfa_report(kstudent, file.name = "kfa_students",
report.format = "html_document",
report.title = "K-fold Factor Analysis - Lebenon Students")
# Run report
kfa_report(kstudent, file.name = "kfa_students",
report.format = "html_document",
report.title = "K-fold Factor Analysis - Lebenon Students")
library(kfa)
# Run report
kfa_report(kstudent, file.name = "kfa_students",
report.format = "html_document",
report.title = "K-fold Factor Analysis - Lebenon Students")
system.file("rmd", "kfa-report.Rmd", package = "kfa")
temp <- "i"
"i"
""i""
library(kfa)
# Run report
kfa_report(kstudent, file.name = "kfa_students",
report.format = "html_document",
report.title = "K-fold Factor Analysis - Lebenon Students")
library(kfa)
# Run report
kfa_report(kstudent, file.name = "kfa_students",
report.format = "html_document",
report.title = "K-fold Factor Analysis - Lebenon Students")
names(student)
names(studentdf)
## custom factor structure (just an example, not based on theory)
custom <- paste0("f1 =~ ", paste(names(studentdf)[1:10], collapse = " + "),
"\nf2 =~ ",paste(names(studentdf)[11:21], collapse = " + "))
set.seed(936639)
tictoc::tic()
kstudent <- kfa(variables = studentdf,
k = NULL,
m = 5,
custom.cfas = custom,
rotation = "oblimin",
ordered = TRUE,
estimator = "DWLS",
missing = "pairwise")
tictoc::toc() # ~ 60 seconds
# Run report
kfa_report(kstudent, file.name = "kfa_students",
report.format = "html_document",
report.title = "K-fold Factor Analysis - Lebenon Students")
# Run report
kfa_report(kstudent, file.name = "kfa_students",
report.format = "word_document",
report.title = "K-fold Factor Analysis - Lebenon Students")
