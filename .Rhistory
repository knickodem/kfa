rels[[f]] <- t(suppressMessages(semTools::reliability(kfa[[f]][[n]])[c(1,4),]))
frnames <- dimnames(rels[[f]])
}
frnames
aos <- do.call("rbind", rels)
aos
frnames[[1]]
aos[[2]]
aos[, 2]
dimaos <- dimnames(aos)
dimaos
n <- 1
krels <- vector("list", m)
rels <- vector("list", k)
for(f in 1:k){
rels[[f]] <- t(suppressMessages(semTools::reliability(kfa[[f]][[n]])[c(1,4),]))
}
rels
## mean reliability across folds
aos <- do.call("rbind", rels)
aos
nrows(aos)
nrow(aos)
rm(n, f)
rm(aos)
rm(rels)
rm(dimaos, frnames, krels)
kfa <- kstudent$cfas
k <- length(kfa)
m <- max(unlist(lapply(kfa, length)))
krels <- vector("list", m)
kflag <- vector("integer", m)
for(n in 1:m){
rels <- vector("list", k)
for(f in 1:k){
rels[[f]] <- t(suppressMessages(semTools::reliability(kfa[[f]][[n]])[c(1,4),]))
}
## mean reliability across folds
aos <- do.call("rbind", rels)
if(n == 1){
fnames <- rep("f1", nrow(aos))
} else{
fnames <- dimnames(aos)[[1]]
}
krels[[n]] <- data.frame(factor = ifelse(n == 1, "f1", dimnames(rels[[1]])[[1]]), # grabs names from first fold; should be the same in all folds,
o.mean = tapply(aos[, 2], fnames, mean),
o.min = tapply(aos[, 2], fnames, min),
o.max = tapply(aos[, 2], fnames, max),
o.flag = tapply(aos[, 2], fnames, function(x) sum(x < flag)),
a.mean = tapply(aos[, 1], fnames, mean),
a.min = tapply(aos[, 1], fnames, min),
a.max = tapply(aos[, 1], fnames, max),
a.flag = tapply(aos[, 1], fnames, function(x) sum(x < flag)),
check.names = FALSE)
## count of folds with a reliabilities below flag threshold
kflag[[n]] <- sum(krels[[n]]$o.flag > 0)
}
krels
resl
rels
kflag
aos
krels <- vector("list", m)
kflag <- vector("integer", m)
for(n in 1:m){
rels <- vector("list", k)
rel.flag <- vector("integer", k)
for(f in 1:k){
rels[[f]] <- t(suppressMessages(semTools::reliability(kfa[[f]][[n]])[c(1,4),]))
if(n == 1){
rel.flag[[f]] <- sum(rels[[f]][[2]] < flag) # flag based on omega, not alpha
} else{
rel.flag[[f]] <- sum(rels[[f]][2,] < flag) # flag based on omega, not alpha
}
}
## mean reliability across folds
aos <- do.call("rbind", rels)
if(n == 1){
fn <- "f1"
fnames <- rep(fn, nrow(aos))
} else{
fn <- dimnames(rels[[1]])[[1]]  # grabs names from first fold; should be the same in all folds
fnames <- dimnames(aos)[[1]] # should be the equivalent of rep(fn, nrow(aos))
}
krels[[n]] <- data.frame(factor = fn,
o.mean = tapply(aos[, 2], fnames, mean),
o.min = tapply(aos[, 2], fnames, min),
o.max = tapply(aos[, 2], fnames, max),
o.flag = tapply(aos[, 2], fnames, function(x) sum(x < flag)),
a.mean = tapply(aos[, 1], fnames, mean),
a.min = tapply(aos[, 1], fnames, min),
a.max = tapply(aos[, 1], fnames, max),
a.flag = tapply(aos[, 1], fnames, function(x) sum(x < flag)),
check.names = FALSE)
## count of folds with a reliabilities below flag threshold
kflag[[n]] <- sum(rel.flag > 0)
}
names(krels) <- names(kfa[[1]])
kflag
krels
#### Import data ####
shortfile <- c("C:/Users/kylenick/University of North Carolina at Chapel Hill/Halpin, Peter Francis - UNC_stat_projets/EFA&CFA/")
student <- read.csv(paste0(shortfile, "scaledim/student_survey-latest.csv"))
teacher <- read.csv(paste0(shortfile, "scaledim/teacher_survey-latest.csv"))
principal <- read.csv(paste0(shortfile, "scaledim/principal_survey-latest.csv"))
coach <- read.csv(paste0(shortfile, "scaledim/coach_survey-latest.csv"))
## item map
itemmaps <- lapply(c("Coach_survey", "Teacher Survey",
"Principal Survey", "Student Survey"), function(x){
readxl::read_excel(paste0(shortfile, "Item construct map_2020_10_25.xlsx"),
sheet = x)})
names(itemmaps) <- c("coach", "teacher", "principal", "student")
## items for analysis
studentdf <- student[ ,names(student) %in% na.omit(itemmaps$student$`Variable Name`)]
teacherdf <- teacher[ ,names(teacher) %in% na.omit(itemmaps$teacher$`Variable Name`)]
principaldf <- principal[ ,names(principal) %in% na.omit(itemmaps$principal$`Variable Name`)]
coachdf <- coach[ ,names(coach) %in% na.omit(itemmaps$coach$`Variable Name`)]
## custom factor structure (just an example, not based on theory)
custom2 <- paste0("f1 =~ ", paste(names(studentdf)[1:10], collapse = " + "),
"\nf2 =~ ",paste(names(studentdf)[11:21], collapse = " + "))
custom3 <- paste0("f1 =~ ", paste(names(studentdf)[1:2], collapse = " + "),
"\nf2 =~ ",paste(names(studentdf)[3:4], collapse = " + "),
"\nf3 =~ ",paste(names(studentdf)[5:6], collapse = " + "),
"\nf4 =~ ",paste(names(studentdf)[7:8], collapse = " + "),
"\nf5 =~ ",paste(names(studentdf)[9:10], collapse = " + "),
"\nf6 =~ ",paste(names(studentdf)[11:12], collapse = " + "),
"\nf7 =~ ",paste(names(studentdf)[13:21], collapse = " + "),
"\na1101x ~~ ", paste(names(studentdf)[2:21], collapse = " + "),
"\na1102x ~~ ", paste(names(studentdf)[3:21], collapse = " + "))
library(kfa)
set.seed(936639)
tictoc::tic()
kstudent <- kfa(variables = studentdf,
k = NULL,
m = 5,
custom.cfas = list(`Custom 2f` = custom2, Break = custom3),
rotation = "oblimin",
ordered = TRUE,
estimator = "DWLS",
missing = "pairwise")
tictoc::toc() # ~ 60 seconds
tictoc::tic()
rl <- agg_rels(kstudent)
tictoc::toc() #74.9
rl
n <- 4
kfa <- kstudent$cfas
k <- length(kfa)
m <- max(unlist(lapply(kfa, length)))
krels <- vector("list", m)
kflag <- vector("integer", m)
rels <- vector("list", k)
rel.flag <- vector("integer", k)
for(f in 1:k){
rels[[f]] <- t(suppressMessages(semTools::reliability(kfa[[f]][[n]])[c(1,4),]))
if(n == 1){
rel.flag[[f]] <- sum(rels[[f]][[2]] < flag) # flag based on omega, not alpha
} else{
rel.flag[[f]] <- sum(rels[[f]][2,] < flag) # flag based on omega, not alpha
}
}
flag <- .6
rels <- vector("list", k)
rel.flag <- vector("integer", k)
for(f in 1:k){
rels[[f]] <- t(suppressMessages(semTools::reliability(kfa[[f]][[n]])[c(1,4),]))
if(n == 1){
rel.flag[[f]] <- sum(rels[[f]][[2]] < flag) # flag based on omega, not alpha
} else{
rel.flag[[f]] <- sum(rels[[f]][2,] < flag) # flag based on omega, not alpha
}
}
rel.flag
rels
c(1,2)
t(c(1,2))
t(c(1,2))[[2]]
c(1,2)[[2]]
t(c(1,2))[,2]
library(kfa)
tictoc::tic()
rl <- agg_rels(kstudent)
tictoc::toc() #74
rl
kfa <- kstudent$cfas
k <- length(kfa)
m <- max(unlist(lapply(kfa, length)))
kcorrs <- vector("list", m)
kflag <- vector("integer", m)
# Currently assumes the first element is a 1 factor model; need a more robust check
kcorrs[[1]] <- NULL
kflag[[1]] <- NA
n <- 4
cor.lv <- vector("list", k) # latent variable correlation matrix
cor.flag <- vector("integer", k) # count of correlations above flag threshold
for(f in 1:k){
cor.lv[[f]] <- lavaan::lavInspect(kfa[[f]][[n]], "cor.lv")
cor.flag[[f]] <- sum(cor.lv[[f]] > flag) - nrow(cor.lv[[f]])
}
cor.lv
cor.lv[[f]] > flag
f
flag <- .90
cor.lv[[f]] > flag
flag <- .80
cor.lv[[f]] > flag
rowSums(cor.lv[[f]] > flag)
rowSums(cor.lv[[f]] > flag) - 1
lavaan::lavInspect(kfa[[f]][[1]], "cor.lv")
str(lavaan::lavInspect(kfa[[f]][[1]], "cor.lv"))
str(lavaan::lavInspect(kfa[[f]][[1]], "psi"))
length(dimnames(lavaan::lavInspect(kfa[[f]][[1]], "cor.lv"))[[1]])
cor.lv <- vector("list", k) # latent variable correlation matrix
cor.flag <- vector("integer", k) # count of correlations above flag threshold
cflag <- vector("integer", k)
for(f in 1:k){
cor.lv[[f]] <- lavaan::lavInspect(kfa[[f]][[n]], "cor.lv")
cor.flag[[f]] <- sum(cor.lv[[f]] > flag) - nrow(cor.lv[[f]])
cflag[[f]] <- rowSums(cor.lv[[f]] > flag) - 1
}
cflag <- vector("list", k)
cor.lv <- vector("list", k) # latent variable correlation matrix
cor.flag <- vector("integer", k) # count of correlations above flag threshold
cflag <- vector("list", k)
for(f in 1:k){
cor.lv[[f]] <- lavaan::lavInspect(kfa[[f]][[n]], "cor.lv")
cor.flag[[f]] <- sum(cor.lv[[f]] > flag) - nrow(cor.lv[[f]])
cflag[[f]] <- rowSums(cor.lv[[f]] > flag) - 1
}
cor.lv
cor.flag
cflag
unlist(cflag)
unlist(sum(cflag))
unlist(lapply(cflag, sum))
sum(unlist(lapply(cflag, sum)) > 0)
temp <- unlist(cflag)
str(temp)
tapply(temp, names(temp), function(x) sum(x < flag))
tapply(temp, names(temp), function(x) sum(x > flag))
library(kfa)
tictoc::tic()
cr <- agg_cors(kstudent)
tictoc::toc() #.01
cr
library(kfa)
tictoc::tic()
cr <- agg_cors(kstudent)
tictoc::toc()
cr
rl <- agg_rels(kstudent)
model_flags(kstudent, cr, rl, ld)
rl[[1]]
rl
rl$reliabilities[[1]]
rel.map <- data.frame(col_keys = names(krels$reliabilities[[1]]),
top = c("factor", rep(c("omega_h", "alpha"), each = 4)),
bottom = c("factor", rep(c("mean", "min", "max", "flag"), times = 2)))
rel.map <- data.frame(col_keys = names(rl$reliabilities[[1]]),
top = c("factor", rep(c("omega_h", "alpha"), each = 4)),
bottom = c("factor", rep(c("mean", "min", "max", "flag"), times = 2)))
rel.map
class(rl$reliabilities[[1]])
library(kfa)
# Run report
kfa_report(kstudent, file.name = "kfa_students_custom",
report.format = "html_document",
report.title = "K-fold Factor Analysis - Lebenon Students")
model_flags(kstudent, cr, rl, ld)
ld <- agg_loadings(kstudent)
cr <- agg_cors(kstudent)
rl <- agg_rels(kstudent)
model_flags(kstudent, cr, rl, ld)
library(kfa)
model_flags(kstudent, cr, rl, ld)
library(kfa)
model_flags(kstudent, cr, rl, ld)
# Multiple structures from EFA
s <- length(kstudent$efa.structures)
common.strux <- vector("integer", s)
kfa <- kstudent
# Multiple structures from EFA
s <- length(kfa$efa.structures)
common.strux <- vector("integer", s)
for(n in 1:s){
common.strux[[n]] <- max(unlist(lapply(kfa$efa.structures[[n]], function(x) length(x$folds))))
}
multistrux <- data.frame(model = names(kfa$efa.structures),
`common structure` = common.strux,
check.names = FALSE)
multistrux
# flags from CFA models
cfas <- kfa$cfas
k <- length(cfas)
m <- max(unlist(lapply(cfas, length)))
## Flagging non-convergence and non-positive definite matrix warnings
cnvgd <- vector("list", k)
hey <- vector("list", k)
for(f in 1:k){
## convergence status of each model
cnvgd[[f]] <- lapply(cfas[[f]], lavaan::lavInspect, "converged")
## presence of non-positive definite matrix (and heywood cases) in each model
hey[[f]] <- lapply(cfas[[f]], lavaan::lavInspect, "post.check")
}
hey
cnvgd
n <- 1
sum(unlist(lapply(cnvgd, '[[', n)) == FALSE | unlist(lapply(hey, '[[', n)) == FALSE)
rm(n)
improper <- vector("integer", length = m)
for(n in 1:m){
# flagged if either indicates an improper solution
improper[[n]] <- sum(unlist(lapply(cnvgd, '[[', n)) == FALSE | unlist(lapply(hey, '[[', n)) == FALSE)
}
improper
## joining flags into data.frame
flags <- data.frame(model = names(cfas[[1]]),  # assumes first fold contains all models in the same order as other folds
`improper solution` = improper,
`heywood item` = loads$heywood,
`low loading` = loads$flag,
`high factor correlation` = cors$model.flag,
`low scale reliability` = rels$flag,
check.names = FALSE)
## joining flags into data.frame
flags <- data.frame(model = names(cfas[[1]]),  # assumes first fold contains all models in the same order as other folds
`improper solution` = improper,
`heywood item` = ld$heywood,
`low loading` = ld$flag,
`high factor correlation` = cr$model.flag,
`low scale reliability` = rl$flag,
check.names = FALSE)
names(cfas[[1]])
improper
## joining flags into data.frame
flags <- data.frame(model = names(cfas[[1]]),  # assumes first fold contains all models in the same order as other folds
# `improper solution` = improper,
`heywood item` = ld$heywood,
`low loading` = ld$flag,
`high factor correlation` = cr$model.flag,
`low scale reliability` = rl$flag,
check.names = FALSE)
## joining flags into data.frame
flags <- data.frame(#model = names(cfas[[1]]),  # assumes first fold contains all models in the same order as other folds
`improper solution` = improper,
`heywood item` = ld$heywood,
`low loading` = ld$flag,
`high factor correlation` = cr$model.flag,
`low scale reliability` = rl$flag,
check.names = FALSE)
?data.frame
data.frame(model = names(cfas[[1]]),
improper = improper)
data.frame(model = names(cfas[[1]]),
`improper solution` = improper)
data.frame(model = names(cfas[[1]]),
`improper solution` = improper,
check.names = FALSE)
data.frame(model = names(cfas[[1]]),
`improper solution` = improper,
`heywood item` = ld$heywood,
check.names = FALSE)
## joining flags into data.frame
flags <- data.frame(#model = names(cfas[[1]]),  # assumes first fold contains all models in the same order as other folds
`improper solution` = improper,
`heywood item` = ld$heywood,
`low loading` = ld$flag,
`high factor correlation` = cr$flag,
`low scale reliability` = rl$flag,
check.names = FALSE)
library(kfa)
model_flags(kstudent, cr, rl, ld)
# Run report
kfa_report(kstudent, file.name = "kfa_students_custom",
report.format = "html_document",
report.title = "K-fold Factor Analysis - Lebenon Students")
roxygen2::roxygenize
roxygen2::roxygenize()
roxygen2::roxygenize()
library(kfa)
###################################
#                                 #
#        kfa package tests        #
#                                 #
###################################
#### Import data ####
shortfile <- c("C:/Users/kylenick/University of North Carolina at Chapel Hill/Halpin, Peter Francis - UNC_stat_projets/EFA&CFA/")
student <- read.csv(paste0(shortfile, "scaledim/student_survey-latest.csv"))
teacher <- read.csv(paste0(shortfile, "scaledim/teacher_survey-latest.csv"))
principal <- read.csv(paste0(shortfile, "scaledim/principal_survey-latest.csv"))
coach <- read.csv(paste0(shortfile, "scaledim/coach_survey-latest.csv"))
## item map
itemmaps <- lapply(c("Coach_survey", "Teacher Survey",
"Principal Survey", "Student Survey"), function(x){
readxl::read_excel(paste0(shortfile, "Item construct map_2020_10_25.xlsx"),
sheet = x)})
names(itemmaps) <- c("coach", "teacher", "principal", "student")
## items for analysis
studentdf <- student[ ,names(student) %in% na.omit(itemmaps$student$`Variable Name`)]
teacherdf <- teacher[ ,names(teacher) %in% na.omit(itemmaps$teacher$`Variable Name`)]
principaldf <- principal[ ,names(principal) %in% na.omit(itemmaps$principal$`Variable Name`)]
coachdf <- coach[ ,names(coach) %in% na.omit(itemmaps$coach$`Variable Name`)]
# ---- test full kfold_fa function ----------------
## custom factor structure (just an example, not based on theory)
custom2 <- paste0("f1 =~ ", paste(names(studentdf)[1:10], collapse = " + "),
"\nf2 =~ ",paste(names(studentdf)[11:21], collapse = " + "))
custom3 <- paste0("f1 =~ ", paste(names(studentdf)[1:2], collapse = " + "),
"\nf2 =~ ",paste(names(studentdf)[3:4], collapse = " + "),
"\nf3 =~ ",paste(names(studentdf)[5:6], collapse = " + "),
"\nf4 =~ ",paste(names(studentdf)[7:8], collapse = " + "),
"\nf5 =~ ",paste(names(studentdf)[9:10], collapse = " + "),
"\nf6 =~ ",paste(names(studentdf)[11:12], collapse = " + "),
"\nf7 =~ ",paste(names(studentdf)[13:21], collapse = " + "),
"\na1101x ~~ ", paste(names(studentdf)[2:21], collapse = " + "),
"\na1102x ~~ ", paste(names(studentdf)[3:21], collapse = " + "))
# When custom model does not contain all items, the following error is currently produced:
# Error in { : task 1 failed - "invalid 'times' argument"
## set seed to get the same folds
set.seed(936639)
tictoc::tic()
kstudent <- kfa(variables = studentdf,
k = NULL,
m = 5,
custom.cfas = list(`Custom 2f` = custom2, Break = custom3),
rotation = "oblimin",
ordered = TRUE,
estimator = "DWLS",
missing = "pairwise")
tictoc::toc() # ~ 60 seconds
# Run report
kfa_report(kstudent, file.name = "kfa_students_custom",
report.format = "html_document",
report.title = "K-fold Factor Analysis - Lebenon Students")
tictoc::tic()
rl <- agg_rels(kstudent)
tictoc::toc()
tictoc::tic()
ld <- agg_loadings(kstudent)
tictoc::toc() #.16
tictoc::tic()
cr <- agg_cors(kstudent)
tictoc::toc() #.
tictoc::tic()
model_flags(kstudent, cr, rl, ld)
tictoc::toc() #.11
library(kfa)
# Run report
kfa_report(kstudent, file.name = "kfa_students_custom",
report.format = "html_document",
report.title = "K-fold Factor Analysis - Lebenon Students")
roxygen2::roxygenise()
library(kfa)
# Run report
kfa_report(kstudent, file.name = "kfa_students_custom",
report.format = "html_document",
report.title = "K-fold Factor Analysis - Lebenon Students")
# Run report
kfa_report(kstudent, file.name = "kfa_students_custom",
report.format = "word_document",
report.title = "K-fold Factor Analysis - Lebenon Students")
roxygen2::roxygenise()
roxygen2::roxygenise()
library(kfa)
###################################
#                                 #
#        kfa package tests        #
#                                 #
###################################
#### Import data ####
shortfile <- c("C:/Users/kylenick/University of North Carolina at Chapel Hill/Halpin, Peter Francis - UNC_stat_projets/EFA&CFA/")
student <- read.csv(paste0(shortfile, "scaledim/student_survey-latest.csv"))
teacher <- read.csv(paste0(shortfile, "scaledim/teacher_survey-latest.csv"))
principal <- read.csv(paste0(shortfile, "scaledim/principal_survey-latest.csv"))
coach <- read.csv(paste0(shortfile, "scaledim/coach_survey-latest.csv"))
## item map
itemmaps <- lapply(c("Coach_survey", "Teacher Survey",
"Principal Survey", "Student Survey"), function(x){
readxl::read_excel(paste0(shortfile, "Item construct map_2020_10_25.xlsx"),
sheet = x)})
names(itemmaps) <- c("coach", "teacher", "principal", "student")
## items for analysis
studentdf <- student[ ,names(student) %in% na.omit(itemmaps$student$`Variable Name`)]
teacherdf <- teacher[ ,names(teacher) %in% na.omit(itemmaps$teacher$`Variable Name`)]
principaldf <- principal[ ,names(principal) %in% na.omit(itemmaps$principal$`Variable Name`)]
coachdf <- coach[ ,names(coach) %in% na.omit(itemmaps$coach$`Variable Name`)]
# ---- test full kfold_fa function ----------------
## custom factor structure (just an example, not based on theory)
custom2 <- paste0("f1 =~ ", paste(names(studentdf)[1:10], collapse = " + "),
"\nf2 =~ ",paste(names(studentdf)[11:21], collapse = " + "))
custom3 <- paste0("f1 =~ ", paste(names(studentdf)[1:2], collapse = " + "),
"\nf2 =~ ",paste(names(studentdf)[3:4], collapse = " + "),
"\nf3 =~ ",paste(names(studentdf)[5:6], collapse = " + "),
"\nf4 =~ ",paste(names(studentdf)[7:8], collapse = " + "),
"\nf5 =~ ",paste(names(studentdf)[9:10], collapse = " + "),
"\nf6 =~ ",paste(names(studentdf)[11:12], collapse = " + "),
"\nf7 =~ ",paste(names(studentdf)[13:21], collapse = " + "),
"\na1101x ~~ ", paste(names(studentdf)[2:21], collapse = " + "),
"\na1102x ~~ ", paste(names(studentdf)[3:21], collapse = " + "))
# When custom model does not contain all items, the following error is currently produced:
# Error in { : task 1 failed - "invalid 'times' argument"
## set seed to get the same folds
set.seed(936639)
tictoc::tic()
kstudent <- kfa(variables = studentdf,
k = NULL,
m = 5,
custom.cfas = list(`Custom 2f` = custom2, Break = custom3),
rotation = "oblimin",
ordered = TRUE,
estimator = "DWLS",
missing = "pairwise")
tictoc::toc() # ~ 60 seconds
roxygen2::roxygenise()
