fit <- merge(x = fit, y = agg, by = c("factors", "df"), all.x = TRUE)
}
agg
fit <- data.frame(factors = 1:maxfac,
df = tapply(bdf[["df"]], bdf$factors, mean))
for(i in index){
agg <- data.frame(factors = 1:maxfac,
mean = tapply(bdf[[i]], bdf$factors, mean),
range = paste(round(tapply(bdf[[i]], bdf$factors, min), digits = digits), "-",
round(tapply(bdf[[i]], bdf$factors, max), digits = digits)))
# hist = tapply(bdf[[index]], bdf$factors, function(x) skimr::skim(x)[["numeric.hist"]])
names(agg) <- c("factors", "df", paste(c("mean", "range"), i, sep = "."))
# joining into single table
fit <- merge(x = fit, y = agg, by = c("factors", "df"), all.x = TRUE)
}
fit <- data.frame(factors = 1:maxfac,
df = tapply(bdf[["df"]], bdf$factors, mean))
for(i in index){
agg <- data.frame(factors = 1:maxfac,
mean = tapply(bdf[[i]], bdf$factors, mean),
range = paste(round(tapply(bdf[[i]], bdf$factors, min), digits = digits), "-",
round(tapply(bdf[[i]], bdf$factors, max), digits = digits)))
# hist = tapply(bdf[[index]], bdf$factors, function(x) skimr::skim(x)[["numeric.hist"]])
names(agg) <- c("factors", "df", paste(c("mean", "range"), i, sep = "."))
# joining into single table
fit <- merge(x = fit, y = agg, by = "factors", all.x = TRUE)
}
fit <- data.frame(factors = 1:maxfac,
df = tapply(bdf[["df"]], bdf$factors, mean))
for(i in index){
agg <- data.frame(factors = 1:maxfac,
mean = tapply(bdf[[i]], bdf$factors, mean),
range = paste(round(tapply(bdf[[i]], bdf$factors, min), digits = digits), "-",
round(tapply(bdf[[i]], bdf$factors, max), digits = digits)))
# hist = tapply(bdf[[index]], bdf$factors, function(x) skimr::skim(x)[["numeric.hist"]])
names(agg) <- c("factors", paste(c("mean", "range"), i, sep = "."))
# joining into single table
fit <- merge(x = fit, y = agg, by = "factors", all.x = TRUE)
}
fit
format()
?format
fit <- data.frame(factors = 1:maxfac,
df = tapply(bdf[["df"]], bdf$factors, mean))
for(i in index){
agg <- data.frame(factors = 1:maxfac,
mean = tapply(bdf[[i]], bdf$factors, mean),
range = paste(format(round(tapply(bdf[[i]], bdf$factors, min), digits = digits), nsmall = digits), "-",
format(round(tapply(bdf[[i]], bdf$factors, max), digits = digits), nsmall = digits)))
# hist = tapply(bdf[[index]], bdf$factors, function(x) skimr::skim(x)[["numeric.hist"]])
names(agg) <- c("factors", paste(c("mean", "range"), i, sep = "."))
# joining into single table
fit <- merge(x = fit, y = agg, by = "factors", all.x = TRUE)
}
fit
library(kfa)
rmsea <- agg_model_fit(kfits)
rmsea
fit.table <- agg_model_fit(kfits, index = c("cfi", "rmsea"))
fit.table
index = c("cfi", "rmsea")
?flextable::set_header_df
fit.map <- data.frame(col_keys = names(fit.table),
top = c("factors", "df", rep(index, each = 2)),
bottom = c("factors", rep(c("mean", "range"), times = length(index))))
fit.map <- data.frame(col_keys = names(fit.table),
top = c("factors", "df", rep(index, each = 2)),
bottom = c("factors", "df", rep(c("mean", "range"), times = length(index))))
fit.map
fit.flex <- flextable::flextable(fit.table)
fit.flex <- flextable::colformat_double(fit.flex, j = -1, digits = 2)
fit.flex <- flextable::set_header_df(fit.flex, mapping = fit.map)
fit.flex <- flextable::merge_h(fit.flex, part = "header")
fit.flex <- flextable::merge_v(fit.flex, j = c("factors", "df"), part = "header")
fit.flex <- flextable::theme_vanilla(fit.flex)
fit.flex <- flextable::fix_border_issues(fit.flex)
fit.flex <- flextable::align(fit.flex, align = "center", part = "all")
# fit.flex <- flextable::set_header_labels(fit.flex, best_in_fold = "best in fold")
fit.flex <- flextable::autofit(fit.flex)
fit.flex
fit.flex <- flextable::flextable(fit.table)
fit.flex <- flextable::colformat_double(fit.flex, j = -c(1,2), digits = 2)
fit.flex <- flextable::set_header_df(fit.flex, mapping = fit.map)
fit.flex <- flextable::merge_h(fit.flex, part = "header")
fit.flex <- flextable::merge_v(fit.flex, j = c("factors", "df"), part = "header")
fit.flex <- flextable::theme_vanilla(fit.flex)
fit.flex <- flextable::fix_border_issues(fit.flex)
fit.flex <- flextable::align(fit.flex, align = "center", part = "all")
# fit.flex <- flextable::set_header_labels(fit.flex, best_in_fold = "best in fold")
fit.flex <- flextable::autofit(fit.flex)
fit.flex
fit.flex <- flextable::flextable(fit.table)
fit.flex <- flextable::colformat_double(fit.flex, j = -c(1,2), digits = 2)
fit.flex <- flextable::set_header_df(fit.flex, mapping = fit.map)
fit.flex <- flextable::merge_h(fit.flex, part = "header")
fit.flex <- flextable::merge_v(fit.flex, j = c("factors", "df"), part = "header")
fit.flex <- flextable::fix_border_issues(fit.flex)
fit.flex <- flextable::align(fit.flex, align = "center", part = "all")
# fit.flex <- flextable::set_header_labels(fit.flex, best_in_fold = "best in fold")
fit.flex <- flextable::autofit(fit.flex)
fit.flex
fit.flex <- flextable::theme_vanilla(fit.flex)
fit.flex
fit.flex <- flextable::align(fit.flex, align = "center", part = "all")
fit.flex
fit.flex <- flextable::flextable(fit.table)
fit.flex <- flextable::colformat_double(fit.flex, j = -c(1,2), digits = 2)
fit.flex <- flextable::set_header_df(fit.flex, mapping = fit.map)
fit.flex <- flextable::merge_h(fit.flex, part = "header")
fit.flex <- flextable::merge_v(fit.flex, j = c("factors", "df"), part = "header")
fit.flex <- flextable::border_inner_h(fit.flex, border = flextable::fp_border(), part = "header")
fit.flex <- flextable::border_inner_h(fit.flex, border = fp_border(), part = "header")
boarder <- flextable::fp_border()
boarder <- flextable::fp_border()
border <- officer::fp_border()
fit.flex <- flextable::border_inner_h(fit.flex, border = border, part = "header")
fit.flex
fit.flex <- flextable::hline_top(fit.flex, border = border, part = "header")
fit.flex
fit.flex <- flextable::hline_top(fit.flex, border = border, part = "body")
fit.flex
border <- officer::fp_border(width = 2)
fit.flex <- flextable::flextable(fit.table)
fit.flex <- flextable::colformat_double(fit.flex, j = -c(1,2), digits = 2)
fit.flex <- flextable::set_header_df(fit.flex, mapping = fit.map)
fit.flex <- flextable::merge_h(fit.flex, part = "header")
fit.flex <- flextable::merge_v(fit.flex, j = c("factors", "df"), part = "header")
fit.flex <- flextable::fix_border_issues(fit.flex)
fit.flex <- flextable::border_inner_h(fit.flex, border = border, part = "header")
fit.flex <- flextable::hline_top(fit.flex, border = border, part = "body")
fit.flex <- flextable::align(fit.flex, align = "center", part = "all")
# fit.flex <- flextable::set_header_labels(fit.flex, best_in_fold = "best in fold")
fit.flex <- flextable::autofit(fit.flex)
fit.flex
fit.flex <- flextable::flextable(fit.table)
fit.flex <- flextable::colformat_double(fit.flex, j = -c(1,2), digits = 2)
fit.flex <- flextable::set_header_df(fit.flex, mapping = fit.map)
fit.flex <- flextable::merge_h(fit.flex, part = "header")
fit.flex <- flextable::merge_v(fit.flex, j = c("factors", "df"), part = "header")
fit.flex <- flextable::fix_border_issues(fit.flex)
fit.flex <- flextable::border_inner_h(fit.flex, border = border, part = "header")
fit.flex <- flextable::hline_top(fit.flex, border = border, part = "all")
fit.flex <- flextable::align(fit.flex, align = "center", part = "all")
# fit.flex <- flextable::set_header_labels(fit.flex, best_in_fold = "best in fold")
fit.flex <- flextable::autofit(fit.flex)
fit.flex
best <- lapply(kfits, function(x) x[x[[index]] == min(x[[index]]),])
i <- "rmsea"
best <- lapply(kfits, function(x) x[x[[i]] == min(x[[i]]),])
best
best.df <- as.data.frame(Reduce(rbind,best))
best.df
best.df <- data.frame(fold = 1:k)
best <- as.data.frame(Reduce(rbind,best))
best
best.df <- cbind(best.df, best)
best.df <- cbind(best.df, best$factors)
best.df
index
best.df <- data.frame(fold = 1:k)
for(i in index){
# Model with the best index across folds
if(index %in% c("rmsea", "chisq")){
best <- lapply(kfits, function(x) x[x[[i]] == min(x[[i]]),])
} else if(index %in% c("cfi")){
best <- lapply(kfits, function(x) x[x[[i]] == max(x[[i]]),])
} else {stop("Not available at the moment")}
best <- as.data.frame(Reduce(rbind,best))
best.df <- cbind(best.df, best$factors)
}
best.df <- data.frame(fold = 1:k)
for(i in index){
# Model with the best index across folds
if(i %in% c("rmsea", "chisq")){
best <- lapply(kfits, function(x) x[x[[i]] == min(x[[i]]),])
} else if(i %in% c("cfi")){
best <- lapply(kfits, function(x) x[x[[i]] == max(x[[i]]),])
} else {stop("Not available at the moment")}
best <- as.data.frame(Reduce(rbind,best))
best.df <- cbind(best.df, best$factors)
}
best.df
names(best.df) <- c("fold", index)
best.df
?ncol
# Run report
kfa_report(kstudent, file.name = "kfa_students",
report.format = "word_document",
report.title = "K-fold Factor Analysis - Lebenon Students")
?lavaan::fitindices
mfits <- k_model_fit(kstudent, by.fold = FALSE)
roxygen2::roxygenize()
roxygen2::roxygenize()
library(kfa)
#### Import data ####
shortfile <- c("C:/Users/kylenick/University of North Carolina at Chapel Hill/Halpin, Peter Francis - UNC_stat_projets/EFA&CFA/")
student <- read.csv(paste0(shortfile, "scaledim/student_survey-latest.csv"))
teacher <- read.csv(paste0(shortfile, "scaledim/teacher_survey-latest.csv"))
principal <- read.csv(paste0(shortfile, "scaledim/principal_survey-latest.csv"))
coach <- read.csv(paste0(shortfile, "scaledim/coach_survey-latest.csv"))
## item map
itemmaps <- lapply(c("Coach_survey", "Teacher Survey",
"Principal Survey", "Student Survey"), function(x){
readxl::read_excel(paste0(shortfile, "Item construct map_2020_10_25.xlsx"),
sheet = x)})
names(itemmaps) <- c("coach", "teacher", "principal", "student")
## items for analysis
studentdf <- student[ ,names(student) %in% na.omit(itemmaps$student$`Variable Name`)]
teacherdf <- teacher[ ,names(teacher) %in% na.omit(itemmaps$teacher$`Variable Name`)]
principaldf <- principal[ ,names(principal) %in% na.omit(itemmaps$principal$`Variable Name`)]
coachdf <- coach[ ,names(coach) %in% na.omit(itemmaps$coach$`Variable Name`)]
studentdf2 <- studentdf[!(names(studentdf) %in% c("a1118x", "a1120x", "a1121x"))]
## set seed to get the same folds
set.seed(936639)
tictoc::tic()
kstudent <- kfa(variables = studentdf,
k = NULL,
m = 5,
rotation = "oblimin",
ordered = TRUE,
estimator = "DWLS",
missing = "pairwise")
tictoc::toc() # ~ 60 seconds
mfits <- k_model_fit(kstudent, by.fold = FALSE)
get_appendix(mfits)
library(kfa)
get_appendix(mfits)
mfits
names(mfits)
?merge
roxygen2::roxygenise()
library(kfa)
get_appendix(mfits)
appendix_prep <- function(fits, index, suffix){
fits <- fits[c("fold", "df", index)]
fits <- rbind(fits, cbind(data.frame(fold = "Mean", data.frame(t(colMeans(fits[-1]))))))
names(fits) <- c("fold", paste(c("df", index), suffix, sep = "."))
return(fits)
}
get_appendix <- function(mfits, index = "all"){
k <- max(unlist(lapply(mfits, nrow))) # number of folds
m <- length(mfits) # number of models per fold
if(index == "all"){
index <- index[!(index %in% c("fold", "df"))]
}
appendix <- mapply(appendix_prep, fits = mfits, suffix = 1:m, MoreArgs = list(index = index), SIMPLIFY = FALSE)
appendix.df <- appendix[[1]]
for(i in 2:m){
appendix.df <- merge(appendix.df, appendix[[i]], by = "fold")
}
appendix.df$fold <- factor(appendix.df$fold, levels = c(1:k, "Mean"))
appendix.df <- appendix.df[order(appendix.df$fold),]
row.names(appendix.df) <- NULL
return(appendix.df)
}
k <- max(unlist(lapply(mfits, nrow))) # number of folds
m <- length(mfits) # number of models per fold
if(index == "all"){
index <- index[!(index %in% c("fold", "df"))]
}
index = "all"
if(index == "all"){
index <- index[!(index %in% c("fold", "df"))]
}
names(mfits[[1]])
if(index == "all"){
index <- names(mfits[[1]])[!(names(mfits[[1]]) %in% c("fold", "df"))]
}
index
get_appendix <- function(mfits, index = "all"){
k <- max(unlist(lapply(mfits, nrow))) # number of folds
m <- length(mfits) # number of models per fold
if(index == "all"){
index <- names(mfits[[1]])[!(names(mfits[[1]]) %in% c("fold", "df"))]
}
appendix <- mapply(appendix_prep, fits = mfits, suffix = 1:m, MoreArgs = list(index = index), SIMPLIFY = FALSE)
appendix.df <- appendix[[1]]
for(i in 2:m){
appendix.df <- merge(appendix.df, appendix[[i]], by = "fold")
}
appendix.df$fold <- factor(appendix.df$fold, levels = c(1:k, "Mean"))
appendix.df <- appendix.df[order(appendix.df$fold),]
row.names(appendix.df) <- NULL
return(appendix.df)
}
get_appendix(mfits)
rm(appendix_prep())
rm(appendix_prep
)
rm(get_appendix)
knitr::opts_chunk$set(echo = FALSE)
flextable::set_flextable_defaults(fonts_ignore = TRUE)
# knitr::opts_chunk$set(options(knitr.kable.NA = ''))
plot.settings <- list(what = "std", whatLabels = "no", layout = "tree",
intercepts = FALSE, residuals = FALSE, thresholds = FALSE,
cut = cut, posCol = c("#BF0000","#000000"), fade = FALSE,
# edge.color = , # could create custom function to utilize this argument
weighted = TRUE, negDashed = TRUE, esize = 5,
manifests = vnames, reorder = FALSE)
rep(index, each = 2)
rep(index, times = m)
rep(paste(1:m, "factor", sep = "-"), each = length(index)
)
library(kfa)
# Run report
kfa_report(kstudent, file.name = "kfa_students",
report.format = "word_document",
report.title = "K-fold Factor Analysis - Lebenon Students")
kfits <- k_model_fit(kstudent)
index = c("chisq", "cfi", "rmsea")
bdf <- as.data.frame(Reduce(rbind, kfits))
bdf
kfits <- k_model_fit(kstudent)
kfits
kfits <- k_model_fit(kstudent, index = c("chisq", "cfi", "rmsea"))
kfits
ifelse(grepl("df", index), index, c("df", index))
index
c("df", index)
grepl("df", index)
sum(grepl("df", index))
ifelse(sum(grepl("df", index)) == 0, index, c("df", index))
index
ifelse(sum(grepl("df", index)) == 0, c("df", index), index)
if(sum(grepl("df", index)) == 0) c("df", index) else index
kfits <- k_model_fit(kstudent)
kfits
bdf <- as.data.frame(Reduce(rbind, kfits))
bdf
max(unlist(lapply(kfits, nrow)))
fit <- data.frame(factors = 1:4,
df = tapply(bdf[["df"]], bdf$factors, mean))
fit
index <- c("chisq", "cfi")
for(i in index){
agg <- data.frame(factors = 1:4,
mean = tapply(bdf[[i]], bdf$factors, mean),
range = paste(format(round(tapply(bdf[[i]], bdf$factors, min), digits = digits), nsmall = digits), "-",
format(round(tapply(bdf[[i]], bdf$factors, max), digits = digits), nsmall = digits)))
# hist = tapply(bdf[[index]], bdf$factors, function(x) skimr::skim(x)[["numeric.hist"]])
names(agg) <- c("factors", paste(c("mean", "range"), i, sep = "."))
# joining into single table
fit <- merge(x = fit, y = agg, by = "factors", all.x = TRUE)
}
digits = 2
for(i in index){
agg <- data.frame(factors = 1:4,
mean = tapply(bdf[[i]], bdf$factors, mean),
range = paste(format(round(tapply(bdf[[i]], bdf$factors, min), digits = digits), nsmall = digits), "-",
format(round(tapply(bdf[[i]], bdf$factors, max), digits = digits), nsmall = digits)))
# hist = tapply(bdf[[index]], bdf$factors, function(x) skimr::skim(x)[["numeric.hist"]])
names(agg) <- c("factors", paste(c("mean", "range"), i, sep = "."))
# joining into single table
fit <- merge(x = fit, y = agg, by = "factors", all.x = TRUE)
}
fit
rm(digits, i, index, k, m)
# Run report
kfa_report(kstudent, file.name = "kfa_students",
report.format = "word_document",
report.title = "K-fold Factor Analysis - Lebenon Students")
## analysis summary info
k <- length(kstudent) # number of folds
m <- max(unlist(lapply(kstudent, length))) # largest factor model
nobs <- sum(unlist(lapply(kstudent, function(x) lavaan::lavInspect(x[[1]], "nobs"))))
vnames <- dimnames(lavaan::lavInspect(kstudent[[1]][[1]], "sampstat")$cov)[[1]]
nvars <- length(vnames)
#### Model Fit ####
## summarizing fit statistics by fold
kfits <- k_model_fit(kstudent, index = index, by.fold = TRUE) # dataframe for each fold
index <- c("chisq", "cfi", "rmsea")
#### Model Fit ####
## summarizing fit statistics by fold
kfits <- k_model_fit(kstudent, index = index, by.fold = TRUE) # dataframe for each fold
fit.table <- agg_model_fit(kfits, index = index)
fit.table
## best model in each fold
best.model <- best_model(kfits, index = index)
best.model
## creating appendix -  folds x model table of fit statistics
mfits <- k_model_fit(kstudent, index = index, by.fold = FALSE)
appendix <- get_appendix(mfits, index = index)
if(length(index) == 1 & index == "all"){
index <- names(mfits[[1]])[!(names(mfits[[1]]) %in% c("fold", "df"))]
}
index
mfits
if(length(index) == 1){
if(index == "all"){
index <- names(mfits[[1]])[!(names(mfits[[1]]) %in% c("fold", "df"))]
}
}
index
## factor correlations
kcorrs <- agg_fac_cor(kstudent)
kcorrs
str(kcorrs[[1]])
str(kcorrs[[2]])
library(kfa)
# Run report
kfa_report(kstudent, file.name = "kfa_students",
report.format = "word_document",
report.title = "K-fold Factor Analysis - Lebenon Students")
# Run report
kfa_report(kstudent, file.name = "kfa_students",
report.format = "word_document",
report.title = "K-fold Factor Analysis - Lebenon Students")
temp <- -c(1)
temp
temp <- -c(1, 2)
tmep
temp
?flextable::set_header_df
roxygen2::roxygenise()
roxygen2::roxygenise()
#### Import data ####
shortfile <- c("C:/Users/kylenick/University of North Carolina at Chapel Hill/Halpin, Peter Francis - UNC_stat_projets/EFA&CFA/")
student <- read.csv(paste0(shortfile, "scaledim/student_survey-latest.csv"))
teacher <- read.csv(paste0(shortfile, "scaledim/teacher_survey-latest.csv"))
principal <- read.csv(paste0(shortfile, "scaledim/principal_survey-latest.csv"))
coach <- read.csv(paste0(shortfile, "scaledim/coach_survey-latest.csv"))
## item map
itemmaps <- lapply(c("Coach_survey", "Teacher Survey",
"Principal Survey", "Student Survey"), function(x){
readxl::read_excel(paste0(shortfile, "Item construct map_2020_10_25.xlsx"),
sheet = x)})
names(itemmaps) <- c("coach", "teacher", "principal", "student")
## items for analysis
studentdf <- student[ ,names(student) %in% na.omit(itemmaps$student$`Variable Name`)]
teacherdf <- teacher[ ,names(teacher) %in% na.omit(itemmaps$teacher$`Variable Name`)]
principaldf <- principal[ ,names(principal) %in% na.omit(itemmaps$principal$`Variable Name`)]
coachdf <- coach[ ,names(coach) %in% na.omit(itemmaps$coach$`Variable Name`)]
studentdf2 <- studentdf[!(names(studentdf) %in% c("a1118x", "a1120x", "a1121x"))]
## set seed to get the same folds
set.seed(936639)
library(kfa)
tictoc::tic()
kstudent <- kfa(variables = studentdf,
k = NULL,
m = 5,
rotation = "oblimin",
ordered = TRUE,
estimator = "DWLS",
missing = "pairwise")
tictoc::toc() # ~ 60 seconds
# Run report
kfa_report(kstudent, file.name = "kfa_students",
report.format = "word_document",
report.title = "K-fold Factor Analysis - Lebenon Students")
?suppressMessages
test <- agg_reliability(kstudent)
semTools::reliability(kstudent[[2]][[1]])
suppressMessages(semTools::reliability(kstudent[[2]][[1]]))
mfits <- k_model_fit(kstudent, by.fold = FALSE)
mfits
test <- get_appendix(kstudent)
test <- get_appendix(mfits)
test
appendix <- flextab_format(appendix)
appendix <- flextab_format(test)
test <- get_appendix(mfits)
appendix <- flextab_format(test)
?flextab_format
test
appendix <- flextab_format(test, digits = 2)
appendix
?flextable::font
appendix <- flextable::font(appendix, fontname = "Times New Roman", part = "all")
appendix
appendix <- flextable::padding(appendix, part = "all")
appendix
appendix <- flextable::padding(appendix, padding = 1, part = "all")
appendix
flextable::init_flextable_defaults()
flextable::init_flextable_defaults(appendix)
flextable::get_flextable_defaults()
appendix <- flextable::padding(appendix, padding = 3, part = "all")
appendix
# Run report
kfa_report(kstudent, file.name = "kfa_students",
report.format = "word_document",
report.title = "K-fold Factor Analysis - Lebenon Students")
library(kfa)
#### Import data ####
shortfile <- c("C:/Users/kylenick/University of North Carolina at Chapel Hill/Halpin, Peter Francis - UNC_stat_projets/EFA&CFA/")
student <- read.csv(paste0(shortfile, "scaledim/student_survey-latest.csv"))
teacher <- read.csv(paste0(shortfile, "scaledim/teacher_survey-latest.csv"))
principal <- read.csv(paste0(shortfile, "scaledim/principal_survey-latest.csv"))
coach <- read.csv(paste0(shortfile, "scaledim/coach_survey-latest.csv"))
## item map
itemmaps <- lapply(c("Coach_survey", "Teacher Survey",
"Principal Survey", "Student Survey"), function(x){
readxl::read_excel(paste0(shortfile, "Item construct map_2020_10_25.xlsx"),
sheet = x)})
names(itemmaps) <- c("coach", "teacher", "principal", "student")
## items for analysis
studentdf <- student[ ,names(student) %in% na.omit(itemmaps$student$`Variable Name`)]
teacherdf <- teacher[ ,names(teacher) %in% na.omit(itemmaps$teacher$`Variable Name`)]
principaldf <- principal[ ,names(principal) %in% na.omit(itemmaps$principal$`Variable Name`)]
coachdf <- coach[ ,names(coach) %in% na.omit(itemmaps$coach$`Variable Name`)]
studentdf2 <- studentdf[!(names(studentdf) %in% c("a1118x", "a1120x", "a1121x"))]
library(kfa)
set.seed(936639)
tictoc::tic()
kstudent <- kfa(variables = studentdf,
k = NULL,
m = 5,
rotation = "oblimin",
ordered = TRUE,
estimator = "DWLS",
missing = "pairwise")
tictoc::toc() # ~ 60 seconds
