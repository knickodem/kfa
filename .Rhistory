color = list(lat = palette.colors(n = 4, "Okabe-Ito")[-1]),
cut = .3, posCol = c("#BF0000","#000000"), fade = FALSE,
# edge.color = , # could create custom function to utilize this argument
weighted = TRUE, esize = 5,
manifests = vn, reorder = FALSE)
curiousplot <- semPlot::semPaths(kstudent[[1]][[3]], what = "std", whatLabels = "no",
layout = "tree", negDashed = TRUE,
intercepts = FALSE, residuals = FALSE, thresholds = FALSE,
color = list(lat = palette.colors(n = 4, palette = "Okabe-Ito",
recycle = TRUE)[-1]),
cut = .3, posCol = c("#BF0000","#000000"), fade = FALSE,
# edge.color = , # could create custom function to utilize this argument
weighted = TRUE, esize = 5,
manifests = vn, reorder = FALSE)
plot.settings <- list(what = "std", whatLabels = "no",
layout = "tree", negDashed = TRUE,
intercepts = FALSE, residuals = FALSE, thresholds = FALSE,
color = list(lat = palette.colors(n = 4, palette = "Okabe-Ito",
recycle = TRUE)[-1]),
cut = .3, posCol = c("#BF0000","#000000"), fade = FALSE,
# edge.color = , # could create custom function to utilize this argument
weighted = TRUE, esize = 5,
manifests = vnames, reorder = FALSE)
plot.settings <- list(what = "std", whatLabels = "no",
layout = "tree", negDashed = TRUE,
intercepts = FALSE, residuals = FALSE, thresholds = FALSE,
color = list(lat = palette.colors(n = 4, palette = "Okabe-Ito",
recycle = TRUE)[-1]),
cut = .3, posCol = c("#BF0000","#000000"), fade = FALSE,
# edge.color = , # could create custom function to utilize this argument
weighted = TRUE, esize = 5,
manifests = vn, reorder = FALSE)
?do.call
do.call("semPlot::semPaths", args = c(list(object = kstudent[[1]][[3]]), plot.settings))
do.call(semPlot::semPaths, args = c(list(object = kstudent[[1]][[3]]), plot.settings))
library(kfa)
# Run report
kfa_report(kstudent, report.title = "K-fold Factor Analysis - Lebenon Students",
file.name = "kfa_students")
cor.lv <- vector("list", k)
for(s in 1:k){
cor.lv[[s]] <- lavaan::lavInspect(kstudent[[s]][[m]], "cor.lv")
}
Reduce(`+`, cor.lv) / length(cor.lv)
coretest <- Reduce(`+`, cor.lv) / length(cor.lv)
class(coretest)
View(coretest)
lower.tri(coretest)
coretest <- coretest[lower.tri(coretest, diag = TRUE)]
coretest
as.matrix(coretest)
coretest[upper.tri(coretest, diag = FALSE)] <- NA
coretest
coretest <- Reduce(`+`, cor.lv) / length(cor.lv)
coretest[upper.tri(coretest, diag = FALSE)] <- NA
coretest
View(coretest)
# Run report
kfa_report(kstudent, report.title = "K-fold Factor Analysis - Lebenon Students",
file.name = "kfa_students")
#### Model Structure ####
# All items are included in the 1 factor model; only differences in loadings will occur across folds
allstructures <- vector("list", length = 4)
allstructures[[1]] <- data.frame(structure = efa_cfa_syntax(lavaan::lavInspect(kstudent[[1]][[1]], "est")$lambda),
folds = paste(1:k, collapse = ", "))
for(m in 2:4){
structures <- vector("list", length = k)
for(f in 1:k){
structures[[f]] <- efa_cfa_syntax(lavaan::lavInspect(kstudent[[f]][[m]], "est")$lambda)
}
us <- unique(unlist(structures, use.names = FALSE))
slist <- vector("list", length = length(us))
for(u in seq_along(us)){
folds <- which(unlist(lapply(structures, function(x) x == us[[u]])))
slist[[u]] <- list(structure = us[[u]],
folds = which(unlist(lapply(structures, function(x) x == us[[u]]))))
}
allstructures[[m]] <- slist
}
allstructures[[2]]
#### Model Structure ####
# All items are included in the 1 factor model; only differences in loadings will occur across folds
allstructures <- vector("list", length = 4)
allstructures[[1]] <- list(structure = efa_cfa_syntax(lavaan::lavInspect(kstudent[[1]][[1]], "est")$lambda),
folds = 1:k)
for(m in 2:4){
structures <- vector("list", length = k)
for(f in 1:k){
structures[[f]] <- efa_cfa_syntax(lavaan::lavInspect(kstudent[[f]][[m]], "est")$lambda)
}
us <- unique(unlist(structures, use.names = FALSE))
slist <- vector("list", length = length(us))
for(u in seq_along(us)){
folds <- which(unlist(lapply(structures, function(x) x == us[[u]])))
slist[[u]] <- list(structure = us[[u]],
folds = which(unlist(lapply(structures, function(x) x == us[[u]]))))
}
allstructures[[m]] <- slist
}
str(allstructures)
allstructures[[4]]
length(allstructures[[4]])
for(s in allstructures[[4]][[1]]){
print(s)
}
for(s in allstructures[[4]][[1]]$folds){
print(s)
}
# Run report
kfa_report(kstudent, report.title = "K-fold Factor Analysis - Lebenon Students",
file.name = "kfa_students")
allstructures[[1]]
allstructures[[1]][[1]]
paste(allstructures[[4]], collapse = ", ")
allstructures[[4]]
allstructures[[3]]
#### Model Structure ####
# All items are included in the 1 factor model; only differences in loadings will occur across folds
allstructures <- vector("list", length = 4)
allstructures[[1]][[1]] <- list(structure = efa_cfa_syntax(lavaan::lavInspect(kstudent[[1]][[1]], "est")$lambda),
folds = 1:k)
for(m in 2:4){
structures <- vector("list", length = k)
for(f in 1:k){
structures[[f]] <- efa_cfa_syntax(lavaan::lavInspect(kstudent[[f]][[m]], "est")$lambda)
}
us <- unique(unlist(structures, use.names = FALSE))
slist <- vector("list", length = length(us))
for(u in seq_along(us)){
folds <- which(unlist(lapply(structures, function(x) x == us[[u]])))
slist[[u]] <- list(structure = us[[u]],
folds = which(unlist(lapply(structures, function(x) x == us[[u]]))))
}
allstructures[[m]] <- slist
}
paste(allstructures[[3]][[1]], collapse = ", ")
paste(allstructures[[4]][[1]], collapse = ", ")
allstructures[[4]]
paste(allstructures[[4]][1], collapse = ", ")
allstructures[[4]][1]
allstructures[[1]][1]
paste(allstructures[[1]][1]$folds, collapse = ", ")
paste(allstructures[[4]][1]$folds, collapse = ", ")
paste(allstructures[[4]][[1]]$folds, collapse = ", ")
paste(allstructures[[1]][[1]]$folds, collapse = ", ")
#### Model Structure ####
# All items are included in the 1 factor model; only differences in loadings will occur across folds
allstructures <- vector("list", length = 4)
allstructures[[1]] <- list(structure = efa_cfa_syntax(lavaan::lavInspect(kstudent[[1]][[1]], "est")$lambda),
folds = 1:k)
for(m in 2:4){
structures <- vector("list", length = k)
for(f in 1:k){
structures[[f]] <- efa_cfa_syntax(lavaan::lavInspect(kstudent[[f]][[m]], "est")$lambda)
}
us <- unique(unlist(structures, use.names = FALSE))
slist <- vector("list", length = length(us))
for(u in seq_along(us)){
folds <- which(unlist(lapply(structures, function(x) x == us[[u]])))
slist[[u]] <- list(structure = us[[u]],
folds = which(unlist(lapply(structures, function(x) x == us[[u]]))))
}
allstructures[[m]] <- slist
}
paste(allstructures[[1]][[1]]$folds, collapse = ", ")
#### Model Structure ####
# All items are included in the 1 factor model; only differences in loadings will occur across folds
allstructures <- vector("list", length = 4)
allstructures[[1]][[1]] <- list(structure = efa_cfa_syntax(lavaan::lavInspect(kstudent[[1]][[1]], "est")$lambda),
folds = 1:k)
for(m in 2:4){
structures <- vector("list", length = k)
for(f in 1:k){
structures[[f]] <- efa_cfa_syntax(lavaan::lavInspect(kstudent[[f]][[m]], "est")$lambda)
}
us <- unique(unlist(structures, use.names = FALSE))
slist <- vector("list", length = length(us))
for(u in seq_along(us)){
folds <- which(unlist(lapply(structures, function(x) x == us[[u]])))
slist[[u]] <- list(structure = us[[u]],
folds = which(unlist(lapply(structures, function(x) x == us[[u]]))))
}
allstructures[[m]] <- slist
}
paste(allstructures[[1]][[1]]$folds, collapse = ", ")
# Run report
kfa_report(kstudent, report.title = "K-fold Factor Analysis - Lebenon Students",
file.name = "kfa_students")
# Run report
kfa_report(kstudent, report.title = "K-fold Factor Analysis - Lebenon Students",
file.name = "kfa_students")
roxygen2::roxygenize()
# Run report
kfa_report(kstudent, report.title = "K-fold Factor Analysis - Lebenon Students",
file.name = "kfa_students")
# Run report
kfa_report(kstudent, report.title = "K-fold Factor Analysis - Lebenon Students",
file.name = "kfa_students")
# Run report
kfa_report(kstudent, report.title = "K-fold Factor Analysis - Lebenon Students",
file.name = "kfa_students")
# Run report
kfa_report(kstudent, report.title = "K-fold Factor Analysis - Lebenon Students",
file.name = "kfa_students")
# Run report
kfa_report(kstudent, report.title = "K-fold Factor Analysis - Lebenon Students",
file.name = "kfa_students")
roxygen2::roxygenize()
# Run report
kfa_report(kstudent, report.title = "K-fold Factor Analysis - Lebenon Students",
file.name = "kfa_students")
library(kfa)
###################################
#                                 #
#        kfa package tests        #
#                                 #
###################################
## Import data
shortfile <- c("C:/Users/kylenick/University of North Carolina at Chapel Hill/Halpin, Peter Francis - UNC_stat_projets/EFA&CFA/")
student <- read.csv(paste0(shortfile, "scaledim/student_survey-latest.csv"))
teacher <- read.csv(paste0(shortfile, "scaledim/teacher_survey-latest.csv"))
principal <- read.csv(paste0(shortfile, "scaledim/principal_survey-latest.csv"))
coach <- read.csv(paste0(shortfile, "scaledim/coach_survey-latest.csv"))
## item map
itemmaps <- lapply(c("Coach_survey", "Teacher Survey",
"Principal Survey", "Student Survey"), function(x){
readxl::read_excel(paste0(shortfile, "Item construct map_2020_10_25.xlsx"),
sheet = x)})
names(itemmaps) <- c("coach", "teacher", "principal", "student")
## items for analysis
studentdf <- student[ ,names(student) %in% na.omit(itemmaps$student$`Variable Name`)]
teacherdf <- teacher[ ,names(teacher) %in% na.omit(itemmaps$teacher$`Variable Name`)]
principaldf <- principal[ ,names(principal) %in% na.omit(itemmaps$principal$`Variable Name`)]
coachdf <- coach[ ,names(coach) %in% na.omit(itemmaps$coach$`Variable Name`)]
studentdf2 <- studentdf[!(names(studentdf) %in% c("a1118x", "a1120x", "a1121x"))]
## set seed to get the same folds
set.seed(936639)
tictoc::tic()
kstudent <- kfa(variables = studentdf,
k = NULL,
m = 5,
rotation = "oblimin",
ordered = TRUE,
estimator = "DWLS",
missing = "pairwise")
tictoc::toc() # ~ 100 seconds
# Run report
kfa_report(kstudent, report.title = "K-fold Factor Analysis - Lebenon Students",
file.name = "kfa_students")
?kfa_report
library(kfa)
# Run report
kfa_report(kstudent, report.title = "K-fold Factor Analysis - Lebenon Students",
file.name = "kfa_students")
tictoc::tic()
set.seed(231220)
kteacher <- kfold_fa(variables = teacherdf,
k = 5,
m = 10,
rotation = "oblimin",
ordered = TRUE,
estimator = "DWLS",
missing = "pairwise")
tictoc::toc() #
tictoc::tic()
set.seed(231220)
kteacher <- kfa(variables = teacherdf,
k = 5,
m = 10,
rotation = "oblimin",
ordered = TRUE,
estimator = "DWLS",
missing = "pairwise")
#### Using Dorothy Data ####
load("C:/Users/kylenick/OneDrive - University of North Carolina at Chapel Hill/Dorothy/00 Sources of Strength Data W1-W4 - ALL/SoS/Output/SoS_Data.RData")
exposurew2 <- ds2long %>%
filter(Wave == 2 & Tx == 1) %>%
select(all_of(exposurevars))
exposurew2 <- ds2long[ds2long$Wave == 2 & ds2long$Tx == 1, c(exposurevars)]
exposurevars <- c("EXPOSURE_POSTERS_VIDEOS", "EXPOSURE_SOCIAL_MEDIA", "EXPOSURE_STRENGTHS_RESILIENCE",
"EXPOSURE_HELP_SUICIDAL_TEENS", "EXPOSURE_TOLD_YOU_ABOUT_SOURCES", "EXPOSURE_OWN_STRENGTHS",
"EXPOSURE_ACTIVITITY_PARTICIPATION", "EXPOSURE_NAMED_TRUSTED_ADULT", "EXPOSURE_STRENGTHS_ANXIETY_DEP",
"EXPOSURE_STRENGTHS_GROW", "EXPOSURE_THANKFUL_FOR", "EXPOSURE_HELP_OTHERS", "EXPOSURE_SHARED_STORY_GETTING_HELP",
"EXPOSURE_OTHER", "EXPOSURE_LOGO")
exposurew2 <- ds2long[ds2long$Wave == 2 & ds2long$Tx == 1, c(exposurevars)]
set.seed(210106)
tictoc::tic()
kexp2 <- kfa(variables = exposurew2,
k = NULL,
m = 4,
rotation = "oblimin",
ordered = TRUE,
estimator = "DWLS",
missing = "pairwise")
tictoc::toc() # ~ 22 seconds
library(kfa)
set.seed(210106)
tictoc::tic()
kexp2 <- kfa(variables = exposurew2,
k = NULL,
m = 4,
rotation = "oblimin",
ordered = TRUE,
estimator = "DWLS",
missing = "pairwise")
tictoc::toc() # ~ 22 seconds
str(exposurew2)
exposurew2 <- as.numeric(ds2long[ds2long$Wave == 2 & ds2long$Tx == 1, c(exposurevars)])
exposurew2 <- apply(exposurew2, 2, as.numeric)
exposurew2 <- ds2long[ds2long$Wave == 2 & ds2long$Tx == 1, c(exposurevars)]
exposurew2 <- apply(exposurew2, 2, as.numeric)
exposurew2 <- apply(exposurew2, 2, as.character)
exposurew2 <- as.data.frame(ds2long[ds2long$Wave == 2 & ds2long$Tx == 1, c(exposurevars)])
exposurew2 <- apply(exposurew2, 2, as.numeric)
exposurew2 <- apply(exposurew2, 2, as.factor)
student <- read.csv(paste0(shortfile, "scaledim/student_survey-latest.csv"))
#### Import data ####
shortfile <- c("C:/Users/kylenick/University of North Carolina at Chapel Hill/Halpin, Peter Francis - UNC_stat_projets/EFA&CFA/")
student <- read.csv(paste0(shortfile, "scaledim/student_survey-latest.csv"))
teacher <- read.csv(paste0(shortfile, "scaledim/teacher_survey-latest.csv"))
principal <- read.csv(paste0(shortfile, "scaledim/principal_survey-latest.csv"))
coach <- read.csv(paste0(shortfile, "scaledim/coach_survey-latest.csv"))
## item map
itemmaps <- lapply(c("Coach_survey", "Teacher Survey",
"Principal Survey", "Student Survey"), function(x){
readxl::read_excel(paste0(shortfile, "Item construct map_2020_10_25.xlsx"),
sheet = x)})
names(itemmaps) <- c("coach", "teacher", "principal", "student")
## items for analysis
studentdf <- student[ ,names(student) %in% na.omit(itemmaps$student$`Variable Name`)]
teacherdf <- teacher[ ,names(teacher) %in% na.omit(itemmaps$teacher$`Variable Name`)]
principaldf <- principal[ ,names(principal) %in% na.omit(itemmaps$principal$`Variable Name`)]
coachdf <- coach[ ,names(coach) %in% na.omit(itemmaps$coach$`Variable Name`)]
studentdf2 <- studentdf[!(names(studentdf) %in% c("a1118x", "a1120x", "a1121x"))]
## set seed to get the same folds
set.seed(936639)
tictoc::tic()
kstudent <- kfa(variables = studentdf,
k = NULL,
m = 5,
rotation = "oblimin",
ordered = TRUE,
estimator = "DWLS",
missing = "pairwise")
tictoc::toc() # ~ 100 seconds
library(kfa)
## set seed to get the same folds
set.seed(936639)
tictoc::tic()
kstudent <- kfa(variables = studentdf,
k = NULL,
m = 5,
rotation = "oblimin",
ordered = TRUE,
estimator = "DWLS",
missing = "pairwise")
tictoc::toc() # ~ 100 seconds
library(kfa)
test <- agg_lv_cor(kstudent)
test
names(kstudent)
length(kstudent)
length(kstudent[[1]])
roxygen2::roxygenize()
loads <- agg_loadings(kstudent)
library(kfa)
loads <- agg_loadings(kstudent)
loads
roxygen2::roxygenize()
library(kfa)
struct <- f_structure(kstudent)
struct
fit <- agg_model_fit(kstudent)
fit
fittab <- fit_summary(fit)
nrow(fit[[1]])
lappy(fit, nrow)
lapply(fit, nrow)
max(lapply(fit, nrow))
c(lapply(fit, nrow))
unlist(lapply(fit, nrow))
maxunlist(lapply(fit, nrow)))
max(unlist(lapply(fit, nrow)))
roxygen2::roxygenize()
library(kfa)
fit <- k_model_fit(kstudent)
fit
fittab <- agg_model_fit(fit)
fittab
?semPlot::semPaths
roxygen2::roxygenise()
library(kfa)
library(kfa)
# Run report
kfa_report(kstudent, file.name = "kfa_students",
report.format = "html_document",
report.title = "K-fold Factor Analysis - Lebenon Students",)
library(kfa)
# Run report
kfa_report(kstudent, file.name = "kfa_students",
report.format = "html_document",
report.title = "K-fold Factor Analysis - Lebenon Students")
library(kfa)
# Run report
kfa_report(kstudent, file.name = "kfa_students",
report.format = "html_document",
report.title = "K-fold Factor Analysis - Lebenon Students")
library(parallel)
?lavaan::lavCor
?mclapply
detectCores()
.Platform
cores <- detectCores()
cores
?detectCores
## set seed to get the same folds
set.seed(936639)
testfolds <- caret::createFolds(y = 1:nrow(studentdf),
k = k, list = TRUE,
returnTrain = FALSE)
testfolds <- caret::createFolds(y = 1:nrow(studentdf),
k = 5, list = TRUE,
returnTrain = FALSE)
k <- 5
m <- 5
rotation = "oblimin"
ordered = TRUE
estimator = "DWLS"
missing = "pairwise"
k_efa(training = studentdf[!c(row.names(studentdf) %in% testfolds[[fold]]), ],
m = 5,
rotation = rotation,
ordered = ordered,
estimator = estimator,
missing = missing,
...)
testefa <- mclapply(1:k, function(fold){
k_efa(training = studentdf[!c(row.names(studentdf) %in% testfolds[[fold]]), ],
m = 5,
rotation = rotation,
ordered = ordered,
estimator = estimator,
missing = missing)
})
library(kfa)
testefa <- mclapply(1:k, function(fold){
k_efa(training = studentdf[!c(row.names(studentdf) %in% testfolds[[fold]]), ],
m = 5,
rotation = rotation,
ordered = ordered,
estimator = estimator,
missing = missing)
})
testefa[[1]]
traincfa <- mclapply(1:k, function(fold){
k_cfa(efa = testefa[[fold]],
testset = studentdf[testfolds[[fold]], ],
ordered = ordered,
estimator = estimator,
missing = missing)
})
traincfa[[1]]
View(studentdf2)
View(struct)
roxygen2::roxygenize()
#### Import data ####
shortfile <- c("C:/Users/kylenick/University of North Carolina at Chapel Hill/Halpin, Peter Francis - UNC_stat_projets/EFA&CFA/")
library(kfa)
student <- read.csv(paste0(shortfile, "scaledim/student_survey-latest.csv"))
teacher <- read.csv(paste0(shortfile, "scaledim/teacher_survey-latest.csv"))
principal <- read.csv(paste0(shortfile, "scaledim/principal_survey-latest.csv"))
coach <- read.csv(paste0(shortfile, "scaledim/coach_survey-latest.csv"))
## item map
itemmaps <- lapply(c("Coach_survey", "Teacher Survey",
"Principal Survey", "Student Survey"), function(x){
readxl::read_excel(paste0(shortfile, "Item construct map_2020_10_25.xlsx"),
sheet = x)})
names(itemmaps) <- c("coach", "teacher", "principal", "student")
## items for analysis
studentdf <- student[ ,names(student) %in% na.omit(itemmaps$student$`Variable Name`)]
teacherdf <- teacher[ ,names(teacher) %in% na.omit(itemmaps$teacher$`Variable Name`)]
principaldf <- principal[ ,names(principal) %in% na.omit(itemmaps$principal$`Variable Name`)]
coachdf <- coach[ ,names(coach) %in% na.omit(itemmaps$coach$`Variable Name`)]
studentdf2 <- studentdf[!(names(studentdf) %in% c("a1118x", "a1120x", "a1121x"))]
## set seed to get the same folds
set.seed(936639)
tictoc::tic()
kstudent <- temp_kfa(variables = studentdf,
k = NULL,
m = 5,
rotation = "oblimin",
ordered = TRUE,
estimator = "DWLS",
missing = "pairwise")
tictoc::toc() # ~ 100 seconds
library(kfa)
set.seed(936639)
tictoc::tic()
kstudent <- temp_kfa(variables = studentdf,
k = NULL,
m = 5,
rotation = "oblimin",
ordered = TRUE,
estimator = "DWLS",
missing = "pairwise")
tictoc::toc() # ~ 100 seconds
# Run report
kfa_report(kstudent, file.name = "kfa_students_parallel",
report.format = "html_document",
report.title = "K-fold Factor Analysis - Lebenon Students")
roxygen2::roxygenize()
library(kfa)
