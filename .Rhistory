13*8
112/2
112*.25
109/70
70/109
library(kfa)
shortfile <- c("C:/Users/kylenick/University of North Carolina at Chapel Hill/Halpin, Peter Francis - UNC_stat_projets/EFA&CFA/")
student <- read.csv(paste0(shortfile, "scaledim/student_survey-latest.csv"))
teacher <- read.csv(paste0(shortfile, "scaledim/teacher_survey-latest.csv"))
principal <- read.csv(paste0(shortfile, "scaledim/principal_survey-latest.csv"))
coach <- read.csv(paste0(shortfile, "scaledim/coach_survey-latest.csv"))
## item map
itemmaps <- lapply(c("Coach_survey", "Teacher Survey",
"Principal Survey", "Student Survey"), function(x){
readxl::read_excel(paste0(shortfile, "Item construct map_2020_10_25.xlsx"),
sheet = x)})
names(itemmaps) <- c("coach", "teacher", "principal", "student")
studentdf <- student[ ,names(student) %in% na.omit(itemmaps$student$`Variable Name`)]
teacherdf <- teacher[ ,names(teacher) %in% na.omit(itemmaps$teacher$`Variable Name`)]
principaldf <- principal[ ,names(principal) %in% na.omit(itemmaps$principal$`Variable Name`)]
coachdf <- coach[ ,names(coach) %in% na.omit(itemmaps$coach$`Variable Name`)]
studentdf2 <- studentdf[!(names(studentdf) %in% c("a1118x", "a1120x", "a1121x"))]
set.seed(936639)
tictoc::tic()
kstudent <- kfa(variables = studentdf,
k = NULL,
m = 5,
rotation = "oblimin",
ordered = TRUE,
estimator = "DWLS",
missing = "pairwise")
tictoc::toc() # ~ 100 seconds
#### Model Fit ####
k <- 10
#### Model Structure ####
# All items are included in the 1 factor model; only differences in loadings will occur across folds
structures <- vector("list", length = k)
for(s in 1:k){
structures[[s]] <- efa_cfa_syntax(lavaan::lavInspect(kstudent[[1]][[2]], "est")$lambda)
}
structures
unique(Reduce(rbind, structures)))
unique(Reduce(rbind, structures))
us <- unique(Reduce(rbind, structures))
us <- unique(structures)
?unique
structures[structures==us]
lapply(structures, function(x) x==us)
structures[unlist(lapply(structures, function(x) x==us))]
which(unlist(lapply(structures, function(x) x==us)))
seq_along(us)
structuredf <- data.frame()
for(s in seq_along(us)){
df <- data.frame(structure = us[[s]],
folds = which(unlist(lapply(structures, function(x) x==us))))
structuredf <- rbind(structuredf, df)
}
structuredf <- data.frame()
for(s in seq_along(us)){
df <- data.frame(structure = us[[s]],
folds = c(which(unlist(lapply(structures, function(x) x==us)))))
structuredf <- rbind(structuredf, df)
}
View(structuredf)
folds <- which(unlist(lapply(structures, function(x) x==us[[s]]))
)
structuredf <- data.frame()
for(s in seq_along(us)){
folds <- which(unlist(lapply(structures, function(x) x==us[[s]])))
df <- data.frame(structure = us[[s]],
folds = paste(folds, collapse = ", "))
structuredf <- rbind(structuredf, df)
}
View(structuredf)
#### Model Structure ####
# All items are included in the 1 factor model; only differences in loadings will occur across folds
structures <- vector("list", length = k)
for(s in 1:k){
structures[[s]] <- efa_cfa_syntax(lavaan::lavInspect(kstudent[[s]][[2]], "est")$lambda)
}
us <- unique(structures)
#### Model Structure ####
# All items are included in the 1 factor model; only differences in loadings will occur across folds
structures <- vector("list", length = k)
for(s in 1:k){
structures[[s]] <- efa_cfa_syntax(lavaan::lavInspect(kstudent[[s]][[3]], "est")$lambda)
}
us <- unique(unlist(structures, use.names = FALSE))
us
allstructures <- vector("list", length = 4)
allstructures[[1]] <- NULL
for(m in 2:4){
structures <- vector("list", length = k)
for(f in 1:k){
structures[[f]] <- efa_cfa_syntax(lavaan::lavInspect(kstudent[[f]][[m]], "est")$lambda)
}
us <- unique(unlist(structures, use.names = FALSE))
structuredf <- data.frame()
for(u in seq_along(us)){
folds <- which(unlist(lapply(structures, function(x) x==us[[u]])))
df <- data.frame(structure = us[[u]],
folds = paste(folds, collapse = ", "))
structuredf <- rbind(structuredf, df)
}
allstructures[[m]] <- structuredf
}
allstructures
1128.2
112*.2
allstructures[[1]]
allstructures[[2]]
library(kfa)
# Run report
kfa_report(kstudent, report.title = "K-fold Factor Analysis - Lebenon Students",
file.name = "kfa_students")
?gsub
vn <- dimnames(lavaan::lavInspect(kstudent[[1]][[1]], "sampstat")$cov)[[1]]
semPlot::semPaths(kstudent[[1]][[3]], kstudent[[2]][[3]], what = "std", whatLabels = "no",
intercepts = FALSE, residuals = FALSE,
thresholds = FALSE, reorder = FALSE,
manifests = vn)
semPlot::semPaths(list(kstudent[[1]][[3]], kstudent[[2]][[3]]), what = "std", whatLabels = "no",
intercepts = FALSE, residuals = FALSE,
thresholds = FALSE, reorder = FALSE,
manifests = vn)
?cowplot::plot_grid
curiousplot <- semPlot::semPaths(list(kstudent[[1]][[3]], what = "std", whatLabels = "no",
)
)
curiousplot <- semPlot::semPaths(kstudent[[1]][[3]], what = "std", whatLabels = "no",
intercepts = FALSE, residuals = FALSE,
thresholds = FALSE, reorder = FALSE,
manifests = vn)
class(curiousplot)
plot(curiousplot)
print(curiousplot)
cowplot::plot_grid(curiousplot, curiousplot)
cowplot::plot_grid(plot(curiousplot), plot(curiousplot))
cowplot::as_grob(curiousplot)
cowplot::as_grob(plot(curiousplot))
curiousplot
str(curiousplot)
as.ggraph(curiousplot)
qgraph::as.ggraph(curiousplot)
curiousplot <- semPlot::semPaths(kstudent[[1]][[3]], what = "std", whatLabels = "no",
intercepts = FALSE, residuals = FALSE,
thresholds = FALSE, reorder = FALSE, XKCD = TRUE,
manifests = vn)
curiousplot <- semPlot::semPaths(kstudent[[1]][[3]], what = "std", whatLabels = "no",
intercepts = FALSE, residuals = FALSE, thresholds = FALSE,
cut = .3, posCol = c("#BF0000","#000000"), fade = FALSE,
manifests = vn, reorder = FALSE)
#### Plotting ####
?palette
#### Plotting ####
palette(1)
#### Plotting ####
palette.pals
#### Plotting ####
palette.pals()
#### Plotting ####
palette.colors(n = 10, "Set 1")
rainbow(4)
curiousplot <- semPlot::semPaths(kstudent[[1]][[3]], what = "std", whatLabels = "no",
intercepts = FALSE, residuals = FALSE, thresholds = FALSE,
color = palette.colors(n = 3, "Set 1"),
cut = .3, posCol = c("#BF0000","#000000"), fade = FALSE,
manifests = vn, reorder = FALSE)
curiousplot <- semPlot::semPaths(kstudent[[1]][[3]], what = "std", whatLabels = "no",
intercepts = FALSE, residuals = FALSE, thresholds = FALSE,
color = list(lat = palette.colors(n = 3, "Set 1")),
cut = .3, posCol = c("#BF0000","#000000"), fade = FALSE,
manifests = vn, reorder = FALSE)
curiousplot <- semPlot::semPaths(kstudent[[1]][[3]], what = "std", whatLabels = "no",
intercepts = FALSE, residuals = FALSE, thresholds = FALSE,
color = list(lat = palette.colors(n = 3, "Set 1")),
cut = .3, posCol = c("#BF0000","#000000"), fade = TRUE,
manifests = vn, reorder = FALSE)
curiousplot <- semPlot::semPaths(kstudent[[1]][[3]], what = "std", whatLabels = "no",
intercepts = FALSE, residuals = FALSE, thresholds = FALSE,
color = list(lat = palette.colors(n = 3, "Set 1")),
cut = .3, posCol = c("#BF0000","black"), fade = TRUE,
manifests = vn, reorder = FALSE)
curiousplot <- semPlot::semPaths(kstudent[[1]][[3]], what = "std", whatLabels = "no",
intercepts = FALSE, residuals = FALSE, thresholds = FALSE,
color = list(lat = palette.colors(n = 3, "Set 1")),
cut = .3, posCol = c("#BF0000","green"), fade = TRUE,
manifests = vn, reorder = FALSE)
curiousplot <- semPlot::semPaths(kstudent[[1]][[3]], what = "std", whatLabels = "no",
intercepts = FALSE, residuals = FALSE, thresholds = FALSE,
color = list(lat = palette.colors(n = 3, "Set 1")),
# cut = .3, posCol = c("#BF0000","#000000"), fade = FALSE,
# edge.color = , # could create custom function to utilize this argument
manifests = vn, reorder = FALSE)
curiousplot <- semPlot::semPaths(kstudent[[1]][[3]], what = "std", whatLabels = "no",
intercepts = FALSE, residuals = FALSE, thresholds = FALSE,
color = list(lat = palette.colors(n = 3, "Set 1")),
cut = .3, #posCol = c("#BF0000","#000000"), fade = FALSE,
# edge.color = , # could create custom function to utilize this argument
manifests = vn, reorder = FALSE)
curiousplot <- semPlot::semPaths(kstudent[[1]][[3]], what = "std", whatLabels = "no",
intercepts = FALSE, residuals = FALSE, thresholds = FALSE,
color = list(lat = palette.colors(n = 3, "Set 1")),
# cut = .3, posCol = c("#BF0000","#000000"),
fade = FALSE,
# edge.color = , # could create custom function to utilize this argument
manifests = vn, reorder = FALSE)
curiousplot <- semPlot::semPaths(kstudent[[1]][[3]], what = "std", whatLabels = "no",
intercepts = FALSE, residuals = FALSE, thresholds = FALSE,
color = list(lat = palette.colors(n = 3, "Set 1")),
# cut = .3, posCol = c("#BF0000","#000000"),
fade = TRUE,
# edge.color = , # could create custom function to utilize this argument
manifests = vn, reorder = FALSE)
curiousplot <- semPlot::semPaths(kstudent[[1]][[3]], what = "std", whatLabels = "no",
intercepts = FALSE, residuals = FALSE, thresholds = FALSE,
color = list(lat = palette.colors(n = 3, "Set 1")),
cut = .3, posCol = c("#BF0000","#000000"), fade = FALSE,
# edge.color = , # could create custom function to utilize this argument
weighted = TRUE, manifests = vn, reorder = FALSE)
curiousplot <- semPlot::semPaths(kstudent[[1]][[3]], what = "std", whatLabels = "no",
intercepts = FALSE, residuals = FALSE, thresholds = FALSE,
color = list(lat = palette.colors(n = 3, "Set 1")),
cut = .3, posCol = c("#BF0000","#000000"), fade = FALSE,
# edge.color = , # could create custom function to utilize this argument
weighted = TRUE, esize = 2,
manifests = vn, reorder = FALSE)
curiousplot <- semPlot::semPaths(kstudent[[1]][[3]], what = "std", whatLabels = "no",
intercepts = FALSE, residuals = FALSE, thresholds = FALSE,
color = list(lat = palette.colors(n = 3, "Set 1")),
cut = .3, posCol = c("#BF0000","#000000"), fade = FALSE,
# edge.color = , # could create custom function to utilize this argument
weighted = TRUE, esize = 4,
manifests = vn, reorder = FALSE)
curiousplot <- semPlot::semPaths(kstudent[[1]][[3]], what = "std", whatLabels = "no",
intercepts = FALSE, residuals = FALSE, thresholds = FALSE,
color = list(lat = palette.colors(n = 3, "Set 1")),
cut = .3, posCol = c("#BF0000","#000000"), fade = FALSE,
# edge.color = , # could create custom function to utilize this argument
weighted = TRUE, esize = 5,
manifests = vn, reorder = FALSE)
curiousplot <- semPlot::semPaths(kstudent[[1]][[3]], what = "std", whatLabels = "no",
layout = "circle",
intercepts = FALSE, residuals = FALSE, thresholds = FALSE,
color = list(lat = palette.colors(n = 3, "Set 1")),
cut = .3, posCol = c("#BF0000","#000000"), fade = FALSE,
# edge.color = , # could create custom function to utilize this argument
weighted = TRUE, esize = 5,
manifests = vn, reorder = FALSE)
curiousplot <- semPlot::semPaths(kstudent[[1]][[3]], what = "std", whatLabels = "no",
layout = "tree", negDashed = FALSE,
intercepts = FALSE, residuals = FALSE, thresholds = FALSE,
color = list(lat = palette.colors(n = 3, "Set 1")),
cut = .3, posCol = c("#BF0000","#000000"), fade = FALSE,
# edge.color = , # could create custom function to utilize this argument
weighted = TRUE, esize = 5,
manifests = vn, reorder = FALSE)
curiousplot <- semPlot::semPaths(kstudent[[1]][[3]], what = "std", whatLabels = "no",
layout = "tree", negDashed = TRUE,
intercepts = FALSE, residuals = FALSE, thresholds = FALSE,
color = list(lat = palette.colors(n = 3, "Set 1")),
cut = .3, posCol = c("#BF0000","#000000"), fade = FALSE,
# edge.color = , # could create custom function to utilize this argument
weighted = TRUE, esize = 5,
manifests = vn, reorder = FALSE)
palette.pals()
curiousplot <- semPlot::semPaths(kstudent[[1]][[3]], what = "std", whatLabels = "no",
layout = "tree", negDashed = TRUE,
intercepts = FALSE, residuals = FALSE, thresholds = FALSE,
color = list(lat = palette.colors(n = 3, "Okabe-Ito")),
cut = .3, posCol = c("#BF0000","#000000"), fade = FALSE,
# edge.color = , # could create custom function to utilize this argument
weighted = TRUE, esize = 5,
manifests = vn, reorder = FALSE)
curiousplot <- semPlot::semPaths(kstudent[[1]][[3]], what = "std", whatLabels = "no",
layout = "tree", negDashed = TRUE,
intercepts = FALSE, residuals = FALSE, thresholds = FALSE,
color = list(lat = palette.colors(n = 4, "Okabe-Ito")[-1]),
cut = .3, posCol = c("#BF0000","#000000"), fade = FALSE,
# edge.color = , # could create custom function to utilize this argument
weighted = TRUE, esize = 5,
manifests = vn, reorder = FALSE)
curiousplot <- semPlot::semPaths(kstudent[[1]][[3]], what = "std", whatLabels = "no",
layout = "tree", negDashed = TRUE,
intercepts = FALSE, residuals = FALSE, thresholds = FALSE,
color = list(lat = palette.colors(n = 4, palette = "Okabe-Ito",
recycle = TRUE)[-1]),
cut = .3, posCol = c("#BF0000","#000000"), fade = FALSE,
# edge.color = , # could create custom function to utilize this argument
weighted = TRUE, esize = 5,
manifests = vn, reorder = FALSE)
plot.settings <- list(what = "std", whatLabels = "no",
layout = "tree", negDashed = TRUE,
intercepts = FALSE, residuals = FALSE, thresholds = FALSE,
color = list(lat = palette.colors(n = 4, palette = "Okabe-Ito",
recycle = TRUE)[-1]),
cut = .3, posCol = c("#BF0000","#000000"), fade = FALSE,
# edge.color = , # could create custom function to utilize this argument
weighted = TRUE, esize = 5,
manifests = vnames, reorder = FALSE)
plot.settings <- list(what = "std", whatLabels = "no",
layout = "tree", negDashed = TRUE,
intercepts = FALSE, residuals = FALSE, thresholds = FALSE,
color = list(lat = palette.colors(n = 4, palette = "Okabe-Ito",
recycle = TRUE)[-1]),
cut = .3, posCol = c("#BF0000","#000000"), fade = FALSE,
# edge.color = , # could create custom function to utilize this argument
weighted = TRUE, esize = 5,
manifests = vn, reorder = FALSE)
?do.call
do.call("semPlot::semPaths", args = c(list(object = kstudent[[1]][[3]]), plot.settings))
do.call(semPlot::semPaths, args = c(list(object = kstudent[[1]][[3]]), plot.settings))
library(kfa)
# Run report
kfa_report(kstudent, report.title = "K-fold Factor Analysis - Lebenon Students",
file.name = "kfa_students")
cor.lv <- vector("list", k)
for(s in 1:k){
cor.lv[[s]] <- lavaan::lavInspect(kstudent[[s]][[m]], "cor.lv")
}
Reduce(`+`, cor.lv) / length(cor.lv)
coretest <- Reduce(`+`, cor.lv) / length(cor.lv)
class(coretest)
View(coretest)
lower.tri(coretest)
coretest <- coretest[lower.tri(coretest, diag = TRUE)]
coretest
as.matrix(coretest)
coretest[upper.tri(coretest, diag = FALSE)] <- NA
coretest
coretest <- Reduce(`+`, cor.lv) / length(cor.lv)
coretest[upper.tri(coretest, diag = FALSE)] <- NA
coretest
View(coretest)
# Run report
kfa_report(kstudent, report.title = "K-fold Factor Analysis - Lebenon Students",
file.name = "kfa_students")
#### Model Structure ####
# All items are included in the 1 factor model; only differences in loadings will occur across folds
allstructures <- vector("list", length = 4)
allstructures[[1]] <- data.frame(structure = efa_cfa_syntax(lavaan::lavInspect(kstudent[[1]][[1]], "est")$lambda),
folds = paste(1:k, collapse = ", "))
for(m in 2:4){
structures <- vector("list", length = k)
for(f in 1:k){
structures[[f]] <- efa_cfa_syntax(lavaan::lavInspect(kstudent[[f]][[m]], "est")$lambda)
}
us <- unique(unlist(structures, use.names = FALSE))
slist <- vector("list", length = length(us))
for(u in seq_along(us)){
folds <- which(unlist(lapply(structures, function(x) x == us[[u]])))
slist[[u]] <- list(structure = us[[u]],
folds = which(unlist(lapply(structures, function(x) x == us[[u]]))))
}
allstructures[[m]] <- slist
}
allstructures[[2]]
#### Model Structure ####
# All items are included in the 1 factor model; only differences in loadings will occur across folds
allstructures <- vector("list", length = 4)
allstructures[[1]] <- list(structure = efa_cfa_syntax(lavaan::lavInspect(kstudent[[1]][[1]], "est")$lambda),
folds = 1:k)
for(m in 2:4){
structures <- vector("list", length = k)
for(f in 1:k){
structures[[f]] <- efa_cfa_syntax(lavaan::lavInspect(kstudent[[f]][[m]], "est")$lambda)
}
us <- unique(unlist(structures, use.names = FALSE))
slist <- vector("list", length = length(us))
for(u in seq_along(us)){
folds <- which(unlist(lapply(structures, function(x) x == us[[u]])))
slist[[u]] <- list(structure = us[[u]],
folds = which(unlist(lapply(structures, function(x) x == us[[u]]))))
}
allstructures[[m]] <- slist
}
str(allstructures)
allstructures[[4]]
length(allstructures[[4]])
for(s in allstructures[[4]][[1]]){
print(s)
}
for(s in allstructures[[4]][[1]]$folds){
print(s)
}
# Run report
kfa_report(kstudent, report.title = "K-fold Factor Analysis - Lebenon Students",
file.name = "kfa_students")
allstructures[[1]]
allstructures[[1]][[1]]
paste(allstructures[[4]], collapse = ", ")
allstructures[[4]]
allstructures[[3]]
#### Model Structure ####
# All items are included in the 1 factor model; only differences in loadings will occur across folds
allstructures <- vector("list", length = 4)
allstructures[[1]][[1]] <- list(structure = efa_cfa_syntax(lavaan::lavInspect(kstudent[[1]][[1]], "est")$lambda),
folds = 1:k)
for(m in 2:4){
structures <- vector("list", length = k)
for(f in 1:k){
structures[[f]] <- efa_cfa_syntax(lavaan::lavInspect(kstudent[[f]][[m]], "est")$lambda)
}
us <- unique(unlist(structures, use.names = FALSE))
slist <- vector("list", length = length(us))
for(u in seq_along(us)){
folds <- which(unlist(lapply(structures, function(x) x == us[[u]])))
slist[[u]] <- list(structure = us[[u]],
folds = which(unlist(lapply(structures, function(x) x == us[[u]]))))
}
allstructures[[m]] <- slist
}
paste(allstructures[[3]][[1]], collapse = ", ")
paste(allstructures[[4]][[1]], collapse = ", ")
allstructures[[4]]
paste(allstructures[[4]][1], collapse = ", ")
allstructures[[4]][1]
allstructures[[1]][1]
paste(allstructures[[1]][1]$folds, collapse = ", ")
paste(allstructures[[4]][1]$folds, collapse = ", ")
paste(allstructures[[4]][[1]]$folds, collapse = ", ")
paste(allstructures[[1]][[1]]$folds, collapse = ", ")
#### Model Structure ####
# All items are included in the 1 factor model; only differences in loadings will occur across folds
allstructures <- vector("list", length = 4)
allstructures[[1]] <- list(structure = efa_cfa_syntax(lavaan::lavInspect(kstudent[[1]][[1]], "est")$lambda),
folds = 1:k)
for(m in 2:4){
structures <- vector("list", length = k)
for(f in 1:k){
structures[[f]] <- efa_cfa_syntax(lavaan::lavInspect(kstudent[[f]][[m]], "est")$lambda)
}
us <- unique(unlist(structures, use.names = FALSE))
slist <- vector("list", length = length(us))
for(u in seq_along(us)){
folds <- which(unlist(lapply(structures, function(x) x == us[[u]])))
slist[[u]] <- list(structure = us[[u]],
folds = which(unlist(lapply(structures, function(x) x == us[[u]]))))
}
allstructures[[m]] <- slist
}
paste(allstructures[[1]][[1]]$folds, collapse = ", ")
#### Model Structure ####
# All items are included in the 1 factor model; only differences in loadings will occur across folds
allstructures <- vector("list", length = 4)
allstructures[[1]][[1]] <- list(structure = efa_cfa_syntax(lavaan::lavInspect(kstudent[[1]][[1]], "est")$lambda),
folds = 1:k)
for(m in 2:4){
structures <- vector("list", length = k)
for(f in 1:k){
structures[[f]] <- efa_cfa_syntax(lavaan::lavInspect(kstudent[[f]][[m]], "est")$lambda)
}
us <- unique(unlist(structures, use.names = FALSE))
slist <- vector("list", length = length(us))
for(u in seq_along(us)){
folds <- which(unlist(lapply(structures, function(x) x == us[[u]])))
slist[[u]] <- list(structure = us[[u]],
folds = which(unlist(lapply(structures, function(x) x == us[[u]]))))
}
allstructures[[m]] <- slist
}
paste(allstructures[[1]][[1]]$folds, collapse = ", ")
# Run report
kfa_report(kstudent, report.title = "K-fold Factor Analysis - Lebenon Students",
file.name = "kfa_students")
# Run report
kfa_report(kstudent, report.title = "K-fold Factor Analysis - Lebenon Students",
file.name = "kfa_students")
roxygen2::roxygenize()
# Run report
kfa_report(kstudent, report.title = "K-fold Factor Analysis - Lebenon Students",
file.name = "kfa_students")
# Run report
kfa_report(kstudent, report.title = "K-fold Factor Analysis - Lebenon Students",
file.name = "kfa_students")
# Run report
kfa_report(kstudent, report.title = "K-fold Factor Analysis - Lebenon Students",
file.name = "kfa_students")
# Run report
kfa_report(kstudent, report.title = "K-fold Factor Analysis - Lebenon Students",
file.name = "kfa_students")
# Run report
kfa_report(kstudent, report.title = "K-fold Factor Analysis - Lebenon Students",
file.name = "kfa_students")
roxygen2::roxygenize()
# Run report
kfa_report(kstudent, report.title = "K-fold Factor Analysis - Lebenon Students",
file.name = "kfa_students")
