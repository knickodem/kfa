WLS.V = wlsv,
NACOV = nacov,
estimator = "DWLS",
parameterization = "delta",
se = "none",
test = "none")
## Do the matrix/sample stats and data method produce the same results
all.equal(lavaan::parameterestimates(matonly, se = FALSE, zstat = FALSE, pvalue = FALSE, ci = FALSE),
lavaan::parameterestimates(rs, se = FALSE, zstat = FALSE, pvalue = FALSE, ci = FALSE))
check <- dplyr::full_join(lavaan::parameterestimates(matonly, se = FALSE, zstat = FALSE, pvalue = FALSE, ci = FALSE),
lavaan::parameterestimates(dat, se = FALSE, zstat = FALSE, pvalue = FALSE, ci = FALSE),
by = c("lhs", "op", "rhs", "label"), suffix = c(".mat", ".dat"))
check <- dplyr::full_join(lavaan::parameterestimates(matonly, se = FALSE, zstat = FALSE, pvalue = FALSE, ci = FALSE),
lavaan::parameterestimates(rs, se = FALSE, zstat = FALSE, pvalue = FALSE, ci = FALSE),
by = c("lhs", "op", "rhs", "label"), suffix = c(".mat", ".rs"))
View(check)
## internal function for extracting standardized loadings
get_std_loadings <- function(object, type = "std.all"){
# extracting unrotated standardized results
params <- lavaan::standardizedsolution(object, type = type,
se = FALSE, zstat = FALSE, # Not needed so saves
pvalue = FALSE, ci = FALSE)# computation time
loaddf <- params[params$op == "=~",]
# loading matrix dimension names
inames <- unique(loaddf$rhs) # item names
fnames <- unique(loaddf$lhs) # factor names
# matrix of standardized factor loadings
loadmat <- matrix(loaddf$est.std,
ncol = length(fnames), nrow = length(inames),
byrow = FALSE, dimnames = list(inames, fnames))
return(loadmat)
}
all.equal(get_std_loadings(mat), get_std_loadings(rs)) # nope
all.equal(get_std_loadings(matonly), get_std_loadings(rs)) # nope
get_std_loadings(rs)
get_std_loadings(matonly)
lapply(list(matonly, rs),function(x) lavaan::lavInspect(x, "iterations"))
summary(rs, fit.measures = TRUE)
lavaan::summary(rs, fit.measures = TRUE)
?psych::fa
pfa <- psych::fa(r = cormat, nfactors = 3, n.obs = nobs, rotate = "none", covar = FALSE, fm = "wls")
pfa
write_efa <- function(nf, varNames){
syntax <- character(0)
for (i in seq_along(varNames)) {
syntax <- c(syntax, paste0("fac_", i, " =~ ", paste(varNames[i:length(varNames)], collapse = " + ")))
if (i == nf) break
}
syntax
}
write_efa(2, c("what", "ever", "more", "something"))
?mclapply
## Import data
student <- read.csv("C:/Users/kylenick/University of North Carolina at Chapel Hill/Halpin, Peter Francis - UNC_stat_projets/EFA&CFA/scaledim/student_survey-latest.csv")
# extract items
items <- student[ ,grepl("^a11", names(student))]
efa.mod <- write_efa(3, names(items))
cat(efa.mod)
write_efa <- function(nf, varNames){
syntax <- character(0)
for (i in seq_along(varNames)) {
syntax <- c(syntax, paste0("f", i, " =~ ", paste(varNames[i:length(varNames)], collapse = " + "), "\n"))
if (i == nf) break
}
syntax
}
efa.mod <- write_efa(3, names(items))
cat(efa.mod)
modtest <- lavaan::cfa(model = efa.mod,
sample.cov = cormat,
sample.nobs = nobs,
sample.mean = means,
sample.th = th,
WLS.V = wlsv,
NACOV = nacov,
std.lv = TRUE,
orthogonal = TRUE,
estimator = "DWLS",
parameterization = "delta",
se = "none")
prelim <- lavaan::lavCor(object = items,
ordered = names(items),
estimator = "DWLS",  # must specify estimator, otherwise defaults to none
missing = "pairwise",
meanstructure = TRUE,
output = "fit",
cor.smooth = FALSE)
modtest <- lavaan::cfa(model = efa.mod,
sample.cov = cormat,
sample.nobs = nobs,
sample.mean = means,
sample.th = th,
WLS.V = wlsv,
NACOV = nacov,
std.lv = TRUE,
orthogonal = TRUE,
estimator = "DWLS",
parameterization = "delta",
se = "none")
nobs <- lavaan::lavInspect(prelim, "nobs")
wlsv <- lavaan::lavInspect(prelim, "wls.v")
nacov <- lavaan::lavInspect(prelim, "gamma")
cormat <- lavaan::lavInspect(prelim, "sampstat")$cov # same as lavaan::lavInspect(prelim, "cor.ov")
means <- lavaan::lavInspect(prelim, "sampstat")$mean
th <- lavaan::lavInspect(prelim, "sampstat")$th # same values as lavaan::lavInspect(prelim, "est")$tau
attr(th, "th.idx") <- lavaan::lavInspect(prelim, "th.idx")
modtest <- lavaan::cfa(model = efa.mod,
sample.cov = cormat,
sample.nobs = nobs,
sample.mean = means,
sample.th = th,
WLS.V = wlsv,
NACOV = nacov,
std.lv = TRUE,
orthogonal = TRUE,
estimator = "DWLS",
parameterization = "delta",
se = "none")
lavaan::lavOptions(modtest, "sampstat")
lavaan::lavInspect(modtest, "sampstat")
lavaan::lavInspect(modtest, "est")
fatest <- psych::fa(cormat, 3, n.obs = nobs, rotate = "none")
fatest
## internal function for extracting standardized loadings
get_std_loadings <- function(object, type = "std.all"){
# extracting unrotated standardized results
params <- lavaan::standardizedsolution(object, type = type,
se = FALSE, zstat = FALSE, # Not needed so saves
pvalue = FALSE, ci = FALSE)# computation time
loaddf <- params[params$op == "=~",]
# loading matrix dimension names
inames <- unique(loaddf$rhs) # item names
fnames <- unique(loaddf$lhs) # factor names
# matrix of standardized factor loadings
loadmat <- matrix(loaddf$est.std,
ncol = length(fnames), nrow = length(inames),
byrow = FALSE, dimnames = list(inames, fnames))
return(loadmat)
}
modtestload <- get_std_loadings(modtest)
# extracting unrotated standardized results
params <- lavaan::standardizedsolution(modetest, type = type,
se = FALSE, zstat = FALSE, # Not needed so saves
pvalue = FALSE, ci = FALSE)# computation time
# extracting unrotated standardized results
params <- lavaan::standardizedsolution(modetest, type = "std.all",
se = FALSE, zstat = FALSE, # Not needed so saves
pvalue = FALSE, ci = FALSE)# computation time
modtestload <- get_std_loadings(object = modtest)
# extracting unrotated standardized results
params <- lavaan::standardizedsolution(modtest, type = "std.all",
se = FALSE, zstat = FALSE, # Not needed so saves
pvalue = FALSE, ci = FALSE)# computation time
loaddf <- params[params$op == "=~",]
View(loaddf)
# loading matrix dimension names
inames <- unique(loaddf$rhs) # item names
fnames <- unique(loaddf$lhs) # factor names
lavaan::lavInspect(modtest, "est")
lavaan::summary(modtest, standardized = TRUE)
modtestload <- lavaan::lavInspect(modtest, "est")$lambda
modtestload
matonly
fatest
# ----- Comparing model defined by semTools to model defined by regsem ------------
## Model from regsem
rs.mod <- regsem::efaModel(3, names(items))
rs.mod
dimnames(modtestload)
k_efa <- function(variables, m, rotation, threshold,
ordered, estimator, missing, ...){
## calculate and extract sample statistics
sampstats <- lavaan::lavCor(variables,
ordered = ordered,
estimator = estimator,
missing = missing,
output = "fit",
cor.smooth = FALSE,
...)
sample.nobs <- lavaan::lavInspect(sampstats, "nobs")
sample.cov <- lavaan::lavInspect(sampstats, "sampstat")$cov
sample.mean <- lavaan::lavInspect(sampstats, "sampstat")$mean
sample.th <- lavaan::lavInspect(sampstats, "sampstat")$th
attr(sample.th, "th.idx") <- lavaan::lavInspect(sampstats, "th.idx")
WLS.V <- lavaan::lavInspect(sampstats, "wls.v")
NACOV <- lavaan::lavInspect(sampstats, "gamma")
## Running EFAs (no need to run 1-factor b/c we already know the structure)
efa.loadings <- vector(mode = "list", length = m)
for(nf in 2:m){
## write efa syntax
efa.mod <- write_efa(nf = nf, vnames = names(variables))
unrotated <- lavaan::cfa(model = efa.mod,
sample.cov = sample.cov,
sample.nobs = sample.nobs,
sample.mean = sample.mean,
sample.th = sample.th,
WLS.V = WLS.V,
NACOV = NACOV,
std.lv = TRUE,
orthogonal = TRUE,
estimator = estimator,
parameterization = "delta",
se = "none",
test = "none")
# list of unrotated factor loadings
efa.loadings[[nf]] <- lavaan::lavInspect(unrotated, "est")$lambda
}
## if chosen, applying rotation to standardized factor loadings for models where m > 1
# oblique rotations
if(rotation %in% c("oblimin", "oblimax", "quartimin",
"targetQ", "pstQ", "simplimax",
"bentlerQ", "geominQ", "cfQ",
"infomaxQ", "bifactorQ")){
loadings <- lapply(efa.loadings[-1], function(x){
GPArotation::GPFoblq(x, method = rotation)$loadings
})
# orthogonal rotations
} else if(rotation %in% c("targetT", "pstT", "entropy","quartimax", "varimax",
"bentlerT", "tandemI", "tandemII",
"geominT", "cfT", "infomaxT",
"mccammon", "bifactorT")){
loadings <- lapply(efa.loadings[-1], function(x){
GPArotation::GPForth(x, method = rotation)$loadings
})
} else {
loadings <- efa.loadings[-1]
message("Reporting unrotated factor loadings")
}
# converting efa results to cfa syntax
cfa.syntax <- lapply(loadings, function(x){
efa_cfa_syntax(loadings = x,
simple = TRUE,
threshold = threshold,
single.item = "")
})
## adding the 1-factor model as first element in cfa syntax list
onefac <- paste0("f1 =~ ", paste(names(items), collapse = " + "))
cfa.syntax <- c(list(onefac), cfa.syntax)
return(cfa.syntax)
}
roxygen2::roxygenize()
library(kfa)
roxygen2::roxygenize()
kefa <- k_efa(variables = items,
m = 5,
rotation = "oblimin",
threshold = .2,
ordered = names(items),
estimator = "DWLS",
missing = "pairwise")
## Import data
student <- read.csv("C:/Users/kylenick/University of North Carolina at Chapel Hill/Halpin, Peter Francis - UNC_stat_projets/EFA&CFA/scaledim/student_survey-latest.csv")
# extract items
items <- student[ ,grepl("^a11", names(student))]
kefa <- k_efa(variables = items,
m = 5,
rotation = "oblimin",
threshold = .2,
ordered = names(items),
estimator = "DWLS",
missing = "pairwise")
roxygen2::roxygenize()
library(kfa)
## Import data
student <- read.csv("C:/Users/kylenick/University of North Carolina at Chapel Hill/Halpin, Peter Francis - UNC_stat_projets/EFA&CFA/scaledim/student_survey-latest.csv")
# extract items
items <- student[ ,grepl("^a11", names(student))]
kefa <- k_efa(variables = items,
m = 5,
rotation = "oblimin",
threshold = .2,
ordered = names(items),
estimator = "DWLS",
missing = "pairwise")
kefa
lapply(kefa, cat)
cat(kefa[[2]])
tictoc::tic()
kefa <- k_efa(variables = items,
m = 5,
rotation = "oblimin",
threshold = .2,
ordered = names(items),
estimator = "DWLS",
missing = "pairwise")
tictoc::toc()
kefa
lapply(kefa, length)
lapply(kefa, nchar)
kefa[lapply(kefa, nchar) > 0]
roxygen2::roxygenize()
library(kfa)
## Import data
student <- read.csv("C:/Users/kylenick/University of North Carolina at Chapel Hill/Halpin, Peter Francis - UNC_stat_projets/EFA&CFA/scaledim/student_survey-latest.csv")
# extract items
items <- student[ ,grepl("^a11", names(student))]
tictoc::tic()
kefa <- k_efa(variables = items,
m = 5,
rotation = "oblimin",
threshold = .2,
ordered = names(items),
estimator = "DWLS",
missing = "pairwise")
tictoc::toc()
tictoc::tic()
kefa <- k_efa(variables = items,
m = 5,
rotation = "oblimin",
ordered = names(items),
estimator = "DWLS",
missing = "pairwise")
tictoc::toc()
tictoc::tic()
ktest <- kfold_fa(variables = items,
k = NULL,
m = 5,
rotation = "oblimin",
ordered = names(items),
estimator = "DWLS",
missing = "pairwise")
tictoc::toc()
tictoc::tic()
## set seed to get the same folds
set.seed(936639)
ktest <- kfold_fa(variables = items,
k = NULL,
m = 5,
rotation = "oblimin",
ordered = names(items),
estimator = "DWLS",
missing = "pairwise")
tictoc::toc()
testfolds <- caret::createFolds(y = 1:nrow(items),
k = 5, list = TRUE,
returnTrain = FALSE)
check <- items[!c(testfolds[[1]]), ]
check <- items[c(testfolds[[1]]), ]
check <- items[!c(row.names(items) %in% testfolds[[1]]), ]
student <- read.csv("C:/Users/kylenick/University of North Carolina at Chapel Hill/Halpin, Peter Francis - UNC_stat_projets/EFA&CFA/scaledim/student_survey-latest.csv")
# extract items
items <- student[ ,grepl("^a11", names(student))]
tictoc::tic()
kefa <- k_efa(variables = items,
m = 5,
rotation = "oblimin",
ordered = names(items),
estimator = "DWLS",
missing = "pairwise")
tictoc::toc() # ~10 sec
library(kfa)
tictoc::tic()
## set seed to get the same folds
set.seed(936639)
ktest <- kfold_fa(variables = items,
k = NULL,
m = 5,
rotation = "oblimin",
ordered = names(items),
estimator = "DWLS",
missing = "pairwise")
tictoc::toc()
str(ktest)
length(ktest)
length(ktest[[1]])
lapply(ktest, length)
lapply(ktest, function(x) lavaan::fitmeasures(x[[1]])
)
lapply(ktest, function(x) lavaan::fitmeasures(x[[1]], c("cfi.scaled", "rmsea.scaled")))
lapply(ktest, function(x) lavaan::fitmeasures(x[[1]], c("cfi", "rmsea")))
library(kfa)
tictoc::tic()
## set seed to get the same folds
set.seed(936639)
ktest <- kfold_fa(variables = items,
k = NULL,
m = 5,
rotation = "oblimin",
ordered = TRUE,
estimator = "DWLS",
missing = "pairwise")
tictoc::toc()
library(kfa)
## Import data
student <- read.csv("C:/Users/kylenick/University of North Carolina at Chapel Hill/Halpin, Peter Francis - UNC_stat_projets/EFA&CFA/scaledim/student_survey-latest.csv")
teacher <- read.csv("C:/Users/kylenick/University of North Carolina at Chapel Hill/Halpin, Peter Francis - UNC_stat_projets/EFA&CFA/scaledim/teacher_survey-latest.csv")
principal <- read.csv("C:/Users/kylenick/University of North Carolina at Chapel Hill/Halpin, Peter Francis - UNC_stat_projets/EFA&CFA/scaledim/principal_survey-latest.csv")
coach <- read.csv("C:/Users/kylenick/University of North Carolina at Chapel Hill/Halpin, Peter Francis - UNC_stat_projets/EFA&CFA/scaledim/coach_survey-latest.csv")
lapply(list(student, teacher, principal, coach), names)
## Import data
student <- read.csv(paste0(shortfile, "scaledim/student_survey-latest.csv"))
shortfile <- c("C:/Users/kylenick/University of North Carolina at Chapel Hill/Halpin, Peter Francis - UNC_stat_projets/EFA&CFA/")
## Import data
student <- read.csv(paste0(shortfile, "scaledim/student_survey-latest.csv"))
teacher <- read.csv(paste0(shortfile, "scaledim/teacher_survey-latest.csv"))
principal <- read.csv(paste0(shortfile, "scaledim/principal_survey-latest.csv"))
coach <- read.csv(paste0(shortfile, "scaledim/coach_survey-latest.csv"))
?readxl::read_excel
## item map
itemmaps <- lapply(c("Coach_survey", "Teacher Survey",
"Principal Survey", "Student Survey"), function(x){
readxl::read_excel(paste0(shortfile, "Item construct map_2020_10_25.xlsx"),
sheet = x)})
## item map
itemmaps <- lapply(c("Coach_survey", "Teacher Survey",
"Principal Survey", "Student Survey"), function(x){
readxl::read_excel(paste0(shortfile, "Item construct map_2020_10_25.xlsx"),
sheet = x)})
names(itemmaps) <- c("coach", "teacher", "principal", "student")
itemmaps$coach
studentdf <- student[ ,names(student) %in% itemmaps$student$`Variable Name`]
itemmaps$student$`Variable Name`
## items for analysis
studentdf2 <- student[ ,grepl("^a11", names(student))]
names(student)
studentdf <- student[ ,names(student) %in% itemmaps$student$`Variable Name`]
## set seed to get the same folds
set.seed(936639)
tictoc::tic()
kstudent <- kfold_fa(variables = studentdf,
k = NULL,
m = 5,
rotation = "oblimin",
ordered = TRUE,
estimator = "DWLS",
missing = "pairwise")
library(kfa)
## set seed to get the same folds
set.seed(936639)
tictoc::tic()
kstudent <- kfold_fa(variables = studentdf,
k = NULL,
m = 5,
rotation = "oblimin",
ordered = TRUE,
estimator = "DWLS",
missing = "pairwise")
tictoc::toc() # < 100 seconds
?semTools::findRMSEAsamplesize
library(kfa)
## set seed to get the same folds
set.seed(936639)
tictoc::tic()
kstudent <- kfold_fa(variables = studentdf,
k = NULL,
m = 5,
rotation = "oblimin",
ordered = TRUE,
estimator = "DWLS",
missing = "pairwise")
tictoc::toc() # < 100 seconds
library(kfa)
## set seed to get the same folds
set.seed(936639)
tictoc::tic()
kstudent <- kfold_fa(variables = studentdf,
k = NULL,
m = 5,
rotation = "oblimin",
ordered = TRUE,
estimator = "DWLS",
missing = "pairwise")
tictoc::toc() # < 100 seconds
library(kfa)
set.seed(936639)
tictoc::tic()
kstudent <- kfold_fa(variables = studentdf,
k = NULL,
m = 5,
rotation = "oblimin",
ordered = TRUE,
estimator = "DWLS",
missing = "pairwise")
tictoc::toc() # < 100 seconds
library(kfa)
itemmaps$teacher$`Variable Name`
set.seed(936639)
tictoc::tic()
kstudent <- kfold_fa(variables = studentdf,
k = NULL,
m = 5,
rotation = "oblimin",
ordered = TRUE,
estimator = "DWLS",
missing = "pairwise")
tictoc::toc() # < 100 seconds
## items for analysis
studentdf <- student[ ,names(student) %in% na.omit(itemmaps$student$`Variable Name`)]
teacherdf <- teacher[ ,names(teacher) %in% na.omit(itemmaps$teacher$`Variable Name`)]
principaldf <- principal[ ,names(principal) %in% na.omit(itemmaps$principal$`Variable Name`)]
coachdf <- coach[ ,names(coach) %in% na.omit(itemmaps$coach$`Variable Name`)]
62/4
tictoc::tic()
kteacher <- kfold_fa(variables = teacherdf,
k = NULL,
m = 10,
rotation = "oblimin",
ordered = TRUE,
estimator = "DWLS",
missing = "pairwise")
tictoc::toc() # < 100 seconds
findk(teacherdf, m = 10)
findk(coachdf, m = 10)
df <- ((112 - 10)^2 - (112 + 10)) / 2
semTools::findRMSEAsamplesize(rmsea0 = .05, rmseaA = .08, df = df, ...)
semTools::findRMSEAsamplesize(rmsea0 = .05, rmseaA = .08, df = df)
df <- ((8027 - 5)^2 - (8027 + 5)) / 2
semTools::findRMSEAsamplesize(rmsea0 = .05, rmseaA = .08, df = df)
df <- ((21 - 5)^2 - (21 + 5)) / 2
semTools::findRMSEAsamplesize(rmsea0 = .05, rmseaA = .08, df = df)
semTools::findRMSEAsamplesize(rmsea0 = .00, rmseaA = .08, df = df)
semTools::findRMSEAsamplesize(rmsea0 = .00, rmseaA = .05, df = df)
