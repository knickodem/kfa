shortfile <- c("C:/Users/kylenick/University of North Carolina at Chapel Hill/Halpin, Peter Francis - UNC_stat_projets/EFA&CFA/")
student <- read.csv(paste0(shortfile, "scaledim/student_survey-latest.csv"))
teacher <- read.csv(paste0(shortfile, "scaledim/teacher_survey-latest.csv"))
principal <- read.csv(paste0(shortfile, "scaledim/principal_survey-latest.csv"))
coach <- read.csv(paste0(shortfile, "scaledim/coach_survey-latest.csv"))
## item map
itemmaps <- lapply(c("Coach_survey", "Teacher Survey",
"Principal Survey", "Student Survey"), function(x){
readxl::read_excel(paste0(shortfile, "Item construct map_2020_10_25.xlsx"),
sheet = x)})
names(itemmaps) <- c("coach", "teacher", "principal", "student")
## items for analysis
studentdf <- student[ ,names(student) %in% na.omit(itemmaps$student$`Variable Name`)]
teacherdf <- teacher[ ,names(teacher) %in% na.omit(itemmaps$teacher$`Variable Name`)]
principaldf <- principal[ ,names(principal) %in% na.omit(itemmaps$principal$`Variable Name`)]
coachdf <- coach[ ,names(coach) %in% na.omit(itemmaps$coach$`Variable Name`)]
# ---- test full kfold_fa function ----------------
## custom factor structure (just an example, not based on theory)
custom2 <- paste0("f1 =~ ", paste(names(studentdf)[1:10], collapse = " + "),
"\nf2 =~ ",paste(names(studentdf)[11:21], collapse = " + "))
custom3 <- paste0("f1 =~ ", paste(names(studentdf)[1:2], collapse = " + "),
"\nf2 =~ ",paste(names(studentdf)[3:4], collapse = " + "),
"\nf3 =~ ",paste(names(studentdf)[5:6], collapse = " + "),
"\nf4 =~ ",paste(names(studentdf)[7:8], collapse = " + "),
"\nf5 =~ ",paste(names(studentdf)[9:10], collapse = " + "),
"\nf6 =~ ",paste(names(studentdf)[11:12], collapse = " + "),
"\nf7 =~ ",paste(names(studentdf)[13:21], collapse = " + "),
"\na1101x ~~ ", paste(names(studentdf)[2:21], collapse = " + "),
"\na1102x ~~ ", paste(names(studentdf)[3:21], collapse = " + "))
# When custom model does not contain all items, the following error is currently produced:
# Error in { : task 1 failed - "invalid 'times' argument"
# set.seed(936639) # set seed to reproduce same folds
tictoc::tic()
kstudent <- kfa(variables = studentdf,
k = NULL,
m = 5,
seed = 936639,
custom.cfas = list(`Custom 2f` = custom2, Break = custom3),
rotation = "oblimin",
ordered = TRUE,
estimator = "DWLS",
missing = "pairwise")
tictoc::toc()# ~ 60 seconds
tictoc::tic()
cors <- agg_cors(kstudent)
tictoc::toc() #.04
tictoc::tic()
loads <- agg_loadings(kstudent)
tictoc::toc() #.16
tictoc::tic()
rels <- agg_rels(kstudent)
tictoc::toc() #74.9
# Run report
kfa_report(kstudent,
file.name = "kfa_students_test",
report.title = "K-fold Factor Analysis - Lebanon Students")
semTools::reliability(cfas[[1]][[mnames[[1]]]])
cfas <- models$cfas
models <- kstudent
index = c("chisq", "cfi", "rmsea")
load.flag = .30
cor.flag = .90
rel.flag = .60
digits = 2
flag <- .3
cfas <- models$cfas
## analysis summary info
k <- length(cfas) # number of folds
m <- max(unlist(lapply(cfas, length))) # number of models per fold (includes both efa AND custom structures); m == length(mnames)
mnames <- models$model.names # model names
fac.allow <- length(models$efa.structures)
fac.max <- max(as.numeric(substring(mnames[grepl("-factor", mnames)], 1, 1)))  # kfa naming convention "#-factor"; custom functions are assumed to have different convention
vnames <- dimnames(lavaan::lavInspect(cfas[[1]][[1]], "sampstat")$cov)[[1]] # variable names
nvars <- length(vnames)
nobs <- sum(unlist(lapply(cfas, function(x) lavaan::lavInspect(x[[1]], "nobs"))))
opts <- lavaan::lavInspect(cfas[[1]][[1]], "options") # estimation options; assumed to be the same for all models
## factor correlations
kcorrs <- agg_cors(models, flag = cor.flag)
## score reliabilities
krels <- agg_rels(models, flag = rel.flag, digits = digits)
t(suppressMessages(semTools::reliability(cfas[[1]][[mnames[[1]]]])[c(1,4),]))
semTools::reliability(cfas[[1]][[mnames[[1]]]])
what= c("alpha", "omega3")
semTools::reliability(cfas[[1]][[mnames[[1]]]], what = "omega3")
semTools::reliability(cfas[[1]][[mnames[[1]]]], what = "alpha")
?try
?inherits
models <- example
index = c("chisq", "cfi", "rmsea")
load.flag = .30
cor.flag = .90
rel.flag = .60
digits = 2
flag <- .3
cfas <- models$cfas
## analysis summary info
k <- length(cfas) # number of folds
m <- max(unlist(lapply(cfas, length))) # number of models per fold (includes both efa AND custom structures); m == length(mnames)
mnames <- models$model.names # model names
fac.allow <- length(models$efa.structures)
fac.max <- max(as.numeric(substring(mnames[grepl("-factor", mnames)], 1, 1)))  # kfa naming convention "#-factor"; custom functions are assumed to have different convention
vnames <- dimnames(lavaan::lavInspect(cfas[[1]][[1]], "sampstat")$cov)[[1]] # variable names
nvars <- length(vnames)
nobs <- sum(unlist(lapply(cfas, function(x) lavaan::lavInspect(x[[1]], "nobs"))))
opts <- lavaan::lavInspect(cfas[[1]][[1]], "options") # estimation options; assumed to be the same for all models
t(suppressMessages(semTools::reliability(cfas[[1]][[mnames[[1]]]], what = c("alpha", "omega3")))
)
suppressMessages(semTools::reliability(cfas[[1]][[mnames[[1]]]], what = c("alpha", "omega3")))
lavaan::lavInspect(example$cfas[[1]]$`1-factor`, "categorical")
lavaan::lavInspect(kstudent$cfas[[1]]$`1-factor`, "categorical")
psych::fisherz()
psych::fisherz
psych::fisherz2r
r2z <- function(r){
0.5 * log((1 + r)/(1 - r))
}
z2r <- function(z){
(exp(2 * z) - 1)/(1 + exp(2 * z))
}
cfas <- models$cfas
mnames <- models$model.names # model names
m <- length(mnames)
k <- length(cfas)
kcorrs <- vector("list", m)
kflag <- vector("integer", m)
# Currently assumes the first element is a 1 factor model; need a more robust check
kcorrs[[1]] <- NULL
kflag[[1]] <- NA
n <- 2
f <- 1
cor.lv <- vector("list", k) # latent variable correlation matrix
cor.flag <- vector("list", k) # count of correlations above flag threshold
for(f in 1:k){
if(mnames[[n]] %in% names(cfas[[f]])){
cor.lv[[f]] <- lavaan::lavInspect(cfas[[f]][[mnames[[n]]]], "cor.lv")
cor.flag[[f]] <- rowSums(cor.lv[[f]] > flag) - 1 # minus diagonal which will always be TRUE
}
}
## count of folds with a correlation over flag threshold
fc <- unlist(cor.flag)
cflag <- tapply(fc, names(fc), function(x) sum(x > 0)) # for each factor
kflag[[n]] <- sum(unlist(lapply(cor.flag, sum)) > 0)      # for the model
cor.lv
kflag
cflag
## mean correlation across folds
cor.lv <- cor.lv[lengths(cor.lv) != 0] # removes NULL elements for folds were model was not run
cor.lv[[1]]
r2z(cor.lv[[1]])
r2z(.99)
r2z(0)
z2r(Inf)
Reduce(`+`, r2z(cor.lv))
r2z(cor.lv)
lapply(cor.lv, r2z)
Reduce(`+`, lapply(cor.lv, r2z))
Reduce(`+`, lapply(cor.lv, r2z)) / length(cor.lv)
aggcorrs <- Reduce(`+`, lapply(cor.lv, r2z)) / length(cor.lv)
z2r(aggcorrs)
cor.lv
Reduce(`+`, cor.lv) / length(cor.lv)
aggcorrs
diag(aggcors) <- 1
diag(aggcorrs) <- 1
aggcorrs
cfas <- models$cfas
mnames <- models$model.names # model names
m <- length(mnames) #max(unlist(lapply(cfas, length))) # maximum number of models per fold
k <- length(cfas) # number of folds
what <- if(lavaan::lavInspect(cfas[[1]][[1]], "categorical")) "omega3" else c("alpha", "omega3")
krels <- vector("list", m)
kflag <- vector("integer", m)
for(n in 1:m){
rel.flag <- vector("integer", k)
for(f in 1:k){
if(mnames[[n]] %in% names(cfas[[f]])){
rels[[f]] <- t(suppressMessages(semTools::reliability(cfas[[f]][[mnames[[n]]]], what = what))
rel.flag[[f]] <- sum(rels[[f]][,2] < flag) # flag based on omega, not alpha
}
}
## mean reliability across folds
aos <- do.call("rbind", rels)
if(n == 1){
fn <- "f1"
fnames <- rep(fn, nrow(aos))
} else{
rels <- rels[lengths(rels) != 0] # removes NULL elements for folds were model was not run
fn <- dimnames(rels[[1]])[[1]]  # grabs unique factor names from first fold; should be the same in all folds
fnames <- dimnames(aos)[[1]] # should be the equivalent of rep(fn, nrow(aos))
}
krels[[n]] <- data.frame(factor = fn,
o.mean = tapply(aos[, 2], fnames, mean),
o.range = paste(format(round(tapply(aos[, 2], fnames, min), digits = digits), nsmall = digits), "-",
format(round(tapply(aos[, 2], fnames, max), digits = digits), nsmall = digits)),
o.flag = tapply(aos[, 2], fnames, function(x) sum(x < flag)),
a.mean = tapply(aos[, 1], fnames, mean),
a.range = paste(format(round(tapply(aos[, 1], fnames, min), digits = digits), nsmall = digits), "-",
format(round(tapply(aos[, 1], fnames, max), digits = digits), nsmall = digits)),
a.flag = tapply(aos[, 1], fnames, function(x) sum(x < flag)))
## count of folds with a reliabilities below flag threshold
kflag[[n]] <- sum(rel.flag > 0)
}
names(krels) <- mnames
names(kflag) <- mnames
krels <- vector("list", m)
kflag <- vector("integer", m)
for(n in 1:m){
rels <- vector("list", k)
rel.flag <- vector("integer", k)
for(f in 1:k){
if(mnames[[n]] %in% names(cfas[[f]])){
rels[[f]] <- t(suppressMessages(semTools::reliability(cfas[[f]][[mnames[[n]]]], what = what)))
rel.flag[[f]] <- sum(rels[[f]][,2] < flag) # flag based on omega, not alpha
}
}
## mean reliability across folds
aos <- do.call("rbind", rels)
if(n == 1){
fn <- "f1"
fnames <- rep(fn, nrow(aos))
} else{
rels <- rels[lengths(rels) != 0] # removes NULL elements for folds were model was not run
fn <- dimnames(rels[[1]])[[1]]  # grabs unique factor names from first fold; should be the same in all folds
fnames <- dimnames(aos)[[1]] # should be the equivalent of rep(fn, nrow(aos))
}
krels[[n]] <- data.frame(factor = fn,
o.mean = tapply(aos[, 2], fnames, mean),
o.range = paste(format(round(tapply(aos[, 2], fnames, min), digits = digits), nsmall = digits), "-",
format(round(tapply(aos[, 2], fnames, max), digits = digits), nsmall = digits)),
o.flag = tapply(aos[, 2], fnames, function(x) sum(x < flag)),
a.mean = tapply(aos[, 1], fnames, mean),
a.range = paste(format(round(tapply(aos[, 1], fnames, min), digits = digits), nsmall = digits), "-",
format(round(tapply(aos[, 1], fnames, max), digits = digits), nsmall = digits)),
a.flag = tapply(aos[, 1], fnames, function(x) sum(x < flag)))
## count of folds with a reliabilities below flag threshold
kflag[[n]] <- sum(rel.flag > 0)
}
krels
names(krels) <- mnames
names(kflag) <- mnames
models <- kstudent
cfas <- models$cfas
mnames <- models$model.names # model names
m <- length(mnames) #max(unlist(lapply(cfas, length))) # maximum number of models per fold
k <- length(cfas) # number of folds
what <- if(lavaan::lavInspect(cfas[[1]][[1]], "categorical")) "omega3" else c("alpha", "omega3")
krels <- vector("list", m)
kflag <- vector("integer", m)
for(n in 1:m){
rels <- vector("list", k)
rel.flag <- vector("integer", k)
for(f in 1:k){
if(mnames[[n]] %in% names(cfas[[f]])){
rels[[f]] <- t(suppressMessages(semTools::reliability(cfas[[f]][[mnames[[n]]]], what = what)))
rel.flag[[f]] <- sum(rels[[f]][,2] < flag) # flag based on omega, not alpha
}
}
## mean reliability across folds
aos <- do.call("rbind", rels)
if(n == 1){
fn <- "f1"
fnames <- rep(fn, nrow(aos))
} else{
rels <- rels[lengths(rels) != 0] # removes NULL elements for folds were model was not run
fn <- dimnames(rels[[1]])[[1]]  # grabs unique factor names from first fold; should be the same in all folds
fnames <- dimnames(aos)[[1]] # should be the equivalent of rep(fn, nrow(aos))
}
krels[[n]] <- data.frame(factor = fn,
o.mean = tapply(aos[, 2], fnames, mean),
o.range = paste(format(round(tapply(aos[, 2], fnames, min), digits = digits), nsmall = digits), "-",
format(round(tapply(aos[, 2], fnames, max), digits = digits), nsmall = digits)),
o.flag = tapply(aos[, 2], fnames, function(x) sum(x < flag)),
a.mean = tapply(aos[, 1], fnames, mean),
a.range = paste(format(round(tapply(aos[, 1], fnames, min), digits = digits), nsmall = digits), "-",
format(round(tapply(aos[, 1], fnames, max), digits = digits), nsmall = digits)),
a.flag = tapply(aos[, 1], fnames, function(x) sum(x < flag)))
## count of folds with a reliabilities below flag threshold
kflag[[n]] <- sum(rel.flag > 0)
}
for(w in 1:length(what){
test <- data.frame(mean = tapply(aos[, w], fnames, mean),
range = paste(format(round(tapply(aos[, w], fnames, min), digits = digits), nsmall = digits), "-",
format(round(tapply(aos[, w], fnames, max), digits = digits), nsmall = digits)),
flag = tapply(aos[, w], fnames, function(x) sum(x < flag)))
names(test) <- paste(what[[w]], names(test), sep = ".")
}
krels[[n]] <- data.frame(factor = fn,
o.mean = tapply(aos[, 2], fnames, mean),
o.range = paste(format(round(tapply(aos[, 2], fnames, min), digits = digits), nsmall = digits), "-",
format(round(tapply(aos[, 2], fnames, max), digits = digits), nsmall = digits)),
o.flag = tapply(aos[, 2], fnames, function(x) sum(x < flag)),
a.mean = tapply(aos[, 1], fnames, mean),
a.range = paste(format(round(tapply(aos[, 1], fnames, min), digits = digits), nsmall = digits), "-",
format(round(tapply(aos[, 1], fnames, max), digits = digits), nsmall = digits)),
a.flag = tapply(aos[, 1], fnames, function(x) sum(x < flag)))
## count of folds with a reliabilities below flag threshold
kflag[[n]] <- sum(rel.flag > 0)
}
names(krels) <- mnames
names(kflag) <- mnames
for(w in 1:length(what){
test <- data.frame(mean = tapply(aos[, w], fnames, mean),
range = paste(format(round(tapply(aos[, w], fnames, min), digits = digits), nsmall = digits), "-",
format(round(tapply(aos[, w], fnames, max), digits = digits), nsmall = digits)),
flag = tapply(aos[, w], fnames, function(x) sum(x < flag)))
names(test) <- paste(what[[w]], names(test), sep = ".")
}
aos
fnames
cfas <- models$cfas
mnames <- models$model.names # model names
m <- length(mnames) #max(unlist(lapply(cfas, length))) # maximum number of models per fold
k <- length(cfas) # number of folds
what <- if(lavaan::lavInspect(cfas[[1]][[1]], "categorical")) "omega3" else c("omega3", "alpha")
krels <- vector("list", m)
kflag <- vector("integer", m)
for(n in 1:m){
}
krels <- vector("list", m)
kflag <- vector("integer", m)
n <- 2
rels <- vector("list", k)
rel.flag <- vector("integer", k)
for(f in 1:k){
if(mnames[[n]] %in% names(cfas[[f]])){
rels[[f]] <- t(suppressMessages(semTools::reliability(cfas[[f]][[mnames[[n]]]], what = what)))
rel.flag[[f]] <- sum(rels[[f]][,2] < flag) # flag based on omega, not alpha
}
}
rels <- vector("list", k)
rel.flag <- vector("integer", k)
for(f in 1:k){
if(mnames[[n]] %in% names(cfas[[f]])){
rels[[f]] <- t(suppressMessages(semTools::reliability(cfas[[f]][[mnames[[n]]]], what = what)))
rel.flag[[f]] <- sum(rels[[f]][,"omega3"] < flag) # flag based on omega, not alpha
}
}
rel.flag
rels
flag <- .6
rels <- vector("list", k)
rel.flag <- vector("integer", k)
for(f in 1:k){
if(mnames[[n]] %in% names(cfas[[f]])){
rels[[f]] <- t(suppressMessages(semTools::reliability(cfas[[f]][[mnames[[n]]]], what = what)))
rel.flag[[f]] <- sum(rels[[f]][,"omega3"] < flag) # flag based on omega, not alpha
}
}
rel.flag
rels
## mean reliability across folds
aos <- do.call("rbind", rels)
if(n == 1){
fn <- "f1"
fnames <- rep(fn, nrow(aos))
} else{
rels <- rels[lengths(rels) != 0] # removes NULL elements for folds were model was not run
fn <- dimnames(rels[[1]])[[1]]  # grabs unique factor names from first fold; should be the same in all folds
fnames <- dimnames(aos)[[1]] # should be the equivalent of rep(fn, nrow(aos))
}
rels
fn
fnames
aos
for(w in 1:length(what){
test <- data.frame(mean = tapply(aos[, w], fnames, mean),
range = paste(format(round(tapply(aos[, w], fnames, min), digits = digits), nsmall = digits), "-",
format(round(tapply(aos[, w], fnames, max), digits = digits), nsmall = digits)),
flag = tapply(aos[, w], fnames, function(x) sum(x < flag)))
names(test) <- paste(what[[w]], names(test), sep = ".")
}
krels[[n]] <- data.frame(factor = fn,
o.mean = tapply(aos[, 2], fnames, mean),
o.range = paste(format(round(tapply(aos[, 2], fnames, min), digits = digits), nsmall = digits), "-",
format(round(tapply(aos[, 2], fnames, max), digits = digits), nsmall = digits)),
o.flag = tapply(aos[, 2], fnames, function(x) sum(x < flag)),
a.mean = tapply(aos[, 1], fnames, mean),
a.range = paste(format(round(tapply(aos[, 1], fnames, min), digits = digits), nsmall = digits), "-",
format(round(tapply(aos[, 1], fnames, max), digits = digits), nsmall = digits)),
a.flag = tapply(aos[, 1], fnames, function(x) sum(x < flag)))
## count of folds with a reliabilities below flag threshold
kflag[[n]] <- sum(rel.flag > 0)
}
names(krels) <- mnames
names(kflag) <- mnames
for(w in 1:length(what)){
test <- data.frame(mean = tapply(aos[, w], fnames, mean),
range = paste(format(round(tapply(aos[, w], fnames, min), digits = digits), nsmall = digits), "-",
format(round(tapply(aos[, w], fnames, max), digits = digits), nsmall = digits)),
flag = tapply(aos[, w], fnames, function(x) sum(x < flag)))
names(test) <- paste(what[[w]], names(test), sep = ".")
}
test
models <- example
index = c("chisq", "cfi", "rmsea")
cfas <- models$cfas
mnames <- models$model.names # model names
m <- length(mnames) #max(unlist(lapply(cfas, length))) # maximum number of models per fold
k <- length(cfas) # number of folds
what <- if(lavaan::lavInspect(cfas[[1]][[1]], "categorical")) "omega3" else c("omega3", "alpha")
krels <- vector("list", m)
rels <- vector("list", k)
rel.flag <- vector("integer", k)
for(f in 1:k){
if(mnames[[n]] %in% names(cfas[[f]])){
rels[[f]] <- t(suppressMessages(semTools::reliability(cfas[[f]][[mnames[[n]]]], what = what)))
rel.flag[[f]] <- sum(rels[[f]][,"omega3"] < flag) # flag based on omega, not alpha
}
}
## mean reliability across folds
aos <- do.call("rbind", rels)
if(n == 1){
fn <- "f1"
fnames <- rep(fn, nrow(aos))
} else{
rels <- rels[lengths(rels) != 0] # removes NULL elements for folds were model was not run
fn <- dimnames(rels[[1]])[[1]]  # grabs unique factor names from first fold; should be the same in all folds
fnames <- dimnames(aos)[[1]] # should be the equivalent of rep(fn, nrow(aos))
}
aos
rdf <- data.frame(factor = fn)
for(w in 1:length(what)){
test <- data.frame(mean = tapply(aos[, w], fnames, mean),
range = paste(format(round(tapply(aos[, w], fnames, min), digits = digits), nsmall = digits), "-",
format(round(tapply(aos[, w], fnames, max), digits = digits), nsmall = digits)),
flag = tapply(aos[, w], fnames, function(x) sum(x < flag)))
names(test) <- paste(what[[w]], names(test), sep = ".")
rdf <- cbind(rdf, test)
}
rdf
rel.flag
library(kfa)
#### Import data ####
shortfile <- c("C:/Users/kylenick/University of North Carolina at Chapel Hill/Halpin, Peter Francis - UNC_stat_projets/EFA&CFA/")
student <- read.csv(paste0(shortfile, "scaledim/student_survey-latest.csv"))
teacher <- read.csv(paste0(shortfile, "scaledim/teacher_survey-latest.csv"))
principal <- read.csv(paste0(shortfile, "scaledim/principal_survey-latest.csv"))
coach <- read.csv(paste0(shortfile, "scaledim/coach_survey-latest.csv"))
## item map
itemmaps <- lapply(c("Coach_survey", "Teacher Survey",
"Principal Survey", "Student Survey"), function(x){
readxl::read_excel(paste0(shortfile, "Item construct map_2020_10_25.xlsx"),
sheet = x)})
names(itemmaps) <- c("coach", "teacher", "principal", "student")
## items for analysis
studentdf <- student[ ,names(student) %in% na.omit(itemmaps$student$`Variable Name`)]
teacherdf <- teacher[ ,names(teacher) %in% na.omit(itemmaps$teacher$`Variable Name`)]
principaldf <- principal[ ,names(principal) %in% na.omit(itemmaps$principal$`Variable Name`)]
coachdf <- coach[ ,names(coach) %in% na.omit(itemmaps$coach$`Variable Name`)]
# ---- test full kfold_fa function ----------------
## custom factor structure (just an example, not based on theory)
custom2 <- paste0("f1 =~ ", paste(names(studentdf)[1:10], collapse = " + "),
"\nf2 =~ ",paste(names(studentdf)[11:21], collapse = " + "))
custom3 <- paste0("f1 =~ ", paste(names(studentdf)[1:2], collapse = " + "),
"\nf2 =~ ",paste(names(studentdf)[3:4], collapse = " + "),
"\nf3 =~ ",paste(names(studentdf)[5:6], collapse = " + "),
"\nf4 =~ ",paste(names(studentdf)[7:8], collapse = " + "),
"\nf5 =~ ",paste(names(studentdf)[9:10], collapse = " + "),
"\nf6 =~ ",paste(names(studentdf)[11:12], collapse = " + "),
"\nf7 =~ ",paste(names(studentdf)[13:21], collapse = " + "),
"\na1101x ~~ ", paste(names(studentdf)[2:21], collapse = " + "),
"\na1102x ~~ ", paste(names(studentdf)[3:21], collapse = " + "))
# When custom model does not contain all items, the following error is currently produced:
# Error in { : task 1 failed - "invalid 'times' argument"
# set.seed(936639) # set seed to reproduce same folds
tictoc::tic()
kstudent <- kfa(variables = studentdf,
k = NULL,
m = 5,
seed = 936639,
custom.cfas = list(`Custom 2f` = custom2, Break = custom3),
rotation = "oblimin",
ordered = TRUE,
estimator = "DWLS",
missing = "pairwise")
tictoc::toc()# ~ 60 seconds
data("AmzBoxes")
BoxList <- GenerateBoxData (XYZ = AmzBoxes[,2:4],
BoxStudy = 20,
Reliability = .75,
ModApproxErrVar = .10,
SampleSize = 900,
NMinorFac = 50,
epsTKL = .20,
Seed = 1161,
SeedErrorFactors = 1611,
SeedMinorFactors = 6111,
PRINT = FALSE,
LB = FALSE,
LBVal = 1,
Constant = 0)
sim.boxes <- BoxList$BoxDataEME
box2 <- paste0("b1 =~ ", paste(colnames(sim.boxes)[1:10], collapse = " + "),
"\nb2 =~ ",paste(colnames(sim.boxes)[11:20], collapse = " + "))
tictoc::tic()
example <- kfa(variables = sim.boxes,
k = NULL, # prompts power analysis to determine number of folds
custom.cfas = box2)
tictoc::toc()
# Run report
kfa_report(kstudent,
file.name = "kfa_students_test",
report.title = "K-fold Factor Analysis - Lebanon Students")
kfa_report(example, file.name = "example_kfa_report",
report.format = "html_document",
report.title = "K-fold Factor Analysis - Example")
library(kfa)
# Run report
kfa_report(kstudent,
file.name = "kfa_students_test",
report.title = "K-fold Factor Analysis - Lebanon Students")
roxygen2::roxygenise()
