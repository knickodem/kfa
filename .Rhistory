pvalue = FALSE, ci = FALSE),
op == "~~" & lhs == rhs & est < 0)))
}
heywood <- integer(length = m)
for(n in 1:m){
heywood[[n]] <- sum(unlist(lapply(hey, '[[', n)) > 0)
}
heywood
# heywood cases - see sources of strength code
lavaan::lavInspect(kstudent[[1]][[1]], "post.check") # when there is a problem, what is returned? FALSE or the warning?
# heywood cases - see sources of strength code
lavaan::lavInspect(kstudent$cfas[[1]][[1]], "post.check") # when there is a problem, what is returned? FALSE or the warning?
sum(lavaan::lavInspect(kstudent$cfas[[1]][[4]], "cov.lv") < 0)
lavaan::lavInspect(kstudent$cfas[[1]][[4]], "cov.lv")
lavaan::lavInspect(kstudent$cfas[[1]][[4]], "cor.lv")
sum(lavaan::lavInspect(kstudent$cfas[[1]][[4]], "cor.lv") > .90)
sum(lavaan::lavInspect(kstudent$cfas[[1]][[4]], "cor.lv") > .90) - m
cor.lv <- lavaan::lavInspect(kstudent$cfas[[1]][[4]], "cor.lv")
sum(cor.lv > .90 - nrow(cor.lv))
sum(sum(cor.lv > .90) - nrow(cor.lv))
sum(cor.lv > .90) - nrow(cor.lv)
eigen(lavInspect(kstudent$cfas[[1]][[4]], "vcov"), only.values = TRUE)
eigen(lavaan::lavInspect(kstudent$cfas[[1]][[4]], "vcov"), only.values = TRUE)
sum(eigen(lavaan::lavInspect(kstudent$cfas[[1]][[4]], "vcov"), only.values = TRUE) < 0)
sum(eigen(lavaan::lavInspect(kstudent$cfas[[1]][[4]], "vcov"), only.values = TRUE)$values < 0)
lavaan::lavInspect(kstudent$cfas[[1]][[4]], "vcov")
View(lavaan::lavInspect(kstudent$cfas[[1]][[4]], "vcov"))
View(round(lavaan::lavInspect(kstudent$cfas[[1]][[4]], "vcov"), 3))
subset(lavaan::parameterestimates(kstudent$cfas[[1]][[4]], standardized = FALSE,
se = FALSE, zstat = FALSE,
pvalue = FALSE, ci = FALSE), op == "~~" & lhs == rhs)
lavaan::lavInspect(kstudent$cfas[[1]][[4]], "theta")
library(kfa)
agg_fac_cor(kstudent)
cor.lv <- lavaan::lavInspect(kstudent$cfas[[1]][[1]], "cor.lv")
cor.lv
test <- semTools::reliability(kstudent$cfas[[1]][[4]])
str(test)
test
test[c(1,4),] <- semTools::reliability(kstudent$cfas[[1]][[4]])
test <- semTools::reliability(kstudent$cfas[[1]][[4]])[c(1,4),]
test
sum(test[2,] < .60)
roxygen2::roxygenize()
?data.frame
cor.lv <- lavaan::lavInspect(kstudent$cfas[[1]][[1]], "residuals")
cor.lv
lavaan::lavInspect(kstudent$cfas[[1]][[1]], "theta")
cor.lv <- lavaan::lavInspect(kstudent$cfas[[1]][[1]], "fitted")
cor.lv
cor.lv <- lavaan::lavInspect(kstudent$cfas[[1]][[1]], "psi")
cor.lv <- lavaan::lavInspect(kstudent$cfas[[1]][[1]], "est")
cor.lv
roxygen2::roxygenise()
roxygen2::roxygenise()
# Run report
kfa_report(kstudent, file.name = "kfa_students",
report.format = "word_document",
report.title = "K-fold Factor Analysis - Lebenon Students")
library(kfa)
# Run report
kfa_report(kstudent, file.name = "kfa_students",
report.format = "word_document",
report.title = "K-fold Factor Analysis - Lebenon Students")
library(kfa)
# Run report
kfa_report(kstudent, file.name = "kfa_students",
report.format = "word_document",
report.title = "K-fold Factor Analysis - Lebenon Students")
library(kfa)
# Run report
kfa_report(kstudent, file.name = "kfa_students",
report.format = "word_document",
report.title = "K-fold Factor Analysis - Lebenon Students")
library(kfa)
#### Import data ####
shortfile <- c("C:/Users/kylenick/University of North Carolina at Chapel Hill/Halpin, Peter Francis - UNC_stat_projets/EFA&CFA/")
student <- read.csv(paste0(shortfile, "scaledim/student_survey-latest.csv"))
teacher <- read.csv(paste0(shortfile, "scaledim/teacher_survey-latest.csv"))
principal <- read.csv(paste0(shortfile, "scaledim/principal_survey-latest.csv"))
coach <- read.csv(paste0(shortfile, "scaledim/coach_survey-latest.csv"))
## item map
itemmaps <- lapply(c("Coach_survey", "Teacher Survey",
"Principal Survey", "Student Survey"), function(x){
readxl::read_excel(paste0(shortfile, "Item construct map_2020_10_25.xlsx"),
sheet = x)})
names(itemmaps) <- c("coach", "teacher", "principal", "student")
## items for analysis
studentdf <- student[ ,names(student) %in% na.omit(itemmaps$student$`Variable Name`)]
teacherdf <- teacher[ ,names(teacher) %in% na.omit(itemmaps$teacher$`Variable Name`)]
principaldf <- principal[ ,names(principal) %in% na.omit(itemmaps$principal$`Variable Name`)]
coachdf <- coach[ ,names(coach) %in% na.omit(itemmaps$coach$`Variable Name`)]
studentdf2 <- studentdf[!(names(studentdf) %in% c("a1118x", "a1120x", "a1121x"))]
## custom factor structure (just an example, not based on theory)
custom <- paste0("f1 =~ ", paste(names(studentdf)[1:10], collapse = " + "),
"\nf2 =~ ",paste(names(studentdf)[11:21], collapse = " + "))
## set seed to get the same folds
set.seed(936639)
tictoc::tic()
kstudent <- kfa(variables = studentdf,
k = NULL,
m = 5,
custom.cfas = custom,
rotation = "oblimin",
ordered = TRUE,
estimator = "DWLS",
missing = "pairwise")
tictoc::toc() # ~ 60 seconds
# Run report
kfa_report(kstudent, file.name = "kfa_students",
report.format = "word_document",
report.title = "K-fold Factor Analysis - Lebenon Students")
semTools::reliability(kstudent[[2]][[2]])[c(1,4),]
semTools::reliability(kstudent$cfas[[2]][[2]])[c(1,4),]
test <- semTools::reliability(kstudent$cfas[[2]][[2]])[c(1,4),]
test[2,]
sum(test[2,] < .60)
sum(test[2,] < .70)
agg_rels(kstudent)
krels <- vector("list", m)
k <- length(kstudent$cfas)
m <- max(unlist(lapply(kstudent$cfas, length)))
krels <- vector("list", m)
kflag <- vector("integer", m)
for(n in 1:m){
rels <- vector("list", k)
rel.flag <- vector("integer", k)
for(f in 1:k){
rels[[f]] <- suppressMessages(semTools::reliability(kstudent[[f]][[n]])[c(1,4),])
rel.flag[[f]] <- sum(rels[[f]][2,] < flag) # flag based on omega, not alpha
}
## mean reliability across folds
krels[[n]] <- Reduce(`+`, rels) / length(rels)
if(n == 1){
krels[[n]] <- as.data.frame(krels[[n]])
names(krels[[n]]) <- "f1"
}
krels[[n]] <- cbind(data.frame(type = c("alpha", "omega_h")), krels[[n]])
## count of folds with a reliabilities below flag threshold
kflag[[n]] <- sum(rel.flag > 0)
}
ks <- kstudent$cfas
krels <- vector("list", m)
kflag <- vector("integer", m)
for(n in 1:m){
rels <- vector("list", k)
rel.flag <- vector("integer", k)
for(f in 1:k){
rels[[f]] <- suppressMessages(semTools::reliability(ks[[f]][[n]])[c(1,4),])
rel.flag[[f]] <- sum(rels[[f]][2,] < flag) # flag based on omega, not alpha
}
## mean reliability across folds
krels[[n]] <- Reduce(`+`, rels) / length(rels)
if(n == 1){
krels[[n]] <- as.data.frame(krels[[n]])
names(krels[[n]]) <- "f1"
}
krels[[n]] <- cbind(data.frame(type = c("alpha", "omega_h")), krels[[n]])
## count of folds with a reliabilities below flag threshold
kflag[[n]] <- sum(rel.flag > 0)
}
semTools::reliability(ks[[f]][[n]])[c(1,4),]
roxygen2::roxygenise()
?models_flags
kfa::model_flags()
?kfa::model_flags
ld <- agg_loadings(kstudent)
cr <- agg_cors(kstudent)
rl <- agg_rels(kstudent)
model_flags(kstudent, cr, rl, ld)
cr$flag
rl$flag
ld$flag
data.frame(
`high factor correlation` = cors$flag,
`low scale reliability` = rels$flag,
`low loading` = loads$flag
)
data.frame(
`high factor correlation` = cr$flag,
`low scale reliability` = rl$flag,
`low loading` = ld$flag
)
multistrux <- lapply(kstudent$efa.structures, function(x) length(x) > 1)
multistrux
names(kstudent$cfas)
names(kstudent$efa.structures)
kstudent$efa.structures[[2]]
kstudent$efa.structures
library(kfa)
set.seed(936639)
tictoc::tic()
kstudent <- kfa(variables = studentdf,
k = NULL,
m = 5,
custom.cfas = custom,
rotation = "oblimin",
ordered = TRUE,
estimator = "DWLS",
missing = "pairwise")
tictoc::toc() # ~ 60 seconds
efa.structures <- kstudent$efa.structures
# collect most common structure for each factor model to use in CFAs
cfa.structures <- vector("list", length = m)
for(n in 1:m){
if(length(efa.structures[[n]]) == 1){ # all one factor structures should be the same
cfa.structures[[n]] <- efa.structures[[n]][[1]]$structure
} else {
# number of folds each structure was found; keep most common structure
num.folds <- unlist(lapply(efa.structures[[n]], function(x) length(x$folds)))
ties <- which(num.folds == max(num.folds))
ties <- ifelse(length(ties) == 1, ties, ties[[1]]) # in case of ties, use first structure
cfa.structures[[n]] <- efa.structures[[n]][[ties]]$structure
}
}
cfa.structures
library(kfa)
#### Import data ####
shortfile <- c("C:/Users/kylenick/University of North Carolina at Chapel Hill/Halpin, Peter Francis - UNC_stat_projets/EFA&CFA/")
student <- read.csv(paste0(shortfile, "scaledim/student_survey-latest.csv"))
teacher <- read.csv(paste0(shortfile, "scaledim/teacher_survey-latest.csv"))
principal <- read.csv(paste0(shortfile, "scaledim/principal_survey-latest.csv"))
coach <- read.csv(paste0(shortfile, "scaledim/coach_survey-latest.csv"))
## item map
itemmaps <- lapply(c("Coach_survey", "Teacher Survey",
"Principal Survey", "Student Survey"), function(x){
readxl::read_excel(paste0(shortfile, "Item construct map_2020_10_25.xlsx"),
sheet = x)})
names(itemmaps) <- c("coach", "teacher", "principal", "student")
## items for analysis
studentdf <- student[ ,names(student) %in% na.omit(itemmaps$student$`Variable Name`)]
teacherdf <- teacher[ ,names(teacher) %in% na.omit(itemmaps$teacher$`Variable Name`)]
principaldf <- principal[ ,names(principal) %in% na.omit(itemmaps$principal$`Variable Name`)]
coachdf <- coach[ ,names(coach) %in% na.omit(itemmaps$coach$`Variable Name`)]
studentdf2 <- studentdf[!(names(studentdf) %in% c("a1118x", "a1120x", "a1121x"))]
# ---- test full kfold_fa function ----------------
## custom factor structure (just an example, not based on theory)
custom <- paste0("f1 =~ ", paste(names(studentdf)[1:10], collapse = " + "),
"\nf2 =~ ",paste(names(studentdf)[11:21], collapse = " + "))
## set seed to get the same folds
set.seed(936639)
tictoc::tic()
kstudent <- kfa(variables = studentdf,
k = NULL,
m = 5,
custom.cfas = custom,
rotation = "oblimin",
ordered = TRUE,
estimator = "DWLS",
missing = "pairwise")
tictoc::toc() # ~ 60 seconds
kstudent$cfa.syntax
kstudent$efa.structures
length(kstudent$efa.structures)
names(kstudent$efa.structures) <- paste0(1:m, "-factor")
names(kstudent$efa.structures) <- paste0(1:5, "-factor")
kstudent$efa.structures
kstudent$efa.structures$`1-factor`
str(kstudent$efa.structures$`1-factor`)
str(kstudent$efa.structures)
strux <- model_structure(kstudent)
str(strux)
library(kfa)
set.seed(936639)
tictoc::tic()
kstudent <- kfa(variables = studentdf,
k = NULL,
m = 5,
custom.cfas = custom,
rotation = "oblimin",
ordered = TRUE,
estimator = "DWLS",
missing = "pairwise")
tictoc::toc() # ~ 60 seconds
multistrux <- lapply(kstudent$efa.structures, function(x) length(x) > 1)
multistrux
cfastrux <- names(kstudent$cfa.syntax)
cfastrux
kstudent$cfa.syntax
rbinde(names(kstudent$cfa.syntax), unlist(efastrux))
rbind(names(kstudent$cfa.syntax), unlist(efastrux))
efastrux <- lapply(kstudent$efa.structures, function(x) length(x) > 1)
rbind(names(kstudent$cfa.syntax), unlist(efastrux))
unlist(efastrux)
as.data.frame(unlist(efastrux)
)
efastrux <- as.data.frame(unlist(lapply(kstudent$efa.structures, function(x) length(x) > 1)))
efastrux
efastrux <- data.frame(model = names(kstudent$efa.structures),
multi = unlist(lapply(kstudent$efa.structures, function(x) length(x) > 1)))
efastrux
cfastrux
?merge
test <- data.frame(model = names(kstudent$cfas),
`high factor correlation` = cr$flag,
`low scale reliability` = rl$flag,
`low loading` = ld$flag,
check.names = FALSE)
ld <- agg_loadings(kstudent)
cr <- agg_cors(kstudent)
rl <- agg_rels(kstudent)
test <- data.frame(model = names(kstudent$cfas),
`high factor correlation` = cr$flag,
`low scale reliability` = rl$flag,
`low loading` = ld$flag,
check.names = FALSE)
efastrux <- data.frame(model = names(kstudent$efa.structures),
multi = unlist(lapply(kstudent$efa.structures, function(x) length(x) > 1)))
test
names(kstudent$cfas)
names(kstudent$cfa.syntax)
names(kstudent$cfas[[1]])
cr$flag
test <- data.frame(model = names(kstudent$cfas[[1]]),
`high factor correlation` = cr$flag,
`low scale reliability` = rl$flag,
`low loading` = ld$flag,
check.names = FALSE)
test
efastrux
test2 <- merge(efastrux, test, by = "model", all.x = FALSE, all.y = TRUE)
test2
library(kfa)
model_flags(kstudent, cr, rl, ld)
# Run report
kfa_report(kstudent, file.name = "kfa_students",
report.format = "word_document",
report.title = "K-fold Factor Analysis - Lebenon Students")
kstructures <- model_structure(kstudent, which = "cfa")
kstructures
kstructures[[1]]$structure
kstructures[[2]]$structure
library(kfa)
# Run report
kfa_report(kstudent, file.name = "kfa_students",
report.format = "word_document",
report.title = "K-fold Factor Analysis - Lebenon Students")
ld$loadings
cr$correlations
rl$reliabilities
ld$flag
roxygen2::roxygenise()
library(kfa)
# Run report
kfa_report(kstudent, file.name = "kfa_students",
report.format = "word_document",
report.title = "K-fold Factor Analysis - Lebenon Students")
ld <- agg_loadings(kstudent)
kfa <- kstudent$cfas
k <- length(kfa)
m <- max(unlist(lapply(kfa, length)))
vnames <- dimnames(lavaan::lavInspect(kfa[[1]][[1]], "sampstat")$cov)[[1]]
n <- 1
lambdas <- data.frame()
load.flag <- vector("integer", k)
for(f in 1:k){
loads <- subset(lavaan::standardizedSolution(kfa[[f]][[n]], "std.lv",
se = FALSE, zstat = FALSE,
pvalue = FALSE, ci = FALSE),
op == "=~")
lambdas <- rbind(lambdas, loads)
load.flag[[f]] <- sum(loads$est.std < flag)
}
flag <- .30
lambdas <- data.frame()
load.flag <- vector("integer", k)
for(f in 1:k){
loads <- subset(lavaan::standardizedSolution(kfa[[f]][[n]], "std.lv",
se = FALSE, zstat = FALSE,
pvalue = FALSE, ci = FALSE),
op == "=~")
lambdas <- rbind(lambdas, loads)
load.flag[[f]] <- sum(loads$est.std < flag)
}
load.flag
lambdas
tapply(lambdas$est.std, lambdas$rhs, function(x) x < flag)
tapply(lambdas$est.std, lambdas$rhs, max),
tapply(lambdas$est.std, lambdas$rhs, max)
tapply(lambdas$est.std, lambdas$rhs, function(x) sum(x < flag))
library(kfa)
# Run report
kfa_report(kstudent, file.name = "kfa_students",
report.format = "word_document",
report.title = "K-fold Factor Analysis - Lebenon Students")
library(kfa)
# Run report
kfa_report(kstudent, file.name = "kfa_students",
report.format = "word_document",
report.title = "K-fold Factor Analysis - Lebenon Students")
ld <- agg_loadings(kstudent)
cr <- agg_cors(kstudent)
rl <- agg_rels(kstudent)
ld$loadings
flextab_format(ld$loadings[[1]])
cr$correlations
rl$reliabilities[[2]]
flextab_fomat(rl$reliabilities[[2]])
flextab_format(rl$reliabilities[[2]])
tic()
ld <- agg_loadings(kstudent)
toc()
tictoc::tic()
ld <- agg_loadings(kstudent)
tictoc::toc()
tictoc::tic()
cr <- agg_cors(kstudent)
tictoc::toc()
tictoc::tic()
rl <- agg_rels(kstudent)
tictoc::toc()
library(kfa)
# Run report
kfa_report(kstudent, file.name = "kfa_students",
report.format = "word_document",
report.title = "K-fold Factor Analysis - Lebenon Students")
library(kfa)
# Run report
kfa_report(kstudent, file.name = "kfa_students",
report.format = "word_document",
report.title = "K-fold Factor Analysis - Lebenon Students")
# Run report
kfa_report(kstudent, file.name = "kfa_students",
report.format = "html_document",
report.title = "K-fold Factor Analysis - Lebenon Students")
tictoc::tic()
model_flags(kstudent, cr, rl, ld)
tictoc::toc() #74.9
str(model_flags(kstudent, cr, rl, ld))
roxygen2::roxygenise()
?flextable::fit_to_width
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
# Run report
kfa_report(kstudent, file.name = "kfa_students",
report.format = "html_document",
report.title = "K-fold Factor Analysis - Lebenon Students")
library(kfa)
# Run report
kfa_report(kstudent, file.name = "kfa_students",
report.format = "html_document",
report.title = "K-fold Factor Analysis - Lebenon Students")
# Run report
kfa_report(kstudent, file.name = "kfa_students",
report.format = "word_document",
report.title = "K-fold Factor Analysis - Lebenon Students")
roxygen2::roxygenise()
roxygen2::roxygenise()
library(kfa)
###################################
#                                 #
#        kfa package tests        #
#                                 #
###################################
#### Import data ####
shortfile <- c("C:/Users/kylenick/University of North Carolina at Chapel Hill/Halpin, Peter Francis - UNC_stat_projets/EFA&CFA/")
student <- read.csv(paste0(shortfile, "scaledim/student_survey-latest.csv"))
teacher <- read.csv(paste0(shortfile, "scaledim/teacher_survey-latest.csv"))
principal <- read.csv(paste0(shortfile, "scaledim/principal_survey-latest.csv"))
coach <- read.csv(paste0(shortfile, "scaledim/coach_survey-latest.csv"))
## item map
itemmaps <- lapply(c("Coach_survey", "Teacher Survey",
"Principal Survey", "Student Survey"), function(x){
readxl::read_excel(paste0(shortfile, "Item construct map_2020_10_25.xlsx"),
sheet = x)})
names(itemmaps) <- c("coach", "teacher", "principal", "student")
## items for analysis
studentdf <- student[ ,names(student) %in% na.omit(itemmaps$student$`Variable Name`)]
teacherdf <- teacher[ ,names(teacher) %in% na.omit(itemmaps$teacher$`Variable Name`)]
principaldf <- principal[ ,names(principal) %in% na.omit(itemmaps$principal$`Variable Name`)]
coachdf <- coach[ ,names(coach) %in% na.omit(itemmaps$coach$`Variable Name`)]
studentdf2 <- studentdf[!(names(studentdf) %in% c("a1118x", "a1120x", "a1121x"))]
# ---- test full kfold_fa function ----------------
## custom factor structure (just an example, not based on theory)
custom <- paste0("f1 =~ ", paste(names(studentdf)[1:10], collapse = " + "),
"\nf2 =~ ",paste(names(studentdf)[11:21], collapse = " + "))
set.seed(936639)
tictoc::tic()
kstudent <- kfa(variables = studentdf,
k = NULL,
m = 5,
custom.cfas = custom,
rotation = "oblimin",
ordered = TRUE,
estimator = "DWLS",
missing = "pairwise")
tictoc::toc() # ~ 60 seconds
tictoc::tic()
ld <- agg_loadings(kstudent)
tictoc::toc() #.16
tictoc::tic()
cr <- agg_cors(kstudent)
tictoc::toc() #.01
tictoc::tic()
rl <- agg_rels(kstudent)
tictoc::toc() #74.9
tictoc::tic()
str(model_flags(kstudent, cr, rl, ld))
tictoc::toc() #.11
install.packages("tidySEM")
# Run report
kfa_report(kstudent, file.name = "kfa_students",
report.format = "html_document",
report.title = "K-fold Factor Analysis - Lebenon Students")
# Run report
kfa_report(kstudent, file.name = "kfa_students",
report.format = "word_document",
report.title = "K-fold Factor Analysis - Lebenon Students")
tidySEM::graph_sem(kstudent$cfas[[2]]$`2-factor`)
library(tidySEM)
tidySEM::graph_sem(kstudent$cfas[[2]]$`2-factor`)
