modtestload <- get_std_loadings(object = modtest)
# extracting unrotated standardized results
params <- lavaan::standardizedsolution(modtest, type = "std.all",
se = FALSE, zstat = FALSE, # Not needed so saves
pvalue = FALSE, ci = FALSE)# computation time
loaddf <- params[params$op == "=~",]
View(loaddf)
# loading matrix dimension names
inames <- unique(loaddf$rhs) # item names
fnames <- unique(loaddf$lhs) # factor names
lavaan::lavInspect(modtest, "est")
lavaan::summary(modtest, standardized = TRUE)
modtestload <- lavaan::lavInspect(modtest, "est")$lambda
modtestload
matonly
fatest
# ----- Comparing model defined by semTools to model defined by regsem ------------
## Model from regsem
rs.mod <- regsem::efaModel(3, names(items))
rs.mod
dimnames(modtestload)
k_efa <- function(variables, m, rotation, threshold,
ordered, estimator, missing, ...){
## calculate and extract sample statistics
sampstats <- lavaan::lavCor(variables,
ordered = ordered,
estimator = estimator,
missing = missing,
output = "fit",
cor.smooth = FALSE,
...)
sample.nobs <- lavaan::lavInspect(sampstats, "nobs")
sample.cov <- lavaan::lavInspect(sampstats, "sampstat")$cov
sample.mean <- lavaan::lavInspect(sampstats, "sampstat")$mean
sample.th <- lavaan::lavInspect(sampstats, "sampstat")$th
attr(sample.th, "th.idx") <- lavaan::lavInspect(sampstats, "th.idx")
WLS.V <- lavaan::lavInspect(sampstats, "wls.v")
NACOV <- lavaan::lavInspect(sampstats, "gamma")
## Running EFAs (no need to run 1-factor b/c we already know the structure)
efa.loadings <- vector(mode = "list", length = m)
for(nf in 2:m){
## write efa syntax
efa.mod <- write_efa(nf = nf, vnames = names(variables))
unrotated <- lavaan::cfa(model = efa.mod,
sample.cov = sample.cov,
sample.nobs = sample.nobs,
sample.mean = sample.mean,
sample.th = sample.th,
WLS.V = WLS.V,
NACOV = NACOV,
std.lv = TRUE,
orthogonal = TRUE,
estimator = estimator,
parameterization = "delta",
se = "none",
test = "none")
# list of unrotated factor loadings
efa.loadings[[nf]] <- lavaan::lavInspect(unrotated, "est")$lambda
}
## if chosen, applying rotation to standardized factor loadings for models where m > 1
# oblique rotations
if(rotation %in% c("oblimin", "oblimax", "quartimin",
"targetQ", "pstQ", "simplimax",
"bentlerQ", "geominQ", "cfQ",
"infomaxQ", "bifactorQ")){
loadings <- lapply(efa.loadings[-1], function(x){
GPArotation::GPFoblq(x, method = rotation)$loadings
})
# orthogonal rotations
} else if(rotation %in% c("targetT", "pstT", "entropy","quartimax", "varimax",
"bentlerT", "tandemI", "tandemII",
"geominT", "cfT", "infomaxT",
"mccammon", "bifactorT")){
loadings <- lapply(efa.loadings[-1], function(x){
GPArotation::GPForth(x, method = rotation)$loadings
})
} else {
loadings <- efa.loadings[-1]
message("Reporting unrotated factor loadings")
}
# converting efa results to cfa syntax
cfa.syntax <- lapply(loadings, function(x){
efa_cfa_syntax(loadings = x,
simple = TRUE,
threshold = threshold,
single.item = "")
})
## adding the 1-factor model as first element in cfa syntax list
onefac <- paste0("f1 =~ ", paste(names(items), collapse = " + "))
cfa.syntax <- c(list(onefac), cfa.syntax)
return(cfa.syntax)
}
roxygen2::roxygenize()
library(kfa)
roxygen2::roxygenize()
kefa <- k_efa(variables = items,
m = 5,
rotation = "oblimin",
threshold = .2,
ordered = names(items),
estimator = "DWLS",
missing = "pairwise")
## Import data
student <- read.csv("C:/Users/kylenick/University of North Carolina at Chapel Hill/Halpin, Peter Francis - UNC_stat_projets/EFA&CFA/scaledim/student_survey-latest.csv")
# extract items
items <- student[ ,grepl("^a11", names(student))]
kefa <- k_efa(variables = items,
m = 5,
rotation = "oblimin",
threshold = .2,
ordered = names(items),
estimator = "DWLS",
missing = "pairwise")
roxygen2::roxygenize()
library(kfa)
## Import data
student <- read.csv("C:/Users/kylenick/University of North Carolina at Chapel Hill/Halpin, Peter Francis - UNC_stat_projets/EFA&CFA/scaledim/student_survey-latest.csv")
# extract items
items <- student[ ,grepl("^a11", names(student))]
kefa <- k_efa(variables = items,
m = 5,
rotation = "oblimin",
threshold = .2,
ordered = names(items),
estimator = "DWLS",
missing = "pairwise")
kefa
lapply(kefa, cat)
cat(kefa[[2]])
tictoc::tic()
kefa <- k_efa(variables = items,
m = 5,
rotation = "oblimin",
threshold = .2,
ordered = names(items),
estimator = "DWLS",
missing = "pairwise")
tictoc::toc()
kefa
lapply(kefa, length)
lapply(kefa, nchar)
kefa[lapply(kefa, nchar) > 0]
roxygen2::roxygenize()
library(kfa)
## Import data
student <- read.csv("C:/Users/kylenick/University of North Carolina at Chapel Hill/Halpin, Peter Francis - UNC_stat_projets/EFA&CFA/scaledim/student_survey-latest.csv")
# extract items
items <- student[ ,grepl("^a11", names(student))]
tictoc::tic()
kefa <- k_efa(variables = items,
m = 5,
rotation = "oblimin",
threshold = .2,
ordered = names(items),
estimator = "DWLS",
missing = "pairwise")
tictoc::toc()
tictoc::tic()
kefa <- k_efa(variables = items,
m = 5,
rotation = "oblimin",
ordered = names(items),
estimator = "DWLS",
missing = "pairwise")
tictoc::toc()
tictoc::tic()
ktest <- kfold_fa(variables = items,
k = NULL,
m = 5,
rotation = "oblimin",
ordered = names(items),
estimator = "DWLS",
missing = "pairwise")
tictoc::toc()
tictoc::tic()
## set seed to get the same folds
set.seed(936639)
ktest <- kfold_fa(variables = items,
k = NULL,
m = 5,
rotation = "oblimin",
ordered = names(items),
estimator = "DWLS",
missing = "pairwise")
tictoc::toc()
testfolds <- caret::createFolds(y = 1:nrow(items),
k = 5, list = TRUE,
returnTrain = FALSE)
check <- items[!c(testfolds[[1]]), ]
check <- items[c(testfolds[[1]]), ]
check <- items[!c(row.names(items) %in% testfolds[[1]]), ]
student <- read.csv("C:/Users/kylenick/University of North Carolina at Chapel Hill/Halpin, Peter Francis - UNC_stat_projets/EFA&CFA/scaledim/student_survey-latest.csv")
# extract items
items <- student[ ,grepl("^a11", names(student))]
tictoc::tic()
kefa <- k_efa(variables = items,
m = 5,
rotation = "oblimin",
ordered = names(items),
estimator = "DWLS",
missing = "pairwise")
tictoc::toc() # ~10 sec
library(kfa)
tictoc::tic()
## set seed to get the same folds
set.seed(936639)
ktest <- kfold_fa(variables = items,
k = NULL,
m = 5,
rotation = "oblimin",
ordered = names(items),
estimator = "DWLS",
missing = "pairwise")
tictoc::toc()
str(ktest)
length(ktest)
length(ktest[[1]])
lapply(ktest, length)
lapply(ktest, function(x) lavaan::fitmeasures(x[[1]])
)
lapply(ktest, function(x) lavaan::fitmeasures(x[[1]], c("cfi.scaled", "rmsea.scaled")))
lapply(ktest, function(x) lavaan::fitmeasures(x[[1]], c("cfi", "rmsea")))
library(kfa)
tictoc::tic()
## set seed to get the same folds
set.seed(936639)
ktest <- kfold_fa(variables = items,
k = NULL,
m = 5,
rotation = "oblimin",
ordered = TRUE,
estimator = "DWLS",
missing = "pairwise")
tictoc::toc()
library(kfa)
## Import data
student <- read.csv("C:/Users/kylenick/University of North Carolina at Chapel Hill/Halpin, Peter Francis - UNC_stat_projets/EFA&CFA/scaledim/student_survey-latest.csv")
teacher <- read.csv("C:/Users/kylenick/University of North Carolina at Chapel Hill/Halpin, Peter Francis - UNC_stat_projets/EFA&CFA/scaledim/teacher_survey-latest.csv")
principal <- read.csv("C:/Users/kylenick/University of North Carolina at Chapel Hill/Halpin, Peter Francis - UNC_stat_projets/EFA&CFA/scaledim/principal_survey-latest.csv")
coach <- read.csv("C:/Users/kylenick/University of North Carolina at Chapel Hill/Halpin, Peter Francis - UNC_stat_projets/EFA&CFA/scaledim/coach_survey-latest.csv")
lapply(list(student, teacher, principal, coach), names)
## Import data
student <- read.csv(paste0(shortfile, "scaledim/student_survey-latest.csv"))
shortfile <- c("C:/Users/kylenick/University of North Carolina at Chapel Hill/Halpin, Peter Francis - UNC_stat_projets/EFA&CFA/")
## Import data
student <- read.csv(paste0(shortfile, "scaledim/student_survey-latest.csv"))
teacher <- read.csv(paste0(shortfile, "scaledim/teacher_survey-latest.csv"))
principal <- read.csv(paste0(shortfile, "scaledim/principal_survey-latest.csv"))
coach <- read.csv(paste0(shortfile, "scaledim/coach_survey-latest.csv"))
?readxl::read_excel
## item map
itemmaps <- lapply(c("Coach_survey", "Teacher Survey",
"Principal Survey", "Student Survey"), function(x){
readxl::read_excel(paste0(shortfile, "Item construct map_2020_10_25.xlsx"),
sheet = x)})
## item map
itemmaps <- lapply(c("Coach_survey", "Teacher Survey",
"Principal Survey", "Student Survey"), function(x){
readxl::read_excel(paste0(shortfile, "Item construct map_2020_10_25.xlsx"),
sheet = x)})
names(itemmaps) <- c("coach", "teacher", "principal", "student")
itemmaps$coach
studentdf <- student[ ,names(student) %in% itemmaps$student$`Variable Name`]
itemmaps$student$`Variable Name`
## items for analysis
studentdf2 <- student[ ,grepl("^a11", names(student))]
names(student)
studentdf <- student[ ,names(student) %in% itemmaps$student$`Variable Name`]
## set seed to get the same folds
set.seed(936639)
tictoc::tic()
kstudent <- kfold_fa(variables = studentdf,
k = NULL,
m = 5,
rotation = "oblimin",
ordered = TRUE,
estimator = "DWLS",
missing = "pairwise")
library(kfa)
## set seed to get the same folds
set.seed(936639)
tictoc::tic()
kstudent <- kfold_fa(variables = studentdf,
k = NULL,
m = 5,
rotation = "oblimin",
ordered = TRUE,
estimator = "DWLS",
missing = "pairwise")
tictoc::toc() # < 100 seconds
?semTools::findRMSEAsamplesize
library(kfa)
## set seed to get the same folds
set.seed(936639)
tictoc::tic()
kstudent <- kfold_fa(variables = studentdf,
k = NULL,
m = 5,
rotation = "oblimin",
ordered = TRUE,
estimator = "DWLS",
missing = "pairwise")
tictoc::toc() # < 100 seconds
library(kfa)
## set seed to get the same folds
set.seed(936639)
tictoc::tic()
kstudent <- kfold_fa(variables = studentdf,
k = NULL,
m = 5,
rotation = "oblimin",
ordered = TRUE,
estimator = "DWLS",
missing = "pairwise")
tictoc::toc() # < 100 seconds
library(kfa)
set.seed(936639)
tictoc::tic()
kstudent <- kfold_fa(variables = studentdf,
k = NULL,
m = 5,
rotation = "oblimin",
ordered = TRUE,
estimator = "DWLS",
missing = "pairwise")
tictoc::toc() # < 100 seconds
library(kfa)
itemmaps$teacher$`Variable Name`
set.seed(936639)
tictoc::tic()
kstudent <- kfold_fa(variables = studentdf,
k = NULL,
m = 5,
rotation = "oblimin",
ordered = TRUE,
estimator = "DWLS",
missing = "pairwise")
tictoc::toc() # < 100 seconds
## items for analysis
studentdf <- student[ ,names(student) %in% na.omit(itemmaps$student$`Variable Name`)]
teacherdf <- teacher[ ,names(teacher) %in% na.omit(itemmaps$teacher$`Variable Name`)]
principaldf <- principal[ ,names(principal) %in% na.omit(itemmaps$principal$`Variable Name`)]
coachdf <- coach[ ,names(coach) %in% na.omit(itemmaps$coach$`Variable Name`)]
62/4
tictoc::tic()
kteacher <- kfold_fa(variables = teacherdf,
k = NULL,
m = 10,
rotation = "oblimin",
ordered = TRUE,
estimator = "DWLS",
missing = "pairwise")
tictoc::toc() # < 100 seconds
findk(teacherdf, m = 10)
findk(coachdf, m = 10)
df <- ((112 - 10)^2 - (112 + 10)) / 2
semTools::findRMSEAsamplesize(rmsea0 = .05, rmseaA = .08, df = df, ...)
semTools::findRMSEAsamplesize(rmsea0 = .05, rmseaA = .08, df = df)
df <- ((8027 - 5)^2 - (8027 + 5)) / 2
semTools::findRMSEAsamplesize(rmsea0 = .05, rmseaA = .08, df = df)
df <- ((21 - 5)^2 - (21 + 5)) / 2
semTools::findRMSEAsamplesize(rmsea0 = .05, rmseaA = .08, df = df)
semTools::findRMSEAsamplesize(rmsea0 = .00, rmseaA = .08, df = df)
semTools::findRMSEAsamplesize(rmsea0 = .00, rmseaA = .05, df = df)
## Import data
shortfile <- c("C:/Users/kylenick/University of North Carolina at Chapel Hill/Halpin, Peter Francis - UNC_stat_projets/EFA&CFA/")
student <- read.csv(paste0(shortfile, "scaledim/student_survey-latest.csv"))
teacher <- read.csv(paste0(shortfile, "scaledim/teacher_survey-latest.csv"))
principal <- read.csv(paste0(shortfile, "scaledim/principal_survey-latest.csv"))
coach <- read.csv(paste0(shortfile, "scaledim/coach_survey-latest.csv"))
## item map
itemmaps <- lapply(c("Coach_survey", "Teacher Survey",
"Principal Survey", "Student Survey"), function(x){
readxl::read_excel(paste0(shortfile, "Item construct map_2020_10_25.xlsx"),
sheet = x)})
names(itemmaps) <- c("coach", "teacher", "principal", "student")
## items for analysis
studentdf <- student[ ,names(student) %in% na.omit(itemmaps$student$`Variable Name`)]
teacherdf <- teacher[ ,names(teacher) %in% na.omit(itemmaps$teacher$`Variable Name`)]
principaldf <- principal[ ,names(principal) %in% na.omit(itemmaps$principal$`Variable Name`)]
coachdf <- coach[ ,names(coach) %in% na.omit(itemmaps$coach$`Variable Name`)]
library(kfa)
set.seed(936639)
tictoc::tic()
kstudent <- kfa(variables = studentdf,
k = NULL,
m = 5,
rotation = "oblimin",
ordered = TRUE,
estimator = "DWLS",
missing = "pairwise")
tictoc::toc() # < 100 seconds
lapply(ktest, function(x) lavaan::fitmeasures(x[[1]], c("cfi", "rmsea")))
lapply(kstudent, function(x) lavaan::fitmeasures(x[[1]], c("cfi", "rmsea")))
lapply(kstudent, length)
dimnames(lavaan::lavInspect(kstudent[[1]][[1]], "sampstat")$cov)
dimnames(lavaan::lavInspect(kstudent[[1]][[1]], "sampstat")$cov)[[1]]
lavaan::summary(kstudent[[1]][[1]])
lapply(kstudent, function(x) lavaan::fitmeasures(x[[1]]))
lapply(kstudent, function(x) lavaan::fitmeasures(x[[1]], c("cfi.scaled", "rmsea.scaled", "rmsea.ci.lower.scaled", "rmsea.ci.upper.scaled")))
lavaan::summary(kstudent[[1]][[1]])
lavaan::summary(kstudent[[1]][[1]], fit.measures = TRUE)
lapply(kstudent, length)
lapply(kstudent, function(x) lavaan::fitmeasures(x[[1]], c("cfi", "rmsea", "rmsea.ci.lower", "rmsea.ci.upper")))
fits <- lapply(kstudent, function(x) lavaan::fitmeasures(x[[1]], c("cfi", "rmsea", "rmsea.ci.lower", "rmsea.ci.upper")))
unlist(fits)
check <- unlist(fits)
check <- Reduce(fits)
check <- rbind(fits)
?Reduce
check <- Reduct(rbind, fits)
check <- Reduce(rbind, fits)
check <- as.data.frame(Reduce(rbind, fits))
View(check)
fits <- lapply(kstudent[[1]], function(x) lavaan::fitmeasures( c("cfi", "rmsea", "rmsea.ci.lower", "rmsea.ci.upper")))
fits <- lapply(kstudent[[1]], function(x) lavaan::fitmeasures(x, c("cfi", "rmsea", "rmsea.ci.lower", "rmsea.ci.upper")))
check <- as.data.frame(Reduce(rbind, fits))
View(check)
check <- cbind(data.frame(Model = 1: length(fits)),
as.data.frame(Reduce(rbind, fits)))
View(check)
max(lapply(kstudent, length))
max(unlist(lapply(kstudent, length)))
library(kfa)
kfa_report(kstudent, instrument.name = "Student")
library(kfa)
kfa_report(kstudent, instrument.name = "Student")
?rmarkdown::render
kfa_report(kstudent, instrument.name = "Student")
library(kfa)
kfa_report(kstudent, instrument.name = "Student")
getwd()
fs::dir_tree()
kfa_report(kstudent, instrument.name = "Student")
library(kfa)
?ggsave
roxygen2::roxygenize()
roxygen2::roxygenize()
roxygen2::roxygenize()
library(kfa)
?ncol
kfa_report(kstudent, instrument.name = "Student")
kfits <- vector("list", length = 10)
for(f in 1:10){
fits <- lapply(kstudent[[f]], function(x) {
lavaan::fitmeasures(x, c("cfi", "rmsea", "rmsea.ci.lower", "rmsea.ci.upper"))
})
fitsdf <- cbind(data.frame(Model = 1:length(fits)),
as.data.frame(Reduce(rbind, fits)))
row.names(fitsdf) <- NULL
kfits[[f]] <- fitsdf
}
fittest <- lapply(kfits, function(x) x[x$rmsea == min(x$rmsea)])
fittest <- as.data.frame(Reduce(rbind(fittest)))
fittest <- as.data.frame(Reduce(rbind,fittest))
fittest <- lapply(kfits, function(x) x[x$rmsea == min(x$rmsea)])
fittest
fittest <- lapply(kfits, function(x) x[x$rmsea == min(x$rmsea),])
fittest
fittest <- as.data.frame(Reduce(rbind,fittest))
fittest <- as.data.frame(Reduce(rbind,fittest))
?table
fittest
fittest <- lapply(kfits, function(x) x[x$rmsea == min(x$rmsea),])
fittest2 <- as.data.frame(Reduce(rbind,fittest))
View(fittest2)
fittest <- as.data.frame(table(fittest2$model), responseName = "folds")
fittest <- as.data.frame(table(fittest2$Model), responseName = "folds")
View(fittest)
## Naming output file and running report
template <- system.file("rmd", "kfa-report.Rmd", package = "kfa")
system.file()
system.file("rmd", "kfa-report.Rmd", package = "kfa")
library(kfa)
system.file("rmd", "kfa-report.Rmd", package = "kfa")
system.file("rmd", "kfa-report.Rmd", package = "kfa")
library(kfa)
kfa_report(kstudent, instrument.name = "Student")
roxygen2::roxygenize()
?grep
library(kfa)
kfa_report(kstudent, report.title = "K-fold Factor Analysis - Lebenon Students",
file.name = "kfa_students")
library(kfa)
kfa_report(kstudent, report.title = "K-fold Factor Analysis - Lebenon Students",
file.name = "kfa_students")
kfa_report(kstudent, report.title = "K-fold Factor Analysis - Lebenon Students",
file.name = "kfa_students")
flextest <- flextab_format(kfits[[1]])
library(kfa)
flextest <- kfa::flextab_format(kfits[[1]])
flextest
lavaan::fitmeasures(kfits[[1]][[1]])
lavaan::fitmeasures(kstudent[[1]][[1]])
library(kfa)
kfa_report(kstudent, report.title = "K-fold Factor Analysis - Lebenon Students",
file.name = "kfa_students")
for(i in 1){
lapply(kstudent, function(x) semPlot::semPaths(x[[i]]))
}
semPlot::semPaths(kstudent[[1]][[1]], what = "std", whatLabels = "no",
intercepts = FALSE, residuals = FALSE,
thresholds = FALSE, reorder = FALSE)
semPlot::semPaths(kstudent[[1]][[2]], what = "std", whatLabels = "no",
intercepts = FALSE, residuals = FALSE,
thresholds = FALSE, reorder = FALSE)
library(kfa)
kfa_report(kstudent, report.title = "K-fold Factor Analysis - Lebenon Students",
file.name = "kfa_students")
library(kfa)
kfa_report(kstudent, report.title = "K-fold Factor Analysis - Lebenon Students",
file.name = "kfa_students")
