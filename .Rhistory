missing = "pairwise")
tictoc::toc() # ~ 100 seconds
m <- 5
vnames <- dimnames(lavaan::lavInspect(kstudent[[1]][[1]], "sampstat")$cov)[[1]]
vnames
kstructures <- model_structure(kstudent)
kstructures
?flextable::compose
length(kstructures[[1]]$folds)
length(kstructures[[1]])
kstructures[[1]]
length(kstructures[[1]][[1]]$folds)
l <- length(kstructures[[1]][[1]]$folds)
?matrix
matrix(1:l, nrow = 2)
?semPlot::semPaths
plotmat <- matrix(1:2, nrow = 2)
graphics::layout(plotmat)
vnames <- dimnames(lavaan::lavInspect(kstudent[[1]][[1]], "sampstat")$cov)[[1]]
plot.settings <- list(what = "std", whatLabels = "no", layout = "tree",
intercepts = FALSE, residuals = FALSE, thresholds = FALSE,
cut = cut, posCol = c("#BF0000","#000000"), fade = FALSE,
# edge.color = , # could create custom function to utilize this argument
weighted = TRUE, negDashed = TRUE, esize = 5,
manifests = vnames, reorder = FALSE)
do.call(semPlot::semPaths, args = c(list(object = kstudent[[1]][[1]],
color = list(lat = palette.colors(n = m + 1, palette = "Okabe-Ito",
recycle = TRUE)[-1]),
title = paste("Fold:", 1)),
plot.settings))
do.call(semPlot::semPaths, args = c(list(object = kstudent[[1]][[1]],
color = list(lat = palette.colors(n = 1 + 1, palette = "Okabe-Ito",
recycle = TRUE)[-1]),
title = paste("Fold:", 1)),
plot.settings))
paste("Fold:", 1)
do.call(semPlot::semPaths, args = c(list(object = kstudent[[1]][[1]],
color = list(lat = palette.colors(n = 1 + 1, palette = "Okabe-Ito",
recycle = TRUE)[-1]),
title = TRUE),
plot.settings))
cut <- .3
plot.settings <- list(what = "std", whatLabels = "no", layout = "tree",
intercepts = FALSE, residuals = FALSE, thresholds = FALSE,
cut = cut, posCol = c("#BF0000","#000000"), fade = FALSE,
# edge.color = , # could create custom function to utilize this argument
weighted = TRUE, negDashed = TRUE, esize = 5,
manifests = vnames, reorder = FALSE)
plotmat <- matrix(1:2, nrow = 2)
graphics::layout(plotmat)
do.call(semPlot::semPaths, args = c(list(object = kstudent[[1]][[1]],
color = list(lat = palette.colors(n = 1 + 1, palette = "Okabe-Ito",
recycle = TRUE)[-1]),
title = TRUE),
plot.settings))
?title
plotmat <- matrix(1:2, nrow = 2)
graphics::layout(plotmat)
do.call(semPlot::semPaths, args = c(list(object = kstudent[[1]][[1]],
color = list(lat = palette.colors(n = 1 + 1, palette = "Okabe-Ito",
recycle = TRUE)[-1]),
title = FALSE),
plot.settings))
title(paste("Fold:", 1))
do.call(semPlot::semPaths, args = c(list(object = kstudent[[2]][[1]],
color = list(lat = palette.colors(n = 1 + 1, palette = "Okabe-Ito",
recycle = TRUE)[-1]),
title = FALSE),
plot.settings))
title(paste("Fold:", 2))
plotmat <- matrix(1:2, nrow = 2)
graphics::layout(plotmat)
do.call(semPlot::semPaths, args = c(list(object = kstudent[[1]][[1]],
color = list(lat = palette.colors(n = 1 + 1, palette = "Okabe-Ito",
recycle = TRUE)[-1]),
title = FALSE),
plot.settings))
title(paste("Fold:", 1), adj = 0)
do.call(semPlot::semPaths, args = c(list(object = kstudent[[2]][[1]],
color = list(lat = palette.colors(n = 1 + 1, palette = "Okabe-Ito",
recycle = TRUE)[-1]),
title = FALSE),
plot.settings))
title(paste("Fold:", 2), adj = 0)
plotmat <- matrix(1:4, nrow = 2)
graphics::layout(plotmat)
for(f in 1:4){
do.call(semPlot::semPaths, args = c(list(object = kstudent[[f]][[1]],
color = list(lat = palette.colors(n = 1 + 1, palette = "Okabe-Ito",
recycle = TRUE)[-1]),
title = FALSE),
plot.settings))
title(paste("Fold:", f), adj = 0)
}
l <- length(kstructures[[1]][[1]]$folds)
plotmat <- matrix(1:l, nrow = 2)
graphics::layout(plotmat)
for(f in 1:l){
do.call(semPlot::semPaths, args = c(list(object = kstudent[[f]][[1]],
color = list(lat = palette.colors(n = 1 + 1, palette = "Okabe-Ito",
recycle = TRUE)[-1]),
title = FALSE),
plot.settings))
title(paste("Fold:", f), adj = 0, line = 1)
}
library(kfa)
# Run report
kfa_report(kstudent, file.name = "kfa_students",
report.format = "html_document",
report.title = "K-fold Factor Analysis - Lebenon Students")
library(kfa)
# Run report
kfa_report(kstudent, file.name = "kfa_students",
report.format = "html_document",
report.title = "K-fold Factor Analysis - Lebenon Students")
?matrix
library(kfa)
# Run report
kfa_report(kstudent, file.name = "kfa_students",
report.format = "html_document",
report.title = "K-fold Factor Analysis - Lebenon Students")
?par
# Run report
kfa_report(kstudent, file.name = "kfa_students",
report.format = "html_document",
report.title = "K-fold Factor Analysis - Lebenon Students")
install.packages("doParallell")
library(doParallel)
getDoParWorkers()
vignette("gettingstartedParallel").
vignette("gettingstartedParallel")
?makeCluster
detectCores()
?registerDoParallel
?makeForkCluster
library(kfa)
#### Import data ####
shortfile <- c("C:/Users/kylenick/University of North Carolina at Chapel Hill/Halpin, Peter Francis - UNC_stat_projets/EFA&CFA/")
student <- read.csv(paste0(shortfile, "scaledim/student_survey-latest.csv"))
teacher <- read.csv(paste0(shortfile, "scaledim/teacher_survey-latest.csv"))
principal <- read.csv(paste0(shortfile, "scaledim/principal_survey-latest.csv"))
coach <- read.csv(paste0(shortfile, "scaledim/coach_survey-latest.csv"))
## item map
itemmaps <- lapply(c("Coach_survey", "Teacher Survey",
"Principal Survey", "Student Survey"), function(x){
readxl::read_excel(paste0(shortfile, "Item construct map_2020_10_25.xlsx"),
sheet = x)})
names(itemmaps) <- c("coach", "teacher", "principal", "student")
## items for analysis
studentdf <- student[ ,names(student) %in% na.omit(itemmaps$student$`Variable Name`)]
teacherdf <- teacher[ ,names(teacher) %in% na.omit(itemmaps$teacher$`Variable Name`)]
principaldf <- principal[ ,names(principal) %in% na.omit(itemmaps$principal$`Variable Name`)]
coachdf <- coach[ ,names(coach) %in% na.omit(itemmaps$coach$`Variable Name`)]
studentdf2 <- studentdf[!(names(studentdf) %in% c("a1118x", "a1120x", "a1121x"))]
## set seed to get the same folds
set.seed(936639)
?detectCores
library(kfa)
set.seed(936639)
tictoc::tic()
kstudent <- kfa(variables = studentdf,
k = NULL,
m = 5,
rotation = "oblimin",
ordered = TRUE,
estimator = "DWLS",
missing = "pairwise")
tictoc::toc() # ~ 100 seconds
set.seed(936639)
tictoc::tic()
kstudent.par <- temp_kfa(variables = studentdf,
k = NULL,
m = 5,
parallel = TRUE,
rotation = "oblimin",
ordered = TRUE,
estimator = "DWLS",
missing = "pairwise")
tictoc::toc() # ~ 100 seconds
set.seed(936639)
tictoc::tic()
kstudent.par <- temp_kfa(variables = studentdf,
k = NULL,
m = 5,
parallel = FALSE,
rotation = "oblimin",
ordered = TRUE,
estimator = "DWLS",
missing = "pairwise")
tictoc::toc() # ~ 50 seconds
library(kfa)
#### Import data ####
shortfile <- c("C:/Users/kylenick/University of North Carolina at Chapel Hill/Halpin, Peter Francis - UNC_stat_projets/EFA&CFA/")
student <- read.csv(paste0(shortfile, "scaledim/student_survey-latest.csv"))
teacher <- read.csv(paste0(shortfile, "scaledim/teacher_survey-latest.csv"))
principal <- read.csv(paste0(shortfile, "scaledim/principal_survey-latest.csv"))
coach <- read.csv(paste0(shortfile, "scaledim/coach_survey-latest.csv"))
## item map
itemmaps <- lapply(c("Coach_survey", "Teacher Survey",
"Principal Survey", "Student Survey"), function(x){
readxl::read_excel(paste0(shortfile, "Item construct map_2020_10_25.xlsx"),
sheet = x)})
names(itemmaps) <- c("coach", "teacher", "principal", "student")
## items for analysis
studentdf <- student[ ,names(student) %in% na.omit(itemmaps$student$`Variable Name`)]
teacherdf <- teacher[ ,names(teacher) %in% na.omit(itemmaps$teacher$`Variable Name`)]
principaldf <- principal[ ,names(principal) %in% na.omit(itemmaps$principal$`Variable Name`)]
coachdf <- coach[ ,names(coach) %in% na.omit(itemmaps$coach$`Variable Name`)]
studentdf2 <- studentdf[!(names(studentdf) %in% c("a1118x", "a1120x", "a1121x"))]
set.seed(936639)
tictoc::tic()
kstudent <- kfa(variables = studentdf,
k = NULL,
m = 5,
rotation = "oblimin",
ordered = TRUE,
estimator = "DWLS",
missing = "pairwise")
tictoc::toc() # ~ 100 seconds
lavaan::HolzingerSwineford1939
nrow(lavaan::HolzingerSwineford1939)
library(kfa)
#### Import data ####
shortfile <- c("C:/Users/kylenick/University of North Carolina at Chapel Hill/Halpin, Peter Francis - UNC_stat_projets/EFA&CFA/")
student <- read.csv(paste0(shortfile, "scaledim/student_survey-latest.csv"))
teacher <- read.csv(paste0(shortfile, "scaledim/teacher_survey-latest.csv"))
principal <- read.csv(paste0(shortfile, "scaledim/principal_survey-latest.csv"))
coach <- read.csv(paste0(shortfile, "scaledim/coach_survey-latest.csv"))
## item map
itemmaps <- lapply(c("Coach_survey", "Teacher Survey",
"Principal Survey", "Student Survey"), function(x){
readxl::read_excel(paste0(shortfile, "Item construct map_2020_10_25.xlsx"),
sheet = x)})
names(itemmaps) <- c("coach", "teacher", "principal", "student")
## items for analysis
studentdf <- student[ ,names(student) %in% na.omit(itemmaps$student$`Variable Name`)]
teacherdf <- teacher[ ,names(teacher) %in% na.omit(itemmaps$teacher$`Variable Name`)]
principaldf <- principal[ ,names(principal) %in% na.omit(itemmaps$principal$`Variable Name`)]
coachdf <- coach[ ,names(coach) %in% na.omit(itemmaps$coach$`Variable Name`)]
studentdf2 <- studentdf[!(names(studentdf) %in% c("a1118x", "a1120x", "a1121x"))]
## set seed to get the same folds
set.seed(936639)
tictoc::tic()
kstudent <- kfa(variables = studentdf,
k = NULL,
m = 5,
rotation = "oblimin",
ordered = TRUE,
estimator = "DWLS",
missing = "pairwise")
library(kfa)
set.seed(936639)
tictoc::tic()
kstudent <- kfa(variables = studentdf,
k = NULL,
m = 5,
rotation = "oblimin",
ordered = TRUE,
estimator = "DWLS",
missing = "pairwise")
tictoc::toc() # ~ 100 seconds
?foreach::%dopar%
?foreach::`%dopar%`
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
library(kfa)
set.seed(936639)
tictoc::tic()
kstudent <- kfa(variables = studentdf,
k = NULL,
m = 5,
rotation = "oblimin",
ordered = TRUE,
estimator = "DWLS",
missing = "pairwise")
tictoc::toc() # ~ 100 seconds
# Run report
kfa_report(kstudent, file.name = "kfa_students",
report.format = "word_document",
report.title = "K-fold Factor Analysis - Lebenon Students")
library(kfa)
# Run report
kfa_report(kstudent, file.name = "kfa_students",
report.format = "word_document",
report.title = "K-fold Factor Analysis - Lebenon Students")
matrix(0, nrow = 3, ncol = 3)
matrix(0, nrow = 4, ncol = )
matrix(0, nrow = 4, ncol = 4)
4*5
3*4/2
library(kfa)
#### Import data ####
shortfile <- c("C:/Users/kylenick/University of North Carolina at Chapel Hill/Halpin, Peter Francis - UNC_stat_projets/EFA&CFA/")
student <- read.csv(paste0(shortfile, "scaledim/student_survey-latest.csv"))
teacher <- read.csv(paste0(shortfile, "scaledim/teacher_survey-latest.csv"))
principal <- read.csv(paste0(shortfile, "scaledim/principal_survey-latest.csv"))
coach <- read.csv(paste0(shortfile, "scaledim/coach_survey-latest.csv"))
## item map
itemmaps <- lapply(c("Coach_survey", "Teacher Survey",
"Principal Survey", "Student Survey"), function(x){
readxl::read_excel(paste0(shortfile, "Item construct map_2020_10_25.xlsx"),
sheet = x)})
names(itemmaps) <- c("coach", "teacher", "principal", "student")
## items for analysis
studentdf <- student[ ,names(student) %in% na.omit(itemmaps$student$`Variable Name`)]
teacherdf <- teacher[ ,names(teacher) %in% na.omit(itemmaps$teacher$`Variable Name`)]
principaldf <- principal[ ,names(principal) %in% na.omit(itemmaps$principal$`Variable Name`)]
coachdf <- coach[ ,names(coach) %in% na.omit(itemmaps$coach$`Variable Name`)]
studentdf2 <- studentdf[!(names(studentdf) %in% c("a1118x", "a1120x", "a1121x"))]
## set seed to get the same folds
set.seed(936639)
roxygen2::roxygenise()
library(kfa)
set.seed(936639)
tictoc::tic()
kstudent <- kfa(variables = studentdf,
k = NULL,
m = 5,
rotation = "oblimin",
ordered = TRUE,
estimator = "DWLS",
missing = "pairwise")
tictoc::toc() # ~ 60 seconds
max(unlist(lapply(kstudent, length)))
class(kstudents[[1]])
class(kstudent[[1]])
class(kstudent[[1]][[1]])
semTools::reliability(kstudent[[1]][[1]])
semTools::reliability(kstudent[[1]][[2]])
?round
temp <- semTools::reliability(kstudent[[1]][[2]])
row.names(temp)
temp[c(1,4),]
m <- 2
for(s in 1:k){
rels[[s]] <- semTools::reliability(kstudent[[s]][[m]])[c(1,4),]
row.names(rels[[s]]) <- c("alpha", "omega_h")
}
k <- length(kstudents)
k <- length(kstudent)
m <- 2
for(s in 1:k){
rels[[s]] <- semTools::reliability(kstudent[[s]][[m]])[c(1,4),]
row.names(rels[[s]]) <- c("alpha", "omega_h")
}
rels <- vector("list", k)
for(s in 1:k){
rels[[s]] <- semTools::reliability(kstudent[[s]][[m]])[c(1,4),]
row.names(rels[[s]]) <- c("alpha", "omega_h")
}
rels
aggrels <- Reduce(`+`, rels) / length(rels)
aggrels
roxygen2::roxygenise()
library(kfa)
agg_reliability(kstudent)
k <- length(kstudent)
m <- 2
rels <- vector("list", k)
for(s in 1:k){
rels[[s]] <- semTools::reliability(kstudent[[s]][[m]])[c(1,4),]
}
aggrels <- Reduce(`+`, rels) / length(rels)
aggrels
row.names(aggrels)
m <- 1
rels <- vector("list", k)
for(s in 1:k){
rels[[s]] <- semTools::reliability(kstudent[[s]][[m]])[c(1,4),]
}
aggrels <- Reduce(`+`, rels) / length(rels)
aggrels
rels
class(aggrels)
k_model_fit(kstudent)
kfits <- k_model_fit(kstudent)
bdf <- as.data.frame(Reduce(rbind, kfits))
bdf
tapply(bdf[["rmsea"]], bdf$factors, skimr::skim)
?tapply
tapply(bdf[["rmsea"]], bdf$factors, function(x) skimr::skim(x)[["hist"]])
temp <- tapply(bdf[["rmsea"]], bdf$factors, function(x) skimr::skim(x))
class(temp)
str(temp)
temp$1[["numeric.hist"]]
temp$`1`$numeric.hist
temp <- tapply(bdf[["rmsea"]], bdf$factors, function(x) skimr::skim(x)[["numeric.hist"]])
temp
library(kfa)
# Run report
kfa_report(kstudent, file.name = "kfa_students",
report.format = "word_document",
report.title = "K-fold Factor Analysis - Lebenon Students")
kfits <- k_model_fit(kstudent)
temp <- agg_model_fit(kfits)
temp
str(temp)
temp$dist
library(kfa)
# Run report
kfa_report(kstudent, file.name = "kfa_students",
report.format = "word_document",
report.title = "K-fold Factor Analysis - Lebenon Students")
krels <- agg_reliability(kstudent)
krels
as.data.frame(krels[[1]])
data.frame(krels[[1]])
?as.data.frame
as.data.frame(krels[[1]], col.names = "f1")
class(krels[[1]])
library(kfa)
# Run report
kfa_report(kstudent, file.name = "kfa_students",
report.format = "word_document",
report.title = "K-fold Factor Analysis - Lebenon Students")
#### Import data ####
shortfile <- c("C:/Users/kylenick/University of North Carolina at Chapel Hill/Halpin, Peter Francis - UNC_stat_projets/EFA&CFA/")
student <- read.csv(paste0(shortfile, "scaledim/student_survey-latest.csv"))
teacher <- read.csv(paste0(shortfile, "scaledim/teacher_survey-latest.csv"))
principal <- read.csv(paste0(shortfile, "scaledim/principal_survey-latest.csv"))
coach <- read.csv(paste0(shortfile, "scaledim/coach_survey-latest.csv"))
## item map
itemmaps <- lapply(c("Coach_survey", "Teacher Survey",
"Principal Survey", "Student Survey"), function(x){
readxl::read_excel(paste0(shortfile, "Item construct map_2020_10_25.xlsx"),
sheet = x)})
names(itemmaps) <- c("coach", "teacher", "principal", "student")
## items for analysis
studentdf <- student[ ,names(student) %in% na.omit(itemmaps$student$`Variable Name`)]
teacherdf <- teacher[ ,names(teacher) %in% na.omit(itemmaps$teacher$`Variable Name`)]
principaldf <- principal[ ,names(principal) %in% na.omit(itemmaps$principal$`Variable Name`)]
coachdf <- coach[ ,names(coach) %in% na.omit(itemmaps$coach$`Variable Name`)]
studentdf2 <- studentdf[!(names(studentdf) %in% c("a1118x", "a1120x", "a1121x"))]
## set seed to get the same folds
set.seed(936639)
tictoc::tic()
kstudent <- kfa(variables = studentdf,
k = NULL,
m = 5,
rotation = "oblimin",
ordered = TRUE,
estimator = "DWLS",
missing = "pairwise")
tictoc::toc() # ~ 60 seconds
library(kfa)
set.seed(936639)
tictoc::tic()
kstudent <- kfa(variables = studentdf,
k = NULL,
m = 5,
rotation = "oblimin",
ordered = TRUE,
estimator = "DWLS",
missing = "pairwise")
tictoc::toc() # ~ 60 seconds
krels <- agg_reliability(kstudent)
kfits <- k_model_fit(kstudent)
kfits
rmsea <- agg_model_fit(kfits)
rmsea
temp$hist
rmsea$hist
cfi <- agg_model_fit(kfits, index = "cfi")
cfi
cfi$hist
?merge
merge(rmsea, cfi, by = "factor")
merge(rmsea, cfi, by = "factors")
test <- merge(rmsea, cfi, by = "factors")
fit.flex <- flextable::flextable(test)
fit.flex <- flextable::colformat_double(fit.flex, j = -1, digits = digits)
fit.flex <- flextable::colformat_double(fit.flex, j = -1, digits = 2)
fit.flex
fit.flex <- flextable::align(fit.flex, align = "center", part = "all")
fit.flex <- flextable::add_header_row(fit.flex, top = TRUE, c("RMSEA", "CFI"), colwidths = 4)
fit.flex <- flextable::add_header_row(fit.flex, top = TRUE, c("", "RMSEA", "CFI"), colwidths = c(1, 4, 4))
fit.flex
names(test) <- c("factors", rep(c("mean", "range", "hist", "best_in_fold"), times = 2))
test
fit.flex <- flextable::flextable(test)
test <- merge(rmsea, cfi, by = "factors", suffixes = c("_rmsea", "_cfi"))
test
fit.map <- data.frame(col_keys = names(test),
index = c("factors", "rmsea", "cfi"),
measure = c("factors", rep(c("mean", "range", "hist", "best_in_fold"), times = 2)))
fit.flex <- flextable::flextable(test)
fit.flex <- flextable::colformat_double(fit.flex, j = -1, digits = 2)
fit.flex <- flextable::set_header_df(fit.flex, mapping = fit.map)
fit.flex
fit.map <- data.frame(col_keys = names(test),
index = c("factors", rep(c("rmsea", "cfi"), each = 4)),
measure = c("factors", rep(c("mean", "range", "hist", "best_in_fold"), times = 2)))
fit.flex <- flextable::flextable(test)
fit.flex <- flextable::colformat_double(fit.flex, j = -1, digits = 2)
fit.flex <- flextable::set_header_df(fit.flex, mapping = fit.map)
fit.flex
fit.flex <- merge_h(fit.flex, part = "header")
fit.flex <- flextable::merge_h(fit.flex, part = "header")
fit.flex
fit.flex <- flextable::merge_v(fit.flex, j = "factors", part = "header")
fit.flex
fit.flex <- flextable::align(fit.flex, align = "center", part = "all")
fit.flex
fit.flex <- flextable::set_header_labels(fit.flex, best_in_fold = "best in fold")
fit.flex
fit.flex <- flextable::theme_vanilla(fit.flex)
fit.flex
fit.flex <- flextable::fix_border_issues(fit.flex)
fit.flex
fit.flex <- flextable::align(fit.flex, align = "center", part = "all")
fit.flex
